var e=require("fs"),t=require("minimatch"),r=require("node-gzip"),o=require("@caporal/core"),n=require("@gltf-transform/core"),a=require("@gltf-transform/extensions"),i=require("@gltf-transform/functions"),s=require("cli-table3"),l=require("csv-stringify"),u=require("command-exists"),m=require("ktx-parse"),p=require("meshoptimizer"),c=require("path"),d=require("gltf-validator");function g(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var f=/*#__PURE__*/g(e),h=/*#__PURE__*/g(t),v=/*#__PURE__*/g(s),y=/*#__PURE__*/g(l),b=/*#__PURE__*/g(c),x=/*#__PURE__*/g(d);function w(){return(w=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e}).apply(this,arguments)}function T(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,o=new Array(t);r<t;r++)o[r]=e[r];return o}function S(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return T(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?T(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var o=0;return function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(r=e[Symbol.iterator]()).next.bind(r)}var E=require("child_process");function R(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}function z(e,t){if(void 0===t&&(t=2),0===e)return"0 Bytes";var r=t<0?0:t,o=Math.floor(Math.log(e)/Math.log(1e3));return parseFloat((e/Math.pow(1e3,o)).toFixed(r))+" "+["Bytes","KB","MB","GB","TB","PB","EB","ZB","YB"][o]}function q(e){return e.match(/.{1,80}(\s|$)/g).map(function(e){return e.trim()}).join("\n")}function U(e){return"\n "+e.toUpperCase()+"\n ────────────────────────────────────────────"}function A(e,t){var r=e.getRoot(),o=e.getGraph().listParentLinks(t).filter(function(e){return e.getParent()!==r}).map(function(e){return e.getName()});return Array.from(new Set(o))}function _(e,t){for(var r,o=0,a=S(e.getGraph().listParentLinks(t));!(r=a()).done;){var i=r.value;i instanceof n.TextureLink&&(o|=i.channels)}return o}exports.spawnSync=E.spawnSync,exports.commandExistsSync=u.sync;var N,P=/*#__PURE__*/function(){function e(e,t,r,o){this._io=void 0,this._logger=void 0,this._input=void 0,this._output=void 0,this._io=e,this._logger=t,this._input=r,this._output=o,e.setLogger(t)}return e.create=function(t,r,o,n){return new e(t,r,o,n)},e.prototype.transform=function(){try{for(var e=this,t=arguments,r=e._input?e._io.read(e._input).setLogger(e._logger):(new n.Document).setLogger(e._logger),o=function(){var t=i[a],o=r.getRoot().listExtensionsUsed().find(function(e){return e.extensionName===t});o&&(o.dispose(),e._logger.warn("Decoded "+t+". Further compression will be lossy."))},a=0,i=["KHR_draco_mesh_compression","EXT_meshopt_compression"];a<i.length;a++)o();return Promise.resolve(r.transform.apply(r,[].slice.call(t))).then(function(){e._io.write(e._output,r);var t=e._io,o=t.lastReadBytes,a=t.lastWriteBytes;if(e._input){var i=n.FileUtils.basename(e._input)+"."+n.FileUtils.extension(e._input),s=n.FileUtils.basename(e._output)+"."+n.FileUtils.extension(e._output);e._logger.info(i+" ("+z(o)+") → "+s+" ("+z(a)+")")}else{var l=n.FileUtils.basename(e._output)+"."+n.FileUtils.extension(e._output);e._logger.info(l+" ("+z(a)+")")}})}catch(e){return Promise.reject(e)}},e}(),M=function(e,t,r){try{switch(e){case N.PRETTY:var o=new v.default({head:t});return o.push.apply(o,r),Promise.resolve(o.toString());case N.CSV:return Promise.resolve(new Promise(function(e,o){y.default([t].concat(r),function(t,r){t?o(t):e(r)})}));case N.MD:var n=new v.default({head:t,chars:O});return n.push(new Array(r[0].length).fill("---")),n.push.apply(n,r),Promise.resolve(n.toString())}return Promise.resolve()}catch(e){return Promise.reject(e)}},C=function(e,t,r,o){try{var n=o.properties;if(console.log(U(e)),!n.length)return console.log("No "+e+" found.\n"),Promise.resolve();var a=n.map(function(e,r){return function(e,t,r){var o={"#":t};for(var n in e){var a=e[n];o[n]=Array.isArray(a)?a.join(", "):n.match(/size/i)&&r!==N.CSV?a>0?z(a):"":"number"==typeof a?r!==N.CSV?R(a):a:"boolean"==typeof a?a?"✓":"":a}return o}(e,r,t)}),i=Object.keys(a[0]),s=a.map(function(e){return Object.values(e)}),l=t!==N.CSV?function(e,t,r){var o=[];if("meshes"===e){for(var n=0;n<r.length;n++)"size"===r[n]&&(r[n]+="¹");o.push('¹ size estimates GPU memory required by a mesh, in isolation. If accessors are\n  shared by other mesh primitives, but the meshes themselves are not reused, then\n  the sum of all mesh sizes will overestimate the asset\'s total size. See "dedup".')}if("textures"===e){for(var a=0;a<r.length;a++)"gpuSize"===r[a]&&(r[a]+="¹");o.push("¹ gpuSize estimates minimum GPU memory allocation. Older devices may require\n  additional memory for GPU compression formats.")}return o}(e,0,i):[];return Promise.resolve(M(t,i,s)).then(function(e){console.log(e),l.length&&console.log("\n"+l.join("\n")),o.warnings&&o.warnings.forEach(function(e){return r.warn(q(e))}),console.log("\n")})}catch(e){return Promise.reject(e)}};!function(e){e.PRETTY="pretty",e.CSV="csv",e.MD="md"}(N||(N={}));var O={top:"","top-mid":"","top-left":"","top-right":"",bottom:"","bottom-mid":"","bottom-left":"","bottom-right":"",left:"|","left-mid":"",mid:"","mid-mid":"",right:"|","right-mid":"",middle:"|"},k={method:"edgebreaker",encodeSpeed:5,decodeSpeed:5,quantizePosition:14,quantizeNormal:10,quantizeColor:8,quantizeTexcoord:12,quantizeGeneric:12,quantizationVolume:"mesh"},I=function(e){var t=w({},k,e);return function(e){e.createExtension(a.DracoMeshCompression).setRequired(!0).setEncoderOptions({method:"edgebreaker"===t.method?a.DracoMeshCompression.EncoderMethod.EDGEBREAKER:a.DracoMeshCompression.EncoderMethod.SEQUENTIAL,encodeSpeed:t.encodeSpeed,decodeSpeed:t.decodeSpeed,quantizationBits:{POSITION:t.quantizePosition,NORMAL:t.quantizeNormal,COLOR:t.quantizeColor,TEX_COORD:t.quantizeTexcoord,GENERIC:t.quantizeGeneric},quantizationVolume:t.quantizationVolume})}},L=require("minimatch");function B(){return function(e){try{for(var t,r=e.getLogger(),o=0,n=S(e.getRoot().listTextures());!(t=n()).done;){var a=t.value;if("image/ktx2"===a.getMimeType()){var i=a.getImage();if(i){var s=m.read(new Uint8Array(i)),l=s.dataFormatDescriptor[0],u=A(e,a);if(0!==u.length){var p=u.find(function(e){return L(e,"*{color,emissive}*",{nocase:!0})})?m.KTX2Primaries.SRGB:m.KTX2Primaries.UNSPECIFIED,c=a.getURI()||a.getName(),d=!1;l.colorPrimaries!==p&&(l.colorPrimaries=p,r.info("ktxfix: Set colorPrimaries="+p+' for texture "'+c+'"'),d=!0),d&&(a.setImage(m.write(s).buffer),o++)}}}}return r.info("ktxfix: Found and repaired issues in "+o+" textures"),r.debug("ktxfix: Complete."),Promise.resolve()}catch(e){return Promise.reject(e)}}}var D=function(e){var t=e.paths,r=e.io;return function(o){var a=o.getLogger();if(t.forEach(function(e,i){a.debug("Merging "+(i+1)+" / "+t.length+", "+e);var s=n.FileUtils.basename(e),l=n.FileUtils.extension(e).toLowerCase();if(["png","jpg","jpeg","webp","ktx2"].includes(l))o.createTexture(s).setImage(n.BufferUtils.trim(f.default.readFileSync(e))).setMimeType(n.ImageUtils.extensionToMimeType(l)).setURI(s+"."+l);else{if(!["gltf","glb"].includes(l))throw new Error('Unknown file extension: "'+l+'".');o.merge(r.read(e))}}),!e.partition){var i=o.getRoot().listBuffers()[0];o.getRoot().listAccessors().forEach(function(e){return e.setBuffer(i)}),o.getRoot().listBuffers().forEach(function(e,t){return t>0?e.dispose():null})}a.debug("merge: Complete.")}},F={level:"high"},G=function(e){var t=w({},F,e);return function(e){try{return Promise.resolve(e.transform(i.reorder({encoder:p.MeshoptEncoder,target:"size"}),i.quantize({pattern:"medium"===t.level?/.*/:/^(POSITION|TEXCOORD|JOINTS|WEIGHTS)(_\d+)?$/,quantizePosition:14,quantizeTexcoord:12,quantizeColor:8,quantizeNormal:8}))).then(function(){e.createExtension(a.MeshoptCompression).setRequired(!0).setEncoderOptions({method:"medium"===t.level?a.MeshoptCompression.EncoderMethod.QUANTIZE:a.MeshoptCompression.EncoderMethod.FILTER})})}catch(e){return Promise.reject(e)}}},j=require("fs"),K=require("minimatch"),X=require("semver"),V=require("tmp");V.setGracefulCleanup();var Q=n.TextureChannel.R,W=n.TextureChannel.G,Z={ETC1S:"etc1s",UASTC:"uastc"},H={BOX:"box",TENT:"tent",BELL:"bell",BSPLINE:"b-spline",MITCHELL:"mitchell",LANCZOS3:"lanczos3",LANCZOS4:"lanczos4",LANCZOS6:"lanczos6",LANCZOS12:"lanczos12",BLACKMAN:"blackman",KAISER:"kaiser",GAUSSIAN:"gaussian",CATMULLROM:"catmullrom",QUADRATIC_INTERP:"quadratic_interp",QUADRATIC_APPROX:"quadratic_approx",QUADRATIC_MIX:"quadratic_mix"},J={filter:H.LANCZOS4,filterScale:1,powerOfTwo:!1,slots:"*"},Y=w({quality:128,compression:1},J),$=w({level:2,rdo:0,rdoDictionarySize:32768,rdoBlockScale:10,rdoStdDev:18,rdoMultithreading:!0,zstd:18},J),ee=function(e){return e=w({},e.mode===Z.ETC1S?Y:$,e),function(t){var r=t.getLogger();!function(e){if(!exports.commandExistsSync("toktx")&&!process.env.CI)throw new Error('Command "toktx" not found. Please install KTX-Software, from:\n\nhttps://github.com/KhronosGroup/KTX-Software');var t=exports.spawnSync("toktx",["--version"],{encoding:"utf-8"}),r=t.status,o=(t.stdout||t.stderr).replace(/toktx\s+/,"").replace(/~\d+/,"").trim();if(0!==r||!X.valid(X.clean(o)))throw new Error('Unable to find "toktx" version. Confirm KTX-Software is installed.');X.lt(X.clean(o),"4.0.0-rc1")?e.warn("Expected KTX-Software >= v4.0.0-rc1, found "+o+"."):e.debug("Found KTX-Software "+o+".")}(r);var o=t.createExtension(a.TextureBasisu).setRequired(!0),i=0;t.getRoot().listTextures().forEach(function(o,a){var s=A(t,o),l=_(t,o),u=o.getURI()||o.getName()||a+1+"/"+t.getRoot().listTextures().length;if(r.debug("Texture "+u+" ("+s.join(", ")+")"),"image/ktx2"!==o.getMimeType())if("image/png"===o.getMimeType()||"image/jpeg"===o.getMimeType())if("*"===e.slots||s.find(function(t){return K(t,e.slots,{nocase:!0})})){var m=o.getImage(),p=o.getSize();if(m&&p){var c=o.getURI()?n.FileUtils.extension(o.getURI()):n.ImageUtils.mimeTypeToExtension(o.getMimeType()),d=V.tmpNameSync({postfix:"."+c}),g=V.tmpNameSync({postfix:".ktx2"}),f=m.byteLength;j.writeFileSync(d,Buffer.from(m));var h=[].concat(function(e,t,r,o,n){var a,i,s=[];if(s.push("--genmipmap"),n.filter!==J.filter&&s.push("--filter",n.filter),n.filterScale!==J.filterScale&&s.push("--fscale",n.filterScale),n.mode===Z.UASTC){var l=n;s.push("--uastc",l.level),l.rdo!==$.rdo&&s.push("--uastc_rdo_l",l.rdo),l.rdoDictionarySize!==$.rdoDictionarySize&&s.push("--uastc_rdo_d",l.rdoDictionarySize),l.rdoBlockScale!==$.rdoBlockScale&&s.push("--uastc_rdo_b",l.rdoBlockScale),l.rdoStdDev!==$.rdoStdDev&&s.push("--uastc_rdo_s",l.rdoStdDev),l.rdoMultithreading||s.push("--uastc_rdo_m"),l.zstd&&l.zstd>0&&s.push("--zcmp",l.zstd)}else{var u=n;s.push("--bcmp"),u.quality!==Y.quality&&s.push("--qlevel",u.quality),u.compression!==Y.compression&&s.push("--clevel",u.compression),u.maxEndpoints&&s.push("--max_endpoints",u.maxEndpoints),u.maxSelectors&&s.push("--max_selectors",u.maxSelectors),u.rdoOff?s.push("--no_endpoint_rdo","--no_selector_rdo"):u.rdoThreshold&&(s.push("--endpoint_rdo_threshold",u.rdoThreshold),s.push("--selector_rdo_threshold",u.rdoThreshold)),e.find(function(e){return K(e,"*normal*",{nocase:!0})})&&s.push("--normal_map")}return e.length&&!e.find(function(e){return K(e,"*{color,emissive}*",{nocase:!0})})&&s.push("--assign_oetf","linear","--assign_primaries","none"),t===Q?s.push("--target_type","R"):t!==W&&t!==(Q|W)||s.push("--target_type","RG"),n.powerOfTwo?(a=re(r[0]),i=re(r[1])):(te(r[0])&&te(r[1])||o.warn("Texture dimensions "+r[0]+"x"+r[1]+" are NPOT, and may fail in older APIs (including WebGL 1.0) on certain devices."),a=oe(r[0])?r[0]:ne(r[0]),i=oe(r[1])?r[1]:ne(r[1])),a===r[0]&&i===r[1]||((a>4096||i>4096)&&o.warn("Resizing to nearest power of two, "+a+"x"+i+"px. Texture dimensions greater than 4096px may not render on some mobile devices. Resize to a lower resolution before compressing, if needed."),s.push("--resize",a+"x"+i)),s}(s,l,p,r,e),[g,d]);r.debug("• toktx "+h.join(" "));var v=exports.spawnSync("toktx",h,{stdio:[process.stderr]});if(0!==v.status)throw r.error("• Texture compression failed:\n\n"+v.stderr.toString()),new Error("Texture compression failed");o.setImage(n.BufferUtils.trim(j.readFileSync(g))).setMimeType("image/ktx2"),o.getURI()&&o.setURI(n.FileUtils.basename(o.getURI())+".ktx2"),i++;var y=o.getImage().byteLength;r.debug("• "+z(f)+" → "+z(y)+" bytes.")}else r.warn("• Skipping, unreadable texture.")}else r.debug('• Skipping, excluded by pattern "'+e.slots+'".');else r.warn('• Skipping, unsupported texture type "'+o.getMimeType()+'".');else r.debug("• Skipping, already KTX.")}),0===i&&r.warn("No textures were found, or none were selected for compression."),t.getRoot().listTextures().find(function(e){return"image/ktx2"===e.getMimeType()})||o.dispose()}};function te(e){return e<=2||0==(e&e-1)&&0!==e}function re(e){if(e<=2)return e;if(e<=4)return 4;var t=function(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))}(e),r=function(e){return Math.pow(2,Math.ceil(Math.log(e)/Math.LN2))}(e);return r-e>e-t?t:r}function oe(e){return e%4==0}function ne(e){return e<=2?e:e<=4?4:e%4?e+4-e%4:e}var ae,ie=function(){return function(e){var t=e.createExtension(a.MaterialsUnlit).createUnlit();e.getRoot().listMaterials().forEach(function(e){e.setExtension("KHR_materials_unlit",t)})}};function se(e,t,r,o){console.log(U(e));var n=r.issues.messages.filter(function(e){return e.severity===t});if(n.length){var a=new v.default({head:["code","message","severity","pointer"]});a.push.apply(a,n.map(function(e){return Object.values(e)})),console.log(a.toString())}else o.info("No "+e+"s found.");console.log("\n")}var le=require("draco3dgltf"),ue=require("mikktspace"),me=require("meshoptimizer"),pe=me.MeshoptDecoder,ce=me.MeshoptEncoder,de=new Promise(function(e){Promise.all([le.createDecoderModule(),le.createEncoderModule(),pe.ready,ce.ready]).then(function(t){var r=t[0],o=t[1];ae=(new n.NodeIO).registerExtensions(a.ALL_EXTENSIONS).registerDependencies({"draco3d.decoder":r,"draco3d.encoder":o,"meshopt.decoder":pe,"meshopt.encoder":ce}),e()})}),ge="Path to read glTF 2.0 (.glb, .gltf) model",fe="Path to write output";o.program.version(require("../package.json").version).description("Commandline interface for the glTF-Transform SDK."),o.program.command("","\n\n🔎 INSPECT ──────────────────────────────────────────"),o.program.command("inspect","Inspect the contents of the model").help("\nInspect the contents of the model, printing a table with properties and\nstatistics for scenes, meshes, materials, textures, and animations contained\nby the file. This data is useful for understanding how much of a file's size\nis comprised of geometry vs. textures, which extensions are needed when loading\nthe file, and which material properties are being used.\n\nUse --format=csv or --format=md for alternative display formats.\n\t".trim()).argument("<input>",ge).option("--format <format>","Table output format",{validator:[N.PRETTY,N.CSV,N.MD],default:N.PRETTY}).action(function(e){var t=e.args,r=e.options,o=e.logger;try{return ae.setLogger(o),Promise.resolve(function(e,t,r,o){try{var n=e.json.extensionsUsed||[],a=e.json.extensionsRequired||[];return console.log(U("metadata")),Promise.resolve(M(o,["key","value"],[["version",e.json.asset.version],["generator",e.json.asset.generator||""],["extensionsUsed",n.join(", ")||"none"],["extensionsRequired",a.join(", ")||"none"]])).then(function(n){var a;console.log(n+"\n\n");try{a=t.readJSON(e)}catch(e){throw r.warn("Unable to parse document."),e}var s=i.inspect(a);return Promise.resolve(C("scenes",o,r,s.scenes)).then(function(){return Promise.resolve(C("meshes",o,r,s.meshes)).then(function(){return Promise.resolve(C("materials",o,r,s.materials)).then(function(){return Promise.resolve(C("textures",o,r,s.textures)).then(function(){return Promise.resolve(C("animations",o,r,s.animations)).then(function(){})})})})})})}catch(e){return Promise.reject(e)}}(ae.readAsJSON(t.input),ae,o,r.format)).then(function(){})}catch(e){return Promise.reject(e)}}),o.program.command("validate","Validate the model against the glTF spec").help("\nValidate the model with official glTF validator. The validator detects whether\na file conforms correctly to the glTF specification, and is useful for\ndebugging issues with a model. Validation errors typically suggest a problem\nin the authoring process, and can be reported as bugs on the software used to\nexport the file. Certain lower-priority issues are not technically invalid, but\nmay indicate an unintended situation in the file, like unused data not attached\nto any particular scene.\n\nFor more details about the official validation suite used here, see:\nhttps://github.com/KhronosGroup/glTF-Validator\n\nExample:\n\n  ▸ gltf-transform validate input.glb --ignore ACCESSOR_WEIGHTS_NON_NORMALIZED\n\t".trim()).argument("<input>",ge).option("--limit <limit>","Limit number of issues to display",{validator:o.program.NUMBER,default:1e7}).option("--ignore <CODE>,<CODE>,...","Issue codes to be ignored",{validator:o.program.ARRAY,default:[]}).action(function(e){var t,r,o,n;r=e.options,o=e.logger,n=f.default.readFileSync(t=e.args.input),x.default.validateBytes(new Uint8Array(n),{maxIssues:r.limit,ignoredIssues:r.ignore,externalResourceFunction:function(e){return new Promise(function(r,n){e=b.default.resolve(b.default.dirname(t),decodeURIComponent(e)),f.default.readFile(e,function(t,a){t&&o.warn('Unable to validate "'+e+'": '+t.toString()+"."),t?n(t.toString()):r(a)})})}}).then(function(e){se("error",0,e,o),se("warning",1,e,o),se("info",2,e,o),se("hint",3,e,o)})}),o.program.command("","\n\n📦 PACKAGE ──────────────────────────────────────────"),o.program.command("copy","Copy the model with minimal changes").alias("cp").help("\nCopy the model from <input> to <output> with minimal changes. Unlike filesystem\n`cp`, this command does parse the file into glTF-Transform's internal\nrepresentation before serializing it to disk again. No other intentional\nchanges are made, so copying a model can be a useful first step to confirm that\nglTF-Transform is reading and writing the model correctly when debugging issues\nin a larger script doing more complex processing of the file. Copying may also\nbe used to ensure consistent data layout across glTF files from different\nexporters, e.g. if your engine always requires interleaved vertex attributes.\n\nWhile vertex data remains byte-for-byte the same before and after copying, and\nscene, node, material, and other properties are also preserved losslessly,\ncertain aspects of data layout may change slightly with this process:\n\n- Vertex attributes within a mesh are interleaved.\n- Accessors are organized into buffer views according to usage.\n- Draco compression is removed to avoid a lossy decompress/compress round trip.\n".trim()).argument("<input>",ge).argument("<output>",fe).action(function(e){var t=e.args;return P.create(ae,e.logger,t.input,t.output).transform()}),o.program.command("merge","Merge two or more models into one").help("\nMerge two or more models into one, each in a separate Scene. Optionally, the\nbinary data for each model may be kept in a separate buffer with the\n--partition flag.\n\nExample:\n\n  ▸ gltf-transform merge a.glb b.glb c.glb output.glb\n\t".trim()).argument("<path...>",ge+"(s). Final path is used to write output.").option("--partition","Whether to keep separate buffers for each input file. Invalid for GLB output.",{validator:o.program.BOOLEAN,default:!1}).action(function(e){var t=e.args,r=e.options,o=e.logger,n="string"==typeof t.path?t.path.split(","):t.path,a=n.pop();return P.create(ae,o,"",a).transform(D({io:ae,paths:n,partition:!!r.partition}))}),o.program.command("partition","Partition binary data into separate .bin files").help("\nPartition binary data for meshes or animations into separate .bin files. In\nengines that support lazy-loading resources within glTF files, this allows\nrestructuring the data to minimize initial load time, fetching additional\nresources as needed. Partitioning is supported only for .gltf, not .glb, files.\n\t".trim()).argument("<input>",ge).argument("<output>",fe).option("--animations","Partition each animation into a separate .bin file",{validator:o.program.BOOLEAN,default:!1}).option("--meshes","Partition each mesh into a separate .bin file",{validator:o.program.BOOLEAN,default:!1}).action(function(e){var t=e.args,r=e.options;return P.create(ae,e.logger,t.input,t.output).transform(i.partition(r))}),o.program.command("dedup","Deduplicate accessors and textures").help("\nDeduplicate accessors, textures, materials, and meshes. Some exporters or\npipeline processing may lead to multiple resources within a file containing\nredundant copies of the same information. This functions scans for these cases\nand merges the duplicates where possible, reducing file size. The process may\nbe very slow on large files with many accessors.\n\nDeduplication early in a pipeline may also help other optimizations, like\ncompression and instancing, to be more effective.\n\t".trim()).argument("<input>",ge).argument("<output>",fe).option("--accessors <accessors>","Remove duplicate accessors",{validator:o.program.BOOLEAN,default:!0}).option("--materials <materials>","Remove duplicate materials",{validator:o.program.BOOLEAN,default:!0}).option("--meshes <meshes>","Remove duplicate meshes",{validator:o.program.BOOLEAN,default:!0}).option("--textures <textures>","Remove duplicate textures",{validator:o.program.BOOLEAN,default:!0}).action(function(e){var t=e.args,r=e.options,o=e.logger,a=[];return r.accessors&&a.push(n.PropertyType.ACCESSOR),r.materials&&a.push(n.PropertyType.MATERIAL),r.meshes&&a.push(n.PropertyType.MESH),r.textures&&a.push(n.PropertyType.TEXTURE),P.create(ae,o,t.input,t.output).transform(i.dedup({propertyTypes:a}))}),o.program.command("prune","Remove unreferenced properties from the file").help("\nRemoves properties from the file if they are not referenced by a Scene. Helpful\nwhen cleaning up after complex workflows or a faulty exporter. This function\nmay (conservatively) fail to identify some unused extension properties, such as\nlights, but it will not remove anything that is still in use, even if used by\nan extension. Animations are considered unused if they do not target any nodes\nthat are children of a scene.\n\t".trim()).argument("<input>",ge).argument("<output>",fe).action(function(e){var t=e.args,r=e.options;return P.create(ae,e.logger,t.input,t.output).transform(i.prune(r))}),o.program.command("gzip","Compress the model with lossless gzip").help("\nCompress the model with gzip. Gzip is a general-purpose file compression\ntechnique, not specific to glTF models. On the web, decompression is\nhandled automatically by the web browser, without any intervention from the\nclient application.\n\nWhen the model contains resources that are already effectively compressed, like\nJPEG textures or Draco geometry, gzip is unlikely to add much further benefit\nand can be skipped. Other compression strategies, like Meshopt and quantization,\nwork best when combined with gzip.\n").argument("<input>",ge).action(function(e){var t=e.args,o=e.logger,n=f.default.readFileSync(t.input);return r.gzip(n).then(function(e){var r=t.input+".gz",a=z(n.byteLength),i=z(e.byteLength);f.default.writeFileSync(r,e),o.info("Created "+r+" ("+a+" → "+i+")")})}),o.program.command("","\n\n🌍 SCENE ────────────────────────────────────────────"),o.program.command("center","Center the scene at the origin, or above/below it").help("\nCenter the scene at the origin, or above/below it. When loading a model into\na larger scene, or into an augmented reality context, it's often best to ensure\nthe model's pivot is centered beneath the object. For objects meant to be\nattached a surface, like a ceiling fan, the pivot may be located above instead.\n\t".trim()).argument("<input>",ge).argument("<output>",fe).option("--pivot <pivot>","Method used to determine the scene pivot",{validator:["center","above","below"],default:"center"}).action(function(e){var t=e.args,r=e.options;return P.create(ae,e.logger,t.input,t.output).transform(i.center(w({},r)))}),o.program.command("instance","Create GPU instances from shared Mesh references").help("\nFor meshes reused by more than one node in a scene, this command creates an\nEXT_mesh_gpu_instancing extension to aid with GPU instancing. In engines that\nsupport the extension, this may allow GPU instancing to be used, reducing draw\ncalls and improving framerate.\n\nEngines may use GPU instancing with or without the presence of this extension,\nand are strongly encouraged to do so. However, particularly when loading a\nmodel at runtime, the extension provides useful context allowing the engine to\nuse this technique efficiently.\n\nInstanced meshes cannot be animated, and must share the same materials. For\nfurther details, see:\n\nhttps://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_mesh_gpu_instancing.\n\t".trim()).argument("<input>",ge).argument("<output>",fe).action(function(e){var t=e.args,r=e.options;return P.create(ae,e.logger,t.input,t.output).transform(i.instance(w({},r)))}),o.program.command("","\n\n🕋 GEOMETRY ─────────────────────────────────────────"),o.program.command("draco","Compress geometry with Draco").help("\nCompress mesh geometry with the Draco library. This type of compression affects\nonly geometry data — animation and textures are not compressed.\n\nCompresses\n- geometry (only triangle meshes)\n\nDocumentation\n- https://gltf-transform.donmccurdy.com/classes/extensions.dracomeshcompression.html\n\nReferences\n- draco: https://github.com/google/draco\n- KHR_draco_mesh_compression: https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_draco_mesh_compression/\n".trim()).argument("<input>",ge).argument("<output>",fe).option("--method <method>","Compression method.",{validator:["edgebreaker","sequential"],default:"edgebreaker"}).option("--encode-speed <encodeSpeed>","Encoding speed vs. compression level, 1–10.",{validator:o.program.NUMBER,default:k.encodeSpeed}).option("--decode-speed <decodeSpeed>","Decoding speed vs. compression level, 1–10.",{validator:o.program.NUMBER,default:k.decodeSpeed}).option("--quantize-position <bits>","Quantization bits for POSITION, 1-16.",{validator:o.program.NUMBER,default:k.quantizePosition}).option("--quantize-normal <bits>","Quantization bits for NORMAL, 1-16.",{validator:o.program.NUMBER,default:k.quantizeNormal}).option("--quantize-color <bits>","Quantization bits for COLOR_*, 1-16.",{validator:o.program.NUMBER,default:k.quantizeColor}).option("--quantize-texcoord <bits>","Quantization bits for TEXCOORD_*, 1-16.",{validator:o.program.NUMBER,default:k.quantizeTexcoord}).option("--quantize-generic <bits>","Quantization bits for other attributes, 1-16.",{validator:o.program.NUMBER,default:k.quantizeGeneric}).option("--quantization-volume <volume>","Bounds for quantization grid.",{validator:["mesh","scene"],default:k.quantizationVolume}).action(function(e){var t=e.args,r=e.options;return P.create(ae,e.logger,t.input,t.output).transform(i.weld({tolerance:0}),I(r))}),o.program.command("meshopt","Compress geometry and animation with Meshopt").help("\nCompress geometry, morph targets, and animation with Meshopt. Meshopt\ncompression decodes very quickly, and is best used in combination with a\nlossless compression method like brotli or gzip.\n\nCompresses\n- geometry (points, lines, triangle meshes)\n- morph targets\n- animation tracks\n\nDocumentation\n- https://gltf-transform.donmccurdy.com/classes/extensions.meshoptcompression.html\n\nReferences\n- meshoptimizer: https://github.com/zeux/meshoptimizer\n- EXT_meshopt_compression: https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Vendor/EXT_meshopt_compression/\n".trim()).argument("<input>",ge).argument("<output>",fe).option("--level <level>","Compression level.",{validator:["medium","high"],default:"high"}).action(function(e){var t=e.args,r=e.options;return P.create(ae,e.logger,t.input,t.output).transform(G(r))}),o.program.command("quantize","Quantize geometry, reducing precision and memory").help("\nQuantization is a simple type of compression taking 32-bit float vertex\nattributes and storing them as 16-bit or 8-bit integers. A quantization factor\nrestoring the original value (with some error) is applied on the GPU, although\nnode scales and positions may also be changed to account for the quantization.\n\nQuantized vertex attributes require less space, both on disk and on the GPU.\nMost vertex attribute types can be quantized from 8–16 bits, but are always\nstored in 8- or 16-bit accessors. While a value quantized to 12 bits still\noccupies 16 bits on disk, gzip (or other lossless compression) will be more\neffective on values quantized to lower bit depths. As a result, the default\nbit depths used by this command are generally between 8 and 16 bits.\n\nBit depths for indices and JOINTS_* are determined automatically.\n\nRequires KHR_mesh_quantization support.".trim()).argument("<input>","Path to read glTF 2.0 (.glb, .gltf) input").argument("<output>","Path to write output").option("--pattern <pattern>","Pattern for vertex attributes (case-insensitive glob)",{validator:o.program.STRING,default:"*"}).option("--quantize-position <bits>","Precision for POSITION attributes.",{validator:o.program.NUMBER,default:i.QUANTIZE_DEFAULTS.quantizePosition}).option("--quantize-normal <bits>","Precision for NORMAL and TANGENT attributes.",{validator:o.program.NUMBER,default:i.QUANTIZE_DEFAULTS.quantizeNormal}).option("--quantize-texcoord <bits>","Precision for TEXCOORD_* attributes.",{validator:o.program.NUMBER,default:i.QUANTIZE_DEFAULTS.quantizeTexcoord}).option("--quantize-color <bits>","Precision for COLOR_* attributes.",{validator:o.program.NUMBER,default:i.QUANTIZE_DEFAULTS.quantizeColor}).option("--quantize-weight <bits>","Precision for WEIGHTS_* attributes.",{validator:o.program.NUMBER,default:i.QUANTIZE_DEFAULTS.quantizeWeight}).option("--quantize-generic <bits>","Precision for custom (_*) attributes.",{validator:o.program.NUMBER,default:i.QUANTIZE_DEFAULTS.quantizeGeneric}).option("--quantization-volume <volume>","Bounds for quantization grid.",{validator:["mesh","scene"],default:i.QUANTIZE_DEFAULTS.quantizationVolume}).action(function(e){var t=e.args,r=e.options,o=e.logger,n=h.default.makeRe(String(r.pattern),{nocase:!0});return P.create(ae,o,t.input,t.output).transform(i.quantize(w({},r,{pattern:n})))}),o.program.command("dequantize","Dequantize geometry").help("\nRemoves quantization from an asset. This will increase the size of the asset on\ndisk and in memory, but may be necessary for applications that don't support\nquantization.\n\nRemoves KHR_mesh_quantization, if present.".trim()).argument("<input>","Path to read glTF 2.0 (.glb, .gltf) input").argument("<output>","Path to write output").option("--pattern <pattern>","Pattern for vertex attributes (case-insensitive glob)",{validator:o.program.STRING,default:"!JOINTS_*"}).action(function(e){var t=e.args,r=e.options,o=e.logger,n=h.default.makeRe(String(r.pattern),{nocase:!0});return P.create(ae,o,t.input,t.output).transform(i.dequantize(w({},r,{pattern:n})))}),o.program.command("weld","Index geometry and optionally merge similar vertices").help("\nIndex geometry and optionally merge similar vertices. When merged and indexed,\ndata is shared more efficiently between vertices. File size can be reduced, and\nthe GPU can sometimes use the vertex cache more efficiently. With --tolerance=0,\ngeometry is indexed in place, without merging.\n\t".trim()).argument("<input>",ge).argument("<output>",fe).option("--tolerance","Per-attribute tolerance to merge similar vertices",{validator:o.program.NUMBER,default:1e-4}).action(function(e){var t=e.args,r=e.options;return P.create(ae,e.logger,t.input,t.output).transform(i.weld(r))}),o.program.command("unweld","De-index geometry, disconnecting any shared vertices").help('\nDe-index geometry, disconnecting any shared vertices. This tends to increase\nthe file size of the geometry and decrease efficiency, and so is not\nrecommended unless disconnected vertices ("vertex soup") are required for some\nparicular software application.\n\t'.trim()).argument("<input>",ge).argument("<output>",fe).action(function(e){var t=e.args,r=e.options;return P.create(ae,e.logger,t.input,t.output).transform(i.unweld(r))}),o.program.command("tangents","Generate MikkTSpace vertex tangents").help("\nGenerates MikkTSpace vertex tangents.\n\nIn some situations normal maps may appear incorrectly, displaying hard edges\nat seams, or unexpectedly inverted insets and extrusions. The issue is most\ncommonly caused by a mismatch between the software used to bake the normal map\nand the pixel shader or other code used to render it. While this may be a\nfrustration to an artist/designer, it is not always possible for the rendering\nengine to reconstruct the tangent space used by the authoring software.\n\nMost normal map bakers use the MikkTSpace standard (http://www.mikktspace.com/)\nto generate vertex tangents while creating a normal map, and the technique is\nrecommended by the glTF 2.0 specification. Generating vertex tangents with this\ntool may resolve rendering issues related to normal maps in engines that cannot\ncompute MikkTSpace tangents at runtime.\n\t".trim()).argument("<input>",ge).argument("<output>",fe).option("--overwrite","Overwrite existing vertex tangents",{validator:o.program.BOOLEAN,default:!1}).action(function(e){var t=e.args,r=e.options;return P.create(ae,e.logger,t.input,t.output).transform(i.tangents(w({generateTangents:ue.generateTangents},r)))}),o.program.command("reorder","Optimize vertex data for locality of reference").help("\nOptimize vertex data for locality of reference.\n\nChoose whether the order should be optimal for transmission size (recommended for Web) or for GPU\nrendering performance. When optimizing for transmission size, reordering is expected to be a pre-\nprocessing step before applying Meshopt compression and lossless supercompression (such as gzip or\nbrotli). Reordering will only reduce size when used in combination with other compression methods.\n\nBased on the meshoptimizer library (https://github.com/zeux/meshoptimizer).\n\t".trim()).argument("<input>",ge).argument("<output>",fe).option("--target","Whether to optimize for transmission size or GPU performance",{validator:["size","performance"],default:"size"}).action(function(e){var t=e.args,r=e.options;return P.create(ae,e.logger,t.input,t.output).transform(i.reorder(w({encoder:ce},r)))}),o.program.command("","\n\n✨ MATERIAL ─────────────────────────────────────────"),o.program.command("metalrough","Convert materials from spec/gloss to metal/rough").help("\nConvert materials from spec/gloss to metal/rough. In general, the metal/rough\nworkflow is better supported, more compact, and more future-proof. All features\nof the spec/gloss workflow can be converted to metal/rough, as long as the\nKHR_materials_specular and KHR_materials_ior extensions are supported. When one\nor both of those extensions are not supported, metallic materials may require\nfurther adjustments after the conversion.\n\nThis conversion rewrites spec/gloss textures, and the resulting textures may\nhave less optimal compression than the original. Ideally, lossless PNG textures\nshould be used as input, and then compressed after this conversion.\n\t".trim()).argument("<input>",ge).argument("<output>",fe).action(function(e){var t=e.args;return P.create(ae,e.logger,t.input,t.output).transform(i.metalRough())}),o.program.command("unlit","Convert materials from metal/rough to unlit").help("\nConvert materials to an unlit, shadeless model. Unlit materials are not\naffected by scene lighting, and can be rendered very efficiently on less\ncapable mobile devices. If device framerate is high when an object occupies a\nsmall part of the viewport, and low when that object fills the viewport, it's\nlikely that the GPU is fragment shader bound, and a simpler material (such as\nan unlit material) may improve performance.\n\nUnlit materials are also helpful for non-physically-based visual styles.\n\t".trim()).argument("<input>",ge).argument("<output>",fe).action(function(e){var t=e.args;return P.create(ae,e.logger,t.input,t.output).transform(ie())}),o.program.command("","\n\n🖼  TEXTURE ──────────────────────────────────────────"),o.program.command("resize","Resize PNG or JPEG textures").help("\nResize PNG or JPEG textures with Lanczos3 (sharp) or Lanczos2 (smooth)\nfiltering. Typically Lanczos3 is the best method, but Lanczos2 may be helpful\nto reduce ringing artifacts in some cases.\n\nLimits --width and --height are applied as maximum dimensions for each texture,\npreserving original aspect ratio. Texture dimensions are never increased.\n".trim()).argument("<input>",ge).argument("<output>",fe).option("--pattern <pattern>","Pattern (regex) to match textures, by name or URI.",{validator:o.program.STRING}).option("--filter","Resampling filter",{validator:[i.TextureResizeFilter.LANCZOS3,i.TextureResizeFilter.LANCZOS2],default:i.TEXTURE_RESIZE_DEFAULTS.filter}).option("--width <pixels>","Maximum width (px) of output textures.",{validator:o.program.NUMBER,required:!0}).option("--height <pixels>","Maximum height (px) of output textures.",{validator:o.program.NUMBER,required:!0}).action(function(e){var t=e.args,r=e.options,o=e.logger;try{var n=r.pattern?h.default.makeRe(String(r.pattern),{nocase:!0}):null;return Promise.resolve(P.create(ae,o,t.input,t.output).transform(i.textureResize({size:[r.width,r.height],filter:r.filter,pattern:n})))}catch(e){return Promise.reject(e)}});var he="\nCompresses textures in the given file to .ktx2 GPU textures using the\n{VARIANT} Basis Universal bitstream. GPU textures offer faster GPU upload\nand less GPU memory consumption than traditional PNG or JPEG textures,\nwhich are fully uncompressed in GPU memory. GPU texture formats require\nmore attention to compression settings to get similar visual results.\n\n{DETAILS}\n\nDocumentation:\nhttps://gltf-transform.donmccurdy.com/extensions.html#khr_texture_basisu\n\nDependencies:\nKTX-Software (https://github.com/KhronosGroup/KTX-Software/)\n";o.program.command("etc1s","KTX + Basis ETC1S texture compression").help(he.replace("{VARIANT}","ETC1S").replace("{DETAILS}","\nETC1S, one of the two Basis Universal bitstreams, offers lower size and lower\nquality than UASTC. In some cases it may be useful to increase the resolution\nof the texture, to minimize compression artifacts while still retaining an\noverall smaller filesize. Consider using less aggressive compression settings\nfor normal maps than for other texture types: you may want to use UASTC for\nnormal maps and ETC1S for other textures, for example.".trim()),{sectionName:"SUMMARY"}).argument("<input>",ge).argument("<output>",fe).option("--slots <slots>","Texture slots to include (glob)",{validator:o.program.STRING,default:"*"}).option("--filter <filter>","Specifies the filter to use when generating mipmaps.",{validator:Object.values(H),default:Y.filter}).option("--filter-scale <fscale>","Specifies the filter scale to use when generating mipmaps.",{validator:o.program.NUMBER,default:Y.filterScale}).option("--compression <clevel>","Compression level, an encoding speed vs. quality tradeoff. Higher values are slower, but give higher quality. Try --quality before experimenting with this option.",{validator:[0,1,2,3,4,5],default:Y.compression}).option("--quality <qlevel>","Quality level. Range is 1 - 255. Lower gives better compression, lower quality, and faster encoding. Higher gives less compression, higher quality, and slower encoding. Quality level determines values of --max_endpoints and --max-selectors, unless those values are explicitly set.",{validator:o.program.NUMBER,default:Y.quality}).option("--max-endpoints <max_endpoints>","Manually set the maximum number of color endpoint clusters from 1-16128.",{validator:o.program.NUMBER}).option("--max-selectors <max_selectors>","Manually set the maximum number of color selector clusters from 1-16128.",{validator:o.program.NUMBER}).option("--power-of-two","Resizes any non-power-of-two textures to the closest power-of-two dimensions, not exceeding 2048x2048px. Required for  compatibility on some older devices and APIs, particularly  WebGL 1.0.",{validator:o.program.BOOLEAN}).option("--rdo-threshold <rdo_threshold>","Set endpoint and selector RDO quality threshold. Lower is higher quality but less quality per output bit (try 1.0-3.0). Overrides --quality.",{validator:o.program.NUMBER}).option("--rdo-off","Disable endpoint and selector RDO (slightly faster, less noisy output, but lower quality per output bit).",{validator:o.program.BOOLEAN}).action(function(e){var t=e.args,r=e.options;return P.create(ae,e.logger,t.input,t.output).transform(ee(w({mode:Z.ETC1S},r)))}),o.program.command("uastc","KTX + Basis UASTC texture compression").help(he.replace("{VARIANT}","UASTC").replace("{DETAILS}","\nUASTC, one of the two Basis Universal bitstreams, offers higher size and higher\nquality than ETC1S. While it is suitable for all texture types, you may find it\nuseful to apply UASTC only where higher quality is necessary, and apply ETC1S\nfor textures where the quality is sufficient.".trim()),{sectionName:"SUMMARY"}).argument("<input>",ge).argument("<output>",fe).option("--slots <slots>","Texture slots to include (glob)",{validator:o.program.STRING,default:"*"}).option("--filter <filter>","Specifies the filter to use when generating mipmaps.",{validator:Object.values(H),default:$.filter}).option("--filter-scale <fscale>","Specifies the filter scale to use when generating mipmaps.",{validator:o.program.NUMBER,default:$.filterScale}).option("--level <level>","Create a texture in high-quality transcodable UASTC format. The optional parameter <level> selects a speed vs quality tradeoff as shown in the following table:\n\nLevel | Speed     | Quality\n——————|———————————|————————\n0     | Fastest   | 43.45dB\n1     | Faster    | 46.49dB\n2     | Default   | 47.47dB\n3     | Slower    | 48.01dB\n4     | Very slow | 48.24dB",{validator:[0,1,2,3,4],default:$.level}).option("--power-of-two","Resizes any non-power-of-two textures to the closest power-of-two dimensions, not exceeding 2048x2048px. Required for  compatibility on some older devices and APIs, particularly  WebGL 1.0.",{validator:o.program.BOOLEAN}).option("--rdo <uastc_rdo_l>","Enable UASTC RDO post-processing and optionally set UASTC RDO quality scalar (lambda).  Lower values yield higher quality/larger LZ compressed files, higher values yield lower quality/smaller LZ compressed files. A good range to try is [.25, 10]. For normal maps, try [.25, .75]. Full range is [.001, 10.0].",{validator:o.program.NUMBER,default:$.rdo}).option("--rdo-dictionary-size <uastc_rdo_d>","Set UASTC RDO dictionary size in bytes. Default is 32768. Lower values=faster, but give less compression. Possible range is [256, 65536].",{validator:o.program.NUMBER,default:$.rdoDictionarySize}).option("--rdo-block-scale <uastc_rdo_b>","Set UASTC RDO max smooth block error scale. Range is [1.0, 300.0]. Default is 10.0, 1.0 is disabled. Larger values suppress more artifacts (and allocate more bits) on smooth blocks.",{validator:o.program.NUMBER,default:$.rdoBlockScale}).option("--rdo-std-dev <uastc_rdo_s>","Set UASTC RDO max smooth block standard deviation. Range is [.01, 65536.0]. Default is 18.0. Larger values expand the range of blocks considered smooth.",{validator:o.program.NUMBER,default:$.rdoStdDev}).option("--rdo-multithreading <uastc_rdo_m>","Enable RDO multithreading (slightly lower compression, non-deterministic).",{validator:o.program.BOOLEAN,default:$.rdoMultithreading}).option("--zstd <compressionLevel>","Supercompress the data with Zstandard. Compression level range is [1, 22], or 0 is uncompressed. Lower values decode faster but offer less compression. Values above 20 should be used with caution, requiring more memory to decompress:\n\nLevel | Window Size |\n——————|—————————————|\n1     | 256 KB      |\n…     | …           |\n10    | 2 MB        |\n…     | …           |\n18    | 8 MB        |\n19    | 8 MB        |\n20    | 34 MB       |\n21    | 67 MB       |\n22    | 134 MB      |",{validator:o.program.NUMBER,default:$.zstd}).action(function(e){var t=e.args,r=e.options;return P.create(ae,e.logger,t.input,t.output).transform(ee(w({mode:Z.UASTC},r)))}),o.program.command("ktxfix","Fixes common issues in KTX texture metadata").help("\nCertain KTX texture metadata was written incorrectly in early (pre-release)\nsoftware. In particular, viewers may misinterpret color primaries as sRGB\nincorrectly when a texture exhibits this issue.\n\nThis command determines correct color primaries based on usage in the glTF\nfile, and updates the KTX texture accordingly. The change is lossless, and\naffects only the container metadata.".trim()).argument("<input>",ge).argument("<output>",fe).action(function(e){var t=e.args;return P.create(ae,e.logger,t.input,t.output).transform(B())}),o.program.command("","\n\n⏯  ANIMATION ────────────────────────────────────────"),o.program.command("resample","Resample animations, losslessly deduplicating keyframes").help('\nResample animations, losslessly deduplicating keyframes. Exporters sometimes\nneed to "bake" animations, writing data for 20-30 frames per second, in order\nto correctly represent IK constraints and other animation techniques. These\nadditional keyframes are often redundant — particularly with morph targets —\nas engines can interpolate animation at 60–120 FPS even with sparse keyframes.\n\nThe resampling process removes redundant keyframes from animations using STEP\nand LINEAR interpolation. Resampling is nearly lossless, with configurable\n--tolerance, and should have no visible effect on animation playback.\n\t'.trim()).argument("<input>",ge).argument("<output>",fe).option("--tolerance","Per-value tolerance to merge similar keyframes",{validator:o.program.NUMBER,default:1e-4}).action(function(e){var t=e.args,r=e.options;return P.create(ae,e.logger,t.input,t.output).transform(i.resample(r))}),o.program.command("sequence","Animate node visibilities as a flipboard sequence").help("\nAnimate node visibilities as a flipboard sequence. An example workflow would\nbe to create a .glb containing one geometry for each frame of a complex\nanimation that can't be represented as TRS, skinning, or morph targets. The\nsequence function generates a new animation, playing back each mesh matching\nthe given pattern, at a specific framerate. Displaying a sequence of textures\nis also supported, but note that texture memory usage may be quite high and\nso this workflow is not a replacement for video playback.\n\t".trim()).argument("<input>",ge).argument("<output>",fe).option("--name <name>","Name of new animation",{validator:o.program.STRING,default:""}).option("--pattern <pattern>","Pattern for node names (case-insensitive glob)",{validator:o.program.STRING,required:!0}).option("--fps <fps>","FPS (frames / second)",{validator:o.program.NUMBER,default:10}).option("--sort <sort>","Order sequence by node name",{validator:o.program.BOOLEAN,default:!0}).action(function(e){var t=e.args,r=e.options,o=e.logger,n=h.default.makeRe(String(r.pattern),{nocase:!0});return P.create(ae,o,t.input,t.output).transform(i.sequence(w({},r,{pattern:n})))}),o.program.option("--vertex-layout <layout>","Vertex layout method",{global:!0,default:n.VertexLayout.INTERLEAVED,validator:[n.VertexLayout.INTERLEAVED,n.VertexLayout.SEPARATE],action:function(e){ae.setVertexLayout(e.options.vertexLayout)}}),o.program.disableGlobalOption("--quiet"),o.program.disableGlobalOption("--no-color"),Object.defineProperty(exports,"program",{enumerable:!0,get:function(){return o.program}}),exports.DRACO_DEFAULTS=k,exports.ETC1S_DEFAULTS=Y,exports.Filter=H,exports.MESHOPT_DEFAULTS=F,exports.Mode=Z,exports.Session=P,exports.UASTC_DEFAULTS=$,exports.draco=I,exports.formatBytes=z,exports.formatHeader=U,exports.formatLong=R,exports.formatParagraph=q,exports.getTextureChannels=_,exports.getTextureSlots=A,exports.ktxfix=B,exports.merge=D,exports.meshopt=G,exports.mockCommandExistsSync=function(e){exports.commandExistsSync=e},exports.mockSpawnSync=function(e){exports.spawnSync=e},exports.programReady=de,exports.toktx=ee,exports.unlit=ie;
//# sourceMappingURL=cli.js.map
