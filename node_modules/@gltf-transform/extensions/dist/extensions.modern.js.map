{"version":3,"file":"extensions.modern.js","sources":["../../../node_modules/tslib/tslib.es6.js","../src/ext-mesh-gpu-instancing/instanced-mesh.ts","../src/constants.ts","../src/ext-mesh-gpu-instancing/mesh-gpu-instancing.ts","../src/ext-meshopt-compression/constants.ts","../src/ext-meshopt-compression/encoder.ts","../src/ext-meshopt-compression/meshopt-compression.ts","../src/ext-meshopt-compression/decoder.ts","../src/ext-texture-webp/texture-webp.ts","../src/khr-draco-mesh-compression/decoder.ts","../src/khr-draco-mesh-compression/encoder.ts","../src/khr-draco-mesh-compression/draco-mesh-compression.ts","../src/khr-lights-punctual/light.ts","../src/khr-lights-punctual/lights-punctual.ts","../src/khr-materials-clearcoat/clearcoat.ts","../src/khr-materials-clearcoat/materials-clearcoat.ts","../src/khr-materials-emissive-strength/emissive-strength.ts","../src/khr-materials-emissive-strength/materials-emissive-strength.ts","../src/khr-materials-ior/ior.ts","../src/khr-materials-ior/materials-ior.ts","../src/khr-materials-pbr-specular-glossiness/pbr-specular-glossiness.ts","../src/khr-materials-pbr-specular-glossiness/materials-pbr-specular-glossiness.ts","../src/khr-materials-sheen/sheen.ts","../src/khr-materials-sheen/materials-sheen.ts","../src/khr-materials-specular/specular.ts","../src/khr-materials-specular/materials-specular.ts","../src/khr-materials-transmission/transmission.ts","../src/khr-materials-transmission/materials-transmission.ts","../src/khr-materials-unlit/unlit.ts","../src/khr-materials-unlit/materials-unlit.ts","../src/khr-materials-variants/mapping.ts","../src/khr-materials-variants/mapping-list.ts","../src/khr-materials-variants/variant.ts","../src/khr-materials-variants/materials-variants.ts","../src/khr-materials-volume/volume.ts","../src/khr-materials-volume/materials-volume.ts","../src/khr-mesh-quantization/mesh-quantization.ts","../src/khr-texture-basisu/texture-basisu.ts","../src/khr-texture-transform/transform.ts","../src/khr-texture-transform/texture-transform.ts","../src/extensions.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Accessor, AttributeLink, COPY_IDENTITY, ExtensionProperty, GraphChildList, PropertyType } from '@gltf-transform/core';\nimport { EXT_MESH_GPU_INSTANCING } from '../constants';\n\n/**\n * # InstancedMesh\n *\n * Defines GPU instances of a {@link Mesh} under one {@link Node}. See {@link MeshGPUInstancing}.\n */\nexport class InstancedMesh extends ExtensionProperty {\n\tpublic readonly propertyType = 'InstancedMesh';\n\tpublic readonly parentTypes = [PropertyType.NODE];\n\tpublic readonly extensionName = EXT_MESH_GPU_INSTANCING;\n\tpublic static EXTENSION_NAME = EXT_MESH_GPU_INSTANCING;\n\n\t@GraphChildList private attributes: AttributeLink[] = [];\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\tsuper.copy(other, resolve);\n\n\t\tthis.clearGraphChildList(this.attributes);\n\t\tother.listSemantics().forEach((semantic) => {\n\t\t\tthis.setAttribute(semantic, resolve(other.getAttribute(semantic)!));\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/** Returns an instance attribute as an {@link Accessor}. */\n\tpublic getAttribute(semantic: string): Accessor | null {\n\t\tconst link = this.attributes.find((link) => link.semantic === semantic);\n\t\treturn link ? link.getChild() : null;\n\t}\n\n\t/**\n\t * Sets an instance attribute to an {@link Accessor}. All attributes must have the same\n\t * instance count.\n\t */\n\tpublic setAttribute(semantic: string, accessor: Accessor | null): this {\n\t\t// Remove previous attribute.\n\t\tconst prevAccessor = this.getAttribute(semantic);\n\t\tif (prevAccessor) this.removeGraphChild(this.attributes, prevAccessor);\n\n\t\t// Stop if deleting the attribute.\n\t\tif (!accessor) return this;\n\n\t\t// Add next attribute.\n\t\tconst link = this.graph.linkAttribute(\n\t\t\tsemantic.toLowerCase(), this, accessor\n\t\t) as AttributeLink;\n\t\tlink.semantic = semantic;\n\t\treturn this.addGraphChild(this.attributes, link);\n\t}\n\n\t/**\n\t * Lists all instance attributes {@link Accessor}s associated with the InstancedMesh. Order\n\t * will be consistent with the order returned by {@link .listSemantics}().\n\t */\n\tpublic listAttributes(): Accessor[] {\n\t\treturn this.attributes.map((link) => link.getChild());\n\t}\n\n\t/**\n\t * Lists all instance attribute semantics associated with the primitive. Order will be\n\t * consistent with the order returned by {@link .listAttributes}().\n\t */\n\tpublic listSemantics(): string[] {\n\t\treturn this.attributes.map((link) => link.semantic);\n\t}\n}\n","export const EXT_MESH_GPU_INSTANCING = 'EXT_mesh_gpu_instancing';\nexport const EXT_MESHOPT_COMPRESSION = 'EXT_meshopt_compression';\nexport const EXT_TEXTURE_WEBP = 'EXT_texture_webp';\nexport const KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';\nexport const KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual';\nexport const KHR_MATERIALS_CLEARCOAT = 'KHR_materials_clearcoat';\nexport const KHR_MATERIALS_EMISSIVE_STRENGTH = 'KHR_materials_emissive_strength';\nexport const KHR_MATERIALS_IOR = 'KHR_materials_ior';\nexport const KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS = 'KHR_materials_pbrSpecularGlossiness';\nexport const KHR_MATERIALS_SHEEN = 'KHR_materials_sheen';\nexport const KHR_MATERIALS_SPECULAR = 'KHR_materials_specular';\nexport const KHR_MATERIALS_TRANSMISSION = 'KHR_materials_transmission';\nexport const KHR_MATERIALS_UNLIT = 'KHR_materials_unlit';\nexport const KHR_MATERIALS_VOLUME = 'KHR_materials_volume';\nexport const KHR_MATERIALS_VARIANTS = 'KHR_materials_variants';\nexport const KHR_MESH_QUANTIZATION = 'KHR_mesh_quantization';\nexport const KHR_TEXTURE_BASISU = 'KHR_texture_basisu';\nexport const KHR_TEXTURE_TRANSFORM = 'KHR_texture_transform';\n","import { Extension, PropertyType, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { EXT_MESH_GPU_INSTANCING } from '../constants';\nimport { InstancedMesh } from './instanced-mesh';\n\nconst NAME = EXT_MESH_GPU_INSTANCING;\n\n// See BufferViewUsage in `writer-context.ts`.\nconst INSTANCE_ATTRIBUTE = 'INSTANCE_ATTRIBUTE';\n\ninterface InstancedMeshDef {\n\tattributes: {\n\t\t[name: string]: number;\n\t};\n}\n\n/**\n * # MeshGPUInstancing\n *\n * [`EXT_mesh_gpu_instancing`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_mesh_gpu_instancing/)\n * prepares mesh data for efficient GPU instancing.\n *\n * [[include:VENDOR_EXTENSIONS_NOTE.md]]\n *\n * GPU instancing allows engines to render many copies of a single mesh at once using a small number\n * of draw calls. Instancing is particularly useful for things like trees, grass, road signs, etc.\n * Keep in mind that predefined batches, as used in this extension, may prevent frustum culling\n * within a batch. Dividing batches into collocated cells may be preferable to using a single large\n * batch.\n *\n * > _**NOTICE:** While this extension stores mesh data optimized for GPU instancing, it\n * > is important to note that (1) GPU instancing and other optimizations are possible — and\n * > encouraged — even without this extension, and (2) other common meanings of the term\n * > \"instancing\" exist, distinct from this extension. See\n * > [Appendix: Motivation and Purpose](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_mesh_gpu_instancing#appendix-motivation-and-purpose)\n * > of the `EXT_mesh_gpu_instancing` specification._\n *\n * Properties:\n * - {@link InstancedMesh}\n *\n * ### Example\n *\n * The `MeshGPUInstancing` class provides a single {@link ExtensionProperty} type, `InstancedMesh`,\n * which may be attached to any {@link Node} instance. For example:\n *\n * ```typescript\n * import { MeshGPUInstancing } from '@gltf-transform/extensions';\n *\n * // Create standard mesh, node, and scene hierarchy.\n * // ...\n *\n * // Assign positions for each instance.\n * const batchPositions = doc.createAccessor('instance_positions')\n * \t.setArray(new Float32Array([\n * \t\t0, 0, 0,\n * \t\t1, 0, 0,\n * \t\t2, 0, 0,\n * \t]))\n * \t.setType(Accessor.Type.VEC3)\n * \t.setBuffer(buffer);\n *\n * // Assign IDs for each instance.\n * const batchIDs = doc.createAccessor('instance_ids')\n * \t.setArray(new Uint8Array([0, 1, 2]))\n * \t.setType(Accessor.Type.SCALAR)\n * \t.setBuffer(buffer);\n *\n * // Create an Extension attached to the Document.\n * const batchExtension = document.createExtension(MeshGPUInstancing)\n * \t.setRequired(true);\n * const batch = batchExtension.createInstancedMesh()\n * \t.setAttribute('TRANSLATION', batchPositions)\n * \t.setAttribute('_ID', batchIDs);\n *\n * node\n * \t.setMesh(mesh)\n * \t.setExtension('EXT_mesh_gpu_instancing', batch);\n * ```\n *\n * Standard instance attributes are `TRANSLATION`, `ROTATION`, and `SCALE`, and support the accessor\n * types allowed by the extension specification. Custom instance attributes are allowed, and should\n * be prefixed with an underscore (`_*`).\n */\nexport class MeshGPUInstancing extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic readonly provideTypes = [PropertyType.NODE];\n\tpublic readonly prewriteTypes = [PropertyType.ACCESSOR];\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic createInstancedMesh(): InstancedMesh {\n\t\treturn new InstancedMesh(this.doc.getGraph(), this);\n\t}\n\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tconst nodeDefs = jsonDoc.json.nodes || [];\n\t\tnodeDefs.forEach((nodeDef, nodeIndex) => {\n\t\t\tif (!nodeDef.extensions || !nodeDef.extensions[NAME]) return;\n\n\t\t\tconst instancedMeshDef = nodeDef.extensions[NAME] as InstancedMeshDef;\n\t\t\tconst instancedMesh = this.createInstancedMesh();\n\n\t\t\tfor (const semantic in instancedMeshDef.attributes) {\n\t\t\t\tinstancedMesh.setAttribute(\n\t\t\t\t\tsemantic,\n\t\t\t\t\tcontext.accessors[instancedMeshDef.attributes[semantic]]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tcontext.nodes[nodeIndex].setExtension(NAME, instancedMesh);\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tpublic prewrite(context: WriterContext): this {\n\t\t// Set usage for instance attribute accessors, so they are stored in separate buffer\n\t\t// views grouped by parent reference.\n\t\tcontext.accessorUsageGroupedByParent.add(INSTANCE_ATTRIBUTE);\n\t\tfor (const prop of this.properties) {\n\t\t\tfor (const attribute of (prop as InstancedMesh).listAttributes()) {\n\t\t\t\tcontext.addAccessorToUsageGroup(attribute, INSTANCE_ATTRIBUTE);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.doc.getRoot()\n\t\t\t.listNodes()\n\t\t\t.forEach((node) => {\n\t\t\t\tconst instancedMesh = node.getExtension<InstancedMesh>(NAME);\n\t\t\t\tif (instancedMesh) {\n\t\t\t\t\tconst nodeIndex = context.nodeIndexMap.get(node)!;\n\t\t\t\t\tconst nodeDef = jsonDoc.json.nodes![nodeIndex];\n\n\t\t\t\t\tconst instancedMeshDef = {attributes: {}} as InstancedMeshDef;\n\n\t\t\t\t\tinstancedMesh.listSemantics()\n\t\t\t\t\t\t.forEach((semantic) => {\n\t\t\t\t\t\t\tconst attribute = instancedMesh.getAttribute(semantic)!;\n\t\t\t\t\t\t\tinstancedMeshDef.attributes[semantic] =\n\t\t\t\t\t\t\t\tcontext.accessorIndexMap.get(attribute)!;\n\t\t\t\t\t\t});\n\n\t\t\t\t\tnodeDef.extensions = nodeDef.extensions || {};\n\t\t\t\t\tnodeDef.extensions[NAME] = instancedMeshDef;\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { GLTF, TypedArray } from '@gltf-transform/core';\n\nexport enum EncoderMethod {\n\tQUANTIZE = 'quantize',\n\tFILTER = 'filter',\n}\n\nexport interface MeshoptBufferExtension {\n\tfallback?: boolean;\n}\n\nexport enum MeshoptMode {\n\tATTRIBUTES = 'ATTRIBUTES',\n\tTRIANGLES = 'TRIANGLES',\n\tINDICES = 'INDICES',\n}\n\nexport enum MeshoptFilter {\n\tNONE = 'NONE',\n\tOCTAHEDRAL = 'OCTAHEDRAL',\n\tQUATERNION = 'QUATERNION',\n\tEXPONENTIAL = 'EXPONENTIAL',\n}\n\nexport interface MeshoptBufferViewExtension {\n\tbuffer: number;\n\tbyteOffset: number;\n\tbyteLength: number;\n\tbyteStride: number;\n\tcount: number;\n\tmode: MeshoptMode;\n\tfilter?: MeshoptFilter;\n}\n\n/**\n * When using filters, the accessor definition written to the file will not necessarily have the\n * same properties as the input accessor. For example, octahedral encoding requires int8 or int16\n * output, so float32 input must be ignored.\n */\nexport interface PreparedAccessor {\n\tarray: TypedArray;\n\tbyteStride: number;\n\tnormalized: boolean;\n\tcomponentType: GLTF.AccessorComponentType;\n\tmin?: number[];\n\tmax?: number[];\n}\n","import { PreparedAccessor, MeshoptFilter, MeshoptMode } from './constants';\nimport {\n\tAccessor,\n\tAnimationChannel,\n\tAnimationSampler,\n\tBufferUtils,\n\tDocument,\n\tGLTF,\n\tMathUtils,\n\tPrimitive,\n\tTypedArray,\n\tTypedArrayConstructor,\n\tWriterContext,\n} from '@gltf-transform/core';\nimport type { MeshoptEncoder } from 'meshoptimizer';\n\nconst { BYTE, SHORT, FLOAT } = Accessor.ComponentType;\nconst { normalize, denormalize } = MathUtils;\n\n/** Pre-processes array with required filters or padding. */\nexport function prepareAccessor(\n\taccessor: Accessor,\n\tencoder: typeof MeshoptEncoder,\n\tmode: MeshoptMode,\n\tfilterOptions: { filter: MeshoptFilter; bits?: number }\n): PreparedAccessor {\n\tconst { filter, bits } = filterOptions as { filter: MeshoptFilter; bits: number };\n\tconst result: PreparedAccessor = {\n\t\tarray: accessor.getArray()!,\n\t\tbyteStride: accessor.getElementSize() * accessor.getComponentSize(),\n\t\tcomponentType: accessor.getComponentType(),\n\t\tnormalized: accessor.getNormalized(),\n\t};\n\n\tif (mode !== MeshoptMode.ATTRIBUTES) return result;\n\n\tif (filter !== MeshoptFilter.NONE) {\n\t\tlet array = accessor.getNormalized() ? denormalizeArray(accessor) : new Float32Array(result.array);\n\n\t\tswitch (filter) {\n\t\t\tcase MeshoptFilter.EXPONENTIAL: // → K single-precision floating point values.\n\t\t\t\tresult.byteStride = accessor.getElementSize() * 4;\n\t\t\t\tresult.componentType = FLOAT;\n\t\t\t\tresult.normalized = false;\n\t\t\t\tresult.array = encoder.encodeFilterExp(array, accessor.getCount(), result.byteStride, bits);\n\t\t\t\tbreak;\n\n\t\t\tcase MeshoptFilter.OCTAHEDRAL: // → four 8- or 16-bit normalized values.\n\t\t\t\tresult.byteStride = bits > 8 ? 8 : 4;\n\t\t\t\tresult.componentType = bits > 8 ? SHORT : BYTE;\n\t\t\t\tresult.normalized = true;\n\t\t\t\tarray = accessor.getElementSize() === 3 ? padNormals(array) : array;\n\t\t\t\tresult.array = encoder.encodeFilterOct(array, accessor.getCount(), result.byteStride, bits);\n\t\t\t\tbreak;\n\n\t\t\tcase MeshoptFilter.QUATERNION: // → four 16-bit normalized values.\n\t\t\t\tresult.byteStride = 8;\n\t\t\t\tresult.componentType = SHORT;\n\t\t\t\tresult.normalized = true;\n\t\t\t\tresult.array = encoder.encodeFilterQuat(array, accessor.getCount(), result.byteStride, bits);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid filter.');\n\t\t}\n\n\t\tresult.min = accessor.getMin([]);\n\t\tresult.max = accessor.getMax([]);\n\t\tif (accessor.getNormalized()) {\n\t\t\tresult.min = result.min.map((v) => denormalize(v, accessor.getComponentType()));\n\t\t\tresult.max = result.max.map((v) => denormalize(v, accessor.getComponentType()));\n\t\t}\n\t\tif (result.normalized) {\n\t\t\tresult.min = result.min.map((v) => normalize(v, result.componentType));\n\t\t\tresult.max = result.max.map((v) => normalize(v, result.componentType));\n\t\t}\n\t} else if (result.byteStride % 4) {\n\t\tresult.array = padArrayElements(result.array, accessor.getElementSize());\n\t\tresult.byteStride = result.array.byteLength / accessor.getCount();\n\t}\n\n\treturn result;\n}\n\nfunction denormalizeArray(attribute: Accessor): Float32Array {\n\tconst componentType = attribute.getComponentType();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = new Float32Array(srcArray.length);\n\tfor (let i = 0; i < srcArray.length; i++) {\n\t\tdstArray[i] = denormalize(srcArray[i], componentType);\n\t}\n\treturn dstArray;\n}\n\n/** Pads array to 4 byte alignment, required for Meshopt ATTRIBUTE buffer views. */\nexport function padArrayElements<T extends TypedArray>(srcArray: T, elementSize: number): T {\n\tconst byteStride = BufferUtils.padNumber(srcArray.BYTES_PER_ELEMENT * elementSize);\n\tconst elementStride = byteStride / srcArray.BYTES_PER_ELEMENT;\n\tconst elementCount = srcArray.length / elementSize;\n\n\tconst dstArray = new (srcArray.constructor as TypedArrayConstructor)(elementCount * elementStride) as T;\n\n\tfor (let i = 0; i * elementSize < srcArray.length; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[i * elementStride + j] = srcArray[i * elementSize + j];\n\t\t}\n\t}\n\n\treturn dstArray;\n}\n\n/** Pad normals with a .w component for octahedral encoding. */\nfunction padNormals(srcArray: Float32Array): Float32Array {\n\tconst dstArray = new Float32Array((srcArray.length * 4) / 3);\n\tfor (let i = 0, il = srcArray.length / 3; i < il; i++) {\n\t\tdstArray[i * 4] = srcArray[i * 3];\n\t\tdstArray[i * 4 + 1] = srcArray[i * 3 + 1];\n\t\tdstArray[i * 4 + 2] = srcArray[i * 3 + 2];\n\t}\n\treturn dstArray;\n}\n\nexport function getMeshoptMode(accessor: Accessor, usage: string): MeshoptMode {\n\tif (usage === WriterContext.BufferViewUsage.ELEMENT_ARRAY_BUFFER) {\n\t\tconst isTriangles = accessor.listParents().some((parent) => {\n\t\t\treturn parent instanceof Primitive && parent.getMode() === Primitive.Mode.TRIANGLES;\n\t\t});\n\t\treturn isTriangles ? MeshoptMode.TRIANGLES : MeshoptMode.INDICES;\n\t}\n\n\treturn MeshoptMode.ATTRIBUTES;\n}\n\nexport function getMeshoptFilter(accessor: Accessor, doc: Document): { filter: MeshoptFilter; bits?: number } {\n\tconst semantics = doc\n\t\t.getGraph()\n\t\t.listParentLinks(accessor)\n\t\t.map((link) => link.getName())\n\t\t.filter((name) => name !== 'accessor');\n\n\tfor (const semantic of semantics) {\n\t\t// Indices.\n\t\tif (semantic === 'indices') return { filter: MeshoptFilter.NONE };\n\n\t\t// Attributes.\n\t\t//\n\t\t// NOTES:\n\t\t// - Vertex attributes should be filtered IFF they are _not_ quantized in\n\t\t//   'packages/cli/src/transforms/meshopt.ts'.\n\t\t// - POSITION and TEXCOORD_0 could use exponential filtering, but this produces broken\n\t\t//   output in some cases (e.g. Matilda.glb), for unknown reasons. gltfpack uses manual\n\t\t//   quantization for these attributes.\n\t\tif (semantic === 'POSITION') return { filter: MeshoptFilter.NONE };\n\t\tif (semantic === 'TEXCOORD_0') return { filter: MeshoptFilter.NONE };\n\t\tif (semantic === 'NORMAL') return { filter: MeshoptFilter.OCTAHEDRAL, bits: 8 };\n\t\tif (semantic === 'TANGENT') return { filter: MeshoptFilter.OCTAHEDRAL, bits: 8 };\n\t\tif (semantic.startsWith('JOINTS_')) return { filter: MeshoptFilter.NONE };\n\t\tif (semantic.startsWith('WEIGHTS_')) return { filter: MeshoptFilter.NONE };\n\n\t\t// Animation.\n\t\tif (semantic === 'output') {\n\t\t\tconst targetPath = getTargetPath(accessor);\n\t\t\tif (targetPath === 'rotation') return { filter: MeshoptFilter.QUATERNION, bits: 16 };\n\t\t\tif (targetPath === 'translation') return { filter: MeshoptFilter.EXPONENTIAL, bits: 12 };\n\t\t\tif (targetPath === 'scale') return { filter: MeshoptFilter.EXPONENTIAL, bits: 12 };\n\t\t\treturn { filter: MeshoptFilter.NONE };\n\t\t}\n\t\tif (semantic === 'input') return { filter: MeshoptFilter.EXPONENTIAL, bits: 12 };\n\t\tif (semantic === 'inverseBindMatrices') return { filter: MeshoptFilter.NONE };\n\t}\n\n\treturn { filter: MeshoptFilter.NONE };\n}\n\nexport function getTargetPath(accessor: Accessor): GLTF.AnimationChannelTargetPath | null {\n\tfor (const sampler of accessor.listParents()) {\n\t\tif (!(sampler instanceof AnimationSampler)) continue;\n\t\tfor (const channel of sampler.listParents()) {\n\t\t\tif (!(channel instanceof AnimationChannel)) continue;\n\t\t\treturn channel.getTargetPath();\n\t\t}\n\t}\n\treturn null;\n}\n","import { Accessor, Buffer, BufferUtils, Extension, GLB_BUFFER, GLTF, PropertyType, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { EncoderMethod, MeshoptBufferViewExtension, MeshoptFilter } from './constants';\nimport { EXT_MESHOPT_COMPRESSION } from '../constants';\nimport { getMeshoptFilter, getMeshoptMode, getTargetPath, prepareAccessor } from './encoder';\nimport { isFallbackBuffer } from './decoder';\nimport type { MeshoptEncoder, MeshoptDecoder } from 'meshoptimizer';\n\nconst NAME = EXT_MESHOPT_COMPRESSION;\n\ninterface EncoderOptions {\n\tmethod?: EncoderMethod\n}\n\nconst DEFAULT_ENCODER_OPTIONS: Required<EncoderOptions> = {\n\tmethod: EncoderMethod.QUANTIZE\n};\n\ntype MeshoptBufferView = {extensions: {[NAME]: MeshoptBufferViewExtension}};\ntype EncodedBufferView = GLTF.IBufferView & MeshoptBufferView;\n\n/**\n * # MeshoptCompression\n *\n * [`EXT_meshopt_compression`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Vendor/EXT_meshopt_compression/)\n * provides compression and fast decoding for geometry, morph targets, and animations.\n *\n * [[include:VENDOR_EXTENSIONS_NOTE.md]]\n *\n * Meshopt compression (based on the [meshoptimizer](https://github.com/zeux/meshoptimizer)\n * library) offers a lightweight decoder with very fast runtime decompression, and is\n * appropriate for models of any size. Meshopt can reduce the transmission sizes of geometry,\n * morph targets, animation, and other numeric data stored in buffer views. When textures are\n * large, other complementary compression methods should be used as well.\n *\n * For the full benefits of meshopt compression, **apply gzip, brotli, or another lossless\n * compression method** to the resulting .glb, .gltf, or .bin files. Meshopt specifically\n * pre-optimizes assets for this purpose — without this secondary compression, the size\n * reduction is considerably less.\n *\n * Be aware that decompression happens before uploading to the GPU. While Meshopt decoding is\n * considerably faster than Draco decoding, neither compression method will improve runtime\n * performance directly. To improve framerate, you'll need to simplify the geometry by reducing\n * vertex count or draw calls — not just compress it. Finally, be aware that Meshopt compression is\n * lossy: repeatedly compressing and decompressing a model in a pipeline will lose precision, so\n * compression should generally be the last stage of an art workflow, and uncompressed original\n * files should be kept.\n *\n * The meshoptimizer library ([github](https://github.com/zeux/meshoptimizer/tree/master/js),\n * [npm](https://www.npmjs.com/package/meshoptimizer)) is a required dependency for reading or\n * writing files, and must be provided by the application. Compression may alternatively be applied\n * with the [gltfpack](https://github.com/zeux/meshoptimizer/tree/master/gltf) tool.\n *\n * ### Example\n *\n * ```typescript\n * import { NodeIO } from '@gltf-transform/core';\n * import { MeshoptCompression } from '@gltf-transform/extensions';\n * import { MeshoptDecoder } from 'meshoptimizer';\n *\n * await MeshoptDecoder.ready;\n *\n * const io = new NodeIO()\n *\t.registerExtensions([MeshoptCompression])\n *\t.registerDependencies({\n *\t\t'meshopt.decoder': MeshoptDecoder,\n *\t\t'meshopt.encoder': MeshoptEncoder,\n *\t});\n *\n * // Read and decode.\n * const document = io.read('compressed.glb');\n *\n * // Write and encode. (Medium, -c)\n * await document.transform(reorder(), quantize());\n * document.createExtension(MeshoptCompression)\n * \t.setRequired(true)\n * \t.setEncoderOptions({ method: MeshoptCompression.EncoderMethod.QUANTIZE });\n * io.write('compressed-medium.glb', document);\n *\n * // Write and encode. (High, -cc)\n * await document.transform(\n * \treorder(),\n * \tquantize({pattern: /^(POSITION|TEXCOORD|JOINTS|WEIGHTS)(_\\d+)?$/}),\n * );\n * document.createExtension(MeshoptCompression)\n * \t.setRequired(true)\n * \t.setEncoderOptions({ method: MeshoptCompression.EncoderMethod.FILTER });\n * io.write('compressed-high.glb', document);\n * ```\n */\nexport class MeshoptCompression extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic readonly prereadTypes = [PropertyType.BUFFER, PropertyType.PRIMITIVE];\n\tpublic readonly prewriteTypes = [PropertyType.BUFFER, PropertyType.ACCESSOR];\n\tpublic readonly readDependencies = ['meshopt.decoder'];\n\tpublic readonly writeDependencies = ['meshopt.encoder'];\n\n\tpublic static readonly EXTENSION_NAME = NAME;\n\tpublic static readonly EncoderMethod = EncoderMethod;\n\n\tprivate _decoder: typeof MeshoptDecoder | null = null;\n\tprivate _decoderFallbackBufferMap = new Map<Buffer, Buffer>();\n\tprivate _encoder: typeof MeshoptEncoder | null = null;\n\tprivate _encoderOptions: Required<EncoderOptions> = DEFAULT_ENCODER_OPTIONS;\n\tprivate _encoderFallbackBuffer: Buffer | null = null;\n\tprivate _encoderBufferViews: {[key: string]: EncodedBufferView} = {};\n\tprivate _encoderBufferViewData: {[key: string]: ArrayBuffer[]} = {};\n\tprivate _encoderBufferViewAccessors: {[key: string]: GLTF.IAccessor[]} = {};\n\n\tpublic install(key: string, dependency: unknown): this {\n\t\tif (key === 'meshopt.decoder') {\n\t\t\tthis._decoder = dependency as typeof MeshoptDecoder;\n\t\t}\n\t\tif (key === 'meshopt.encoder') {\n\t\t\tthis._encoder = dependency as typeof MeshoptEncoder;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Configures Meshopt options for quality/compression tuning. The two methods rely on different\n\t * pre-processing before compression, and should be compared on the basis of (a) quality/loss\n\t * and (b) final asset size after _also_ applying a lossless compression such as gzip or brotli.\n\t *\n\t * - QUANTIZE: Default. Pre-process with {@link quantize quantize()} (lossy to specified\n\t * \tprecision) before applying lossless Meshopt compression. Offers a considerable compression\n\t * \tratio with or without further supercompression. Equivalent to `gltfpack -c`.\n\t * - FILTER: Pre-process with lossy filters to improve compression, before applying lossless\n\t *\tMeshopt compression. While output may initially be larger than with the QUANTIZE method,\n\t *\tthis method will benefit more from supercompression (e.g. gzip or brotli). Equivalent to\n\t * \t`gltfpack -cc`.\n\t *\n\t * Output with the FILTER method will generally be smaller after supercompression (e.g. gzip or\n\t * brotli) is applied, but may be larger than QUANTIZE output without it. Decoding is very fast\n\t * with both methods.\n\t *\n\t * Example:\n\t *\n\t * ```ts\n\t * doc.createExtension(MeshoptCompression)\n\t * \t.setRequired(true)\n\t * \t.setEncoderOptions({\n\t * \t\tmethod: MeshoptCompression.EncoderMethod.QUANTIZE\n\t * \t});\n\t * ```\n\t */\n\tpublic setEncoderOptions(options: EncoderOptions): this {\n\t\tthis._encoderOptions = {...DEFAULT_ENCODER_OPTIONS, ...options};\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Decoding.\n\t */\n\n\t/** @internal Checks preconditions, decodes buffer views, and creates decoded primitives. */\n\tpublic preread(context: ReaderContext, propertyType: PropertyType): this {\n\t\tif (!this._decoder) {\n\t\t\tif (!this.isRequired()) return this;\n\t\t\tthrow new Error(`[${NAME}] Please install extension dependency, \"meshopt.decoder\".`);\n\t\t}\n\t\tif (!this._decoder.supported) {\n\t\t\tif (!this.isRequired()) return this;\n\t\t\tthrow new Error(`[${NAME}]: Missing WASM support.`);\n\t\t}\n\n\t\tif (propertyType === PropertyType.BUFFER) {\n\t\t\tthis._prereadBuffers(context);\n\t\t} else if (propertyType === PropertyType.PRIMITIVE) {\n\t\t\tthis._prereadPrimitives(context);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/** @internal Decode buffer views. */\n\tprivate _prereadBuffers(context: ReaderContext): void {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tconst viewDefs = jsonDoc.json.bufferViews || [];\n\t\tviewDefs.forEach((viewDef, index) => {\n\t\t\tif (!viewDef.extensions || !viewDef.extensions[NAME]) return;\n\n\t\t\tconst meshoptDef = viewDef.extensions[NAME] as MeshoptBufferViewExtension;\n\t\t\tconst byteOffset = meshoptDef.byteOffset || 0;\n\t\t\tconst byteLength = meshoptDef.byteLength || 0;\n\t\t\tconst count = meshoptDef.count;\n\t\t\tconst stride = meshoptDef.byteStride;\n\t\t\tconst result = new Uint8Array(new ArrayBuffer(count * stride));\n\n\t\t\tconst bufferDef = jsonDoc.json.buffers![viewDef.buffer];\n\t\t\tconst resource = bufferDef.uri\n\t\t\t\t? jsonDoc.resources[bufferDef.uri]\n\t\t\t\t: jsonDoc.resources[GLB_BUFFER];\n\t\t\tconst source = new Uint8Array(resource, byteOffset, byteLength);\n\n\t\t\tthis._decoder!.decodeGltfBuffer(\n\t\t\t\tresult, count, stride, source, meshoptDef.mode, meshoptDef.filter\n\t\t\t);\n\n\t\t\tcontext.bufferViews[index] = result;\n\t\t});\n\t}\n\n\t/**\n\t * Mark fallback buffers and replacements.\n\t *\n\t * Note: Alignment with primitives is arbitrary; this just needs to happen\n\t * after Buffers have been parsed.\n\t * @internal\n\t */\n\tprivate _prereadPrimitives(context: ReaderContext): void {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst viewDefs = jsonDoc.json.bufferViews || [];\n\n\t\t//\n\t\tviewDefs.forEach((viewDef) => {\n\t\t\tif (!viewDef.extensions || !viewDef.extensions[NAME]) return;\n\n\t\t\tconst meshoptDef = viewDef.extensions[NAME] as MeshoptBufferViewExtension;\n\n\t\t\tconst buffer = context.buffers[meshoptDef.buffer];\n\t\t\tconst fallbackBuffer = context.buffers[viewDef.buffer];\n\t\t\tconst fallbackBufferDef = jsonDoc.json.buffers![viewDef.buffer];\n\t\t\tif (isFallbackBuffer(fallbackBufferDef)) {\n\t\t\t\tthis._decoderFallbackBufferMap.set(fallbackBuffer, buffer);\n\t\t\t}\n\t\t});\n\t}\n\n\t/** @hidden Removes Fallback buffers, if extension is required. */\n\tpublic read(_context: ReaderContext): this {\n\t\tif (!this.isRequired()) return this;\n\n\t\t// Replace fallback buffers.\n\t\tfor (const [fallbackBuffer, buffer] of this._decoderFallbackBufferMap) {\n\t\t\tfor (const parent of fallbackBuffer.listParents()) {\n\t\t\t\tif (parent instanceof Accessor) {\n\t\t\t\t\tparent.swap(fallbackBuffer, buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfallbackBuffer.dispose();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Encoding.\n\t */\n\n\t/** @internal Claims accessors that can be compressed and writes compressed buffer views. */\n\tpublic prewrite(context: WriterContext, propertyType: PropertyType): this {\n\t\tif (propertyType === PropertyType.ACCESSOR) {\n\t\t\tthis._prewriteAccessors(context);\n\t\t} else if (propertyType === PropertyType.BUFFER) {\n\t\t\tthis._prewriteBuffers(context);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/** @internal Claims accessors that can be compressed. */\n\tprivate _prewriteAccessors(context: WriterContext): void {\n\t\tconst json = context.jsonDoc.json;\n\t\tconst encoder = this._encoder!;\n\t\tconst options = this._encoderOptions;\n\n\t\tconst fallbackBuffer = this.doc.createBuffer(); // Disposed on write.\n\t\tconst fallbackBufferIndex = this.doc.getRoot().listBuffers().indexOf(fallbackBuffer);\n\n\t\tthis._encoderFallbackBuffer = fallbackBuffer;\n\t\tthis._encoderBufferViews = {};\n\t\tthis._encoderBufferViewData = {};\n\t\tthis._encoderBufferViewAccessors = {};\n\n\t\tfor (const accessor of this.doc.getRoot().listAccessors()) {\n\t\t\t// See: https://github.com/donmccurdy/glTF-Transform/pull/323#issuecomment-898791251\n\t\t\t// Example: https://skfb.ly/6qAD8\n\t\t\tif (getTargetPath(accessor) === 'weights') continue;\n\n\t\t\tconst usage = context.getAccessorUsage(accessor);\n\t\t\tconst mode = getMeshoptMode(accessor, usage);\n\t\t\tconst filter = options.method === EncoderMethod.FILTER\n\t\t\t\t? getMeshoptFilter(accessor, this.doc)\n\t\t\t\t: {filter: MeshoptFilter.NONE};\n\t\t\tconst preparedAccessor = prepareAccessor(accessor, encoder, mode, filter);\n\t\t\tconst {array, byteStride} = preparedAccessor;\n\n\t\t\tconst buffer = accessor.getBuffer();\n\t\t\tif (!buffer) throw new Error(`${NAME}: Missing buffer for accessor.`);\n\t\t\tconst bufferIndex = this.doc.getRoot().listBuffers().indexOf(buffer);\n\n\t\t\t// Buffer view grouping key.\n\t\t\tconst key = [usage, mode, filter.filter, byteStride, bufferIndex].join(':');\n\n\t\t\tlet bufferView = this._encoderBufferViews[key];\n\t\t\tlet bufferViewData = this._encoderBufferViewData[key];\n\t\t\tlet bufferViewAccessors = this._encoderBufferViewAccessors[key];\n\n\t\t\t// Write new buffer view, if needed.\n\t\t\tif (!bufferView || !bufferViewData) {\n\t\t\t\tbufferViewAccessors = this._encoderBufferViewAccessors[key] = [];\n\t\t\t\tbufferViewData = this._encoderBufferViewData[key] = [];\n\t\t\t\tbufferView = this._encoderBufferViews[key] = {\n\t\t\t\t\tbuffer: fallbackBufferIndex,\n\t\t\t\t\ttarget: WriterContext.USAGE_TO_TARGET[usage],\n\t\t\t\t\tbyteOffset: 0,\n\t\t\t\t\tbyteLength: 0,\n\t\t\t\t\tbyteStride: usage === WriterContext.BufferViewUsage.ARRAY_BUFFER\n\t\t\t\t\t\t? byteStride\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\textensions: {\n\t\t\t\t\t\t[NAME]: {\n\t\t\t\t\t\t\tbuffer: bufferIndex,\n\t\t\t\t\t\t\tbyteOffset: 0,\n\t\t\t\t\t\t\tbyteLength: 0,\n\t\t\t\t\t\t\tmode: mode,\n\t\t\t\t\t\t\tfilter: filter.filter !== MeshoptFilter.NONE\n\t\t\t\t\t\t\t\t? filter.filter\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\tbyteStride: byteStride,\n\t\t\t\t\t\t\tcount: 0\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Write accessor.\n\t\t\tconst accessorDef = context.createAccessorDef(accessor);\n\t\t\taccessorDef.componentType = preparedAccessor.componentType;\n\t\t\taccessorDef.normalized = preparedAccessor.normalized;\n\t\t\taccessorDef.byteOffset = bufferView.byteLength;\n\t\t\tif (accessorDef.min && preparedAccessor.min) accessorDef.min = preparedAccessor.min;\n\t\t\tif (accessorDef.max && preparedAccessor.max) accessorDef.max = preparedAccessor.max;\n\t\t\tcontext.accessorIndexMap.set(accessor, json.accessors!.length);\n\t\t\tjson.accessors!.push(accessorDef);\n\t\t\tbufferViewAccessors.push(accessorDef);\n\n\t\t\t// Update buffer view.\n\t\t\tbufferViewData.push(array.slice().buffer);\n\t\t\tbufferView.byteLength += array.byteLength;\n\t\t\tbufferView.extensions.EXT_meshopt_compression.count += accessor.getCount();\n\t\t}\n\t}\n\n\t/** @internal Writes compressed buffer views. */\n\tprivate _prewriteBuffers(context: WriterContext): void {\n\t\tconst encoder = this._encoder!;\n\n\t\tfor (const key in this._encoderBufferViews) {\n\t\t\tconst bufferView = this._encoderBufferViews[key];\n\t\t\tconst bufferViewData = this._encoderBufferViewData[key];\n\t\t\tconst buffer = this.doc.getRoot().listBuffers()[bufferView.extensions[NAME].buffer];\n\t\t\tconst otherBufferViews = context.otherBufferViews.get(buffer) || [];\n\n\t\t\tconst {count, byteStride, mode} = bufferView.extensions[NAME];\n\t\t\tconst srcArray = new Uint8Array(BufferUtils.concat(bufferViewData));\n\t\t\tconst dstArray = encoder.encodeGltfBuffer(srcArray, count, byteStride, mode);\n\t\t\tconst compressedData = BufferUtils.pad(dstArray.slice().buffer);\n\n\t\t\tbufferView.extensions[NAME].byteLength = dstArray.byteLength;\n\n\t\t\tbufferViewData.length = 0;\n\t\t\tbufferViewData.push(compressedData);\n\t\t\totherBufferViews.push(compressedData);\n\t\t\tcontext.otherBufferViews.set(buffer, otherBufferViews);\n\t\t}\n\t}\n\n\t/** @hidden Puts encoded data into glTF output. */\n\tpublic write(context: WriterContext): this {\n\t\tlet fallbackBufferByteOffset = 0;\n\n\t\t// Write final encoded buffer view properties.\n\t\tfor (const key in this._encoderBufferViews) {\n\t\t\tconst bufferView = this._encoderBufferViews[key];\n\t\t\tconst bufferViewData = this._encoderBufferViewData[key][0];\n\t\t\tconst bufferViewIndex = context.otherBufferViewsIndexMap.get(bufferViewData)!;\n\n\t\t\tconst bufferViewAccessors = this._encoderBufferViewAccessors[key];\n\t\t\tfor (const accessorDef of bufferViewAccessors) {\n\t\t\t\taccessorDef.bufferView = bufferViewIndex;\n\t\t\t}\n\n\t\t\tconst finalBufferViewDef = context.jsonDoc.json.bufferViews![bufferViewIndex];\n\t\t\tconst compressedByteOffset = finalBufferViewDef.byteOffset || 0;\n\n\t\t\tObject.assign(finalBufferViewDef, bufferView);\n\t\t\tfinalBufferViewDef.byteOffset = fallbackBufferByteOffset;\n\t\t\tconst bufferViewExtensionDef = finalBufferViewDef.extensions![NAME] as\n\t\t\t\tMeshoptBufferViewExtension;\n\t\t\tbufferViewExtensionDef.byteOffset = compressedByteOffset;\n\n\t\t\tfallbackBufferByteOffset += BufferUtils.padNumber(bufferView.byteLength);\n\t\t}\n\n\t\t// Write final fallback buffer.\n\t\tconst fallbackBuffer = this._encoderFallbackBuffer!;\n\t\tconst fallbackBufferIndex = context.bufferIndexMap.get(fallbackBuffer)!;\n\t\tconst fallbackBufferDef = context.jsonDoc.json.buffers![fallbackBufferIndex];\n\t\tfallbackBufferDef.byteLength = fallbackBufferByteOffset;\n\t\tfallbackBufferDef.extensions = {[NAME]: {fallback: true}};\n\t\tfallbackBuffer.dispose();\n\n\t\treturn this;\n\t}\n}\n","import { EXT_MESHOPT_COMPRESSION } from '../constants';\nimport { GLTF } from '@gltf-transform/core';\nimport { MeshoptBufferExtension } from './constants';\n\n/**\n * Returns true for a fallback buffer, else false.\n *\n *   - All references to the fallback buffer must come from bufferViews that\n *     have a EXT_meshopt_compression extension specified.\n *   - No references to the fallback buffer may come from\n *     EXT_meshopt_compression extension JSON.\n */\nexport function isFallbackBuffer(bufferDef: GLTF.IBuffer): boolean {\n\tif (!bufferDef.extensions || !bufferDef.extensions[EXT_MESHOPT_COMPRESSION]) return false;\n\tconst fallbackDef = bufferDef.extensions[EXT_MESHOPT_COMPRESSION] as MeshoptBufferExtension;\n\treturn !!fallbackDef.fallback;\n}\n","import {\n\tBufferUtils,\n\tExtension,\n\tImageUtils,\n\tImageUtilsFormat,\n\tPropertyType,\n\tReaderContext,\n\tWriterContext,\n\tvec2,\n} from '@gltf-transform/core';\nimport { EXT_TEXTURE_WEBP } from '../constants';\n\nconst NAME = EXT_TEXTURE_WEBP;\n\nclass WEBPImageUtils implements ImageUtilsFormat {\n\tmatch(buffer: ArrayBuffer): boolean {\n\t\tconst array = new Uint8Array(buffer);\n\t\treturn array.length >= 12 && array[8] === 87 && array[9] === 69 && array[10] === 66 && array[11] === 80;\n\t}\n\tgetSize(buffer: ArrayBuffer): vec2 | null {\n\t\t// Reference: http://tools.ietf.org/html/rfc6386\n\t\tconst RIFF = BufferUtils.decodeText(buffer.slice(0, 4));\n\t\tconst WEBP = BufferUtils.decodeText(buffer.slice(8, 12));\n\t\tif (RIFF !== 'RIFF' || WEBP !== 'WEBP') return null;\n\n\t\tconst view = new DataView(buffer);\n\n\t\t// Reference: https://wiki.tcl-lang.org/page/Reading+WEBP+image+dimensions\n\t\tlet offset = 12;\n\t\twhile (offset < buffer.byteLength) {\n\t\t\tconst chunkId = BufferUtils.decodeText(buffer.slice(offset, offset + 4));\n\t\t\tconst chunkByteLength = view.getUint32(offset + 4, true);\n\t\t\tif (chunkId === 'VP8 ') {\n\t\t\t\tconst width = view.getInt16(offset + 14, true) & 0x3fff;\n\t\t\t\tconst height = view.getInt16(offset + 16, true) & 0x3fff;\n\t\t\t\treturn [width, height];\n\t\t\t} else if (chunkId === 'VP8L') {\n\t\t\t\tconst b0 = view.getUint8(offset + 9);\n\t\t\t\tconst b1 = view.getUint8(offset + 10);\n\t\t\t\tconst b2 = view.getUint8(offset + 11);\n\t\t\t\tconst b3 = view.getUint8(offset + 12);\n\t\t\t\tconst width = 1 + (((b1 & 0x3f) << 8) | b0);\n\t\t\t\tconst height = 1 + (((b3 & 0xf) << 10) | (b2 << 2) | ((b1 & 0xc0) >> 6));\n\t\t\t\treturn [width, height];\n\t\t\t}\n\t\t\toffset += 8 + chunkByteLength + (chunkByteLength % 2);\n\t\t}\n\n\t\treturn null;\n\t}\n\tgetChannels(_buffer: ArrayBuffer): number {\n\t\treturn 4;\n\t}\n}\n\n/**\n * # TextureWebP\n *\n * [`EXT_texture_webp`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_texture_webp/)\n * enables WebP images for any material texture.\n *\n * [[include:VENDOR_EXTENSIONS_NOTE.md]]\n *\n * WebP typically provides the minimal transmission\n * size, but [requires browser support](https://caniuse.com/webp). Like PNG and JPEG, a WebP image is\n * *fully decompressed* when uploaded to the GPU, which increases upload time and GPU memory cost.\n * For seamless uploads and minimal GPU memory cost, it is necessary to use a GPU texture format\n * like Basis Universal, with the `KHR_texture_basisu` extension.\n *\n * Defining no {@link ExtensionProperty} types, this {@link Extension} is simply attached to the\n * {@link Document}, and affects the entire Document by allowing use of the `image/webp` MIME type\n * and passing WebP image data to the {@link Texture.setImage} method. Without the Extension, the\n * same MIME types and image data would yield an invalid glTF document, under the stricter core glTF\n * specification.\n *\n * Properties:\n * - N/A\n *\n * ### Example\n *\n * ```typescript\n * import { TextureWebP } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const webpExtension = document.createExtension(TextureWebP)\n * \t.setRequired(true);\n * document.createTexture('MyWebPTexture')\n * \t.setMimeType('image/webp')\n * \t.setImage(fs.readFileSync('my-texture.webp'));\n * ```\n *\n * WebP conversion is not done automatically when adding the extension as shown above — you must\n * convert the image data first, then pass the `.webp` payload to {@link Texture.setImage}.\n *\n * When the `EXT_texture_webp` extension is added to a file by glTF-Transform, the extension should\n * always be required. This tool does not support writing assets that \"fall back\" to optional PNG or\n * JPEG image data.\n */\nexport class TextureWebP extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic readonly prereadTypes = [PropertyType.TEXTURE];\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic static register(): void {\n\t\tImageUtils.registerFormat('image/webp', new WEBPImageUtils());\n\t}\n\n\tpublic preread(context: ReaderContext): this {\n\t\tconst textureDefs = context.jsonDoc.json.textures || [];\n\t\ttextureDefs.forEach((textureDef) => {\n\t\t\tif (textureDef.extensions && textureDef.extensions[NAME]) {\n\t\t\t\ttextureDef.source = (textureDef.extensions[NAME] as { source: number }).source;\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tpublic read(context: ReaderContext): this {\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.doc\n\t\t\t.getRoot()\n\t\t\t.listTextures()\n\t\t\t.forEach((texture) => {\n\t\t\t\tif (texture.getMimeType() === 'image/webp') {\n\t\t\t\t\tconst imageIndex = context.imageIndexMap.get(texture);\n\t\t\t\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\t\t\t\ttextureDefs.forEach((textureDef) => {\n\t\t\t\t\t\tif (textureDef.source === imageIndex) {\n\t\t\t\t\t\t\ttextureDef.extensions = textureDef.extensions || {};\n\t\t\t\t\t\t\ttextureDef.extensions[NAME] = { source: textureDef.source };\n\t\t\t\t\t\t\tdelete textureDef.source;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { Accessor, GLTF, TypedArray, TypedArrayConstructor } from '@gltf-transform/core';\nimport { KHR_DRACO_MESH_COMPRESSION } from '../constants';\nimport type { Attribute, DataType, Decoder, DecoderModule, Mesh } from 'draco3dgltf';\n\nconst NAME = KHR_DRACO_MESH_COMPRESSION;\n\nexport let decoderModule: DecoderModule;\n\n// Initialized when decoder module loads.\nlet COMPONENT_ARRAY: {[key: number]: TypedArrayConstructor};\nlet DATA_TYPE: {[key: number]: DataType};\n\nexport function decodeGeometry(decoder: Decoder, data: Int8Array): Mesh {\n\tconst buffer = new decoderModule.DecoderBuffer();\n\ttry {\n\t\tbuffer.Init(data, data.length);\n\n\t\tconst geometryType = decoder.GetEncodedGeometryType(buffer);\n\t\tif (geometryType !== decoderModule.TRIANGULAR_MESH) {\n\t\t\tthrow new Error(`[${NAME}] Unknown geometry type.`);\n\t\t}\n\n\t\tconst dracoMesh = new decoderModule.Mesh();\n\t\tconst status = decoder.DecodeBufferToMesh(buffer, dracoMesh);\n\n\t\tif (!status.ok() || dracoMesh.ptr === 0) {\n\t\t\tthrow new Error(`[${NAME}] Decoding failure.`);\n\t\t}\n\n\t\treturn dracoMesh;\n\t} finally {\n\t\tdecoderModule.destroy(buffer);\n\t}\n}\n\nexport function decodeIndex(decoder: Decoder, mesh: Mesh): Uint16Array | Uint32Array {\n\tconst numFaces = mesh.num_faces();\n\tconst numIndices = numFaces * 3;\n\n\tlet ptr: number;\n\tlet indices: Uint16Array | Uint32Array;\n\n\tif (mesh.num_points() <= 65534) {\n\t\tconst byteLength = numIndices * Uint16Array.BYTES_PER_ELEMENT;\n\t\tptr = decoderModule._malloc(byteLength);\n\t\tdecoder.GetTrianglesUInt16Array(mesh, byteLength, ptr);\n\t\tindices = new Uint16Array(decoderModule.HEAPU16.buffer, ptr, numIndices).slice();\n\t} else {\n\t\tconst byteLength = numIndices * Uint32Array.BYTES_PER_ELEMENT;\n\t\tptr = decoderModule._malloc(byteLength);\n\t\tdecoder.GetTrianglesUInt32Array(mesh, byteLength, ptr);\n\t\tindices = new Uint32Array(decoderModule.HEAPU32.buffer, ptr, numIndices).slice();\n\t}\n\n\tdecoderModule._free(ptr);\n\n\treturn indices;\n}\n\nexport function decodeAttribute(\n\t\tdecoder: Decoder,\n\t\tmesh: Mesh,\n\t\tattribute: Attribute,\n\t\taccessorDef: GLTF.IAccessor): TypedArray {\n\n\tconst dataType = DATA_TYPE[accessorDef.componentType];\n\tconst ArrayCtor = COMPONENT_ARRAY[accessorDef.componentType];\n\tconst numComponents = attribute.num_components();\n\tconst numPoints = mesh.num_points();\n\tconst numValues = numPoints * numComponents;\n\tconst byteLength: number = numValues * ArrayCtor.BYTES_PER_ELEMENT;\n\n\tconst ptr = decoderModule._malloc(byteLength);\n\tdecoder.GetAttributeDataArrayForAllPoints(mesh, attribute, dataType, byteLength, ptr);\n\tconst array: TypedArray = new ArrayCtor(decoderModule.HEAPF32.buffer, ptr, numValues).slice();\n\tdecoderModule._free(ptr);\n\n\treturn array;\n}\n\nexport function initDecoderModule (_decoderModule: DecoderModule): void {\n\tdecoderModule = _decoderModule;\n\n\tCOMPONENT_ARRAY = {\n\t\t[Accessor.ComponentType.FLOAT]: Float32Array,\n\t\t[Accessor.ComponentType.UNSIGNED_INT]: Uint32Array,\n\t\t[Accessor.ComponentType.UNSIGNED_SHORT]: Uint16Array,\n\t\t[Accessor.ComponentType.UNSIGNED_BYTE]: Uint8Array,\n\t\t[Accessor.ComponentType.SHORT]: Int16Array,\n\t\t[Accessor.ComponentType.BYTE]: Int8Array,\n\t};\n\n\tDATA_TYPE = {\n\t\t[Accessor.ComponentType.FLOAT]: decoderModule.DT_FLOAT32,\n\t\t[Accessor.ComponentType.UNSIGNED_INT]: decoderModule.DT_UINT32,\n\t\t[Accessor.ComponentType.UNSIGNED_SHORT]: decoderModule.DT_UINT16,\n\t\t[Accessor.ComponentType.UNSIGNED_BYTE]: decoderModule.DT_UINT8,\n\t\t[Accessor.ComponentType.SHORT]: decoderModule.DT_INT16,\n\t\t[Accessor.ComponentType.BYTE]: decoderModule.DT_INT8,\n\t};\n}\n\n","import { Accessor, bbox, GLTF, Primitive, TypedArray } from '@gltf-transform/core';\nimport type { EncoderModule, Mesh, MeshBuilder } from 'draco3dgltf';\n\nexport let encoderModule: EncoderModule;\n\nexport enum EncoderMethod {\n\tEDGEBREAKER = 1,\n\tSEQUENTIAL = 0,\n}\n\nenum AttributeEnum {\n\tPOSITION = 'POSITION',\n\tNORMAL = 'NORMAL',\n\tCOLOR = 'COLOR',\n\tTEX_COORD = 'TEX_COORD',\n\tGENERIC = 'GENERIC',\n}\n\nconst DEFAULT_QUANTIZATION_BITS = {\n\t[AttributeEnum.POSITION]: 14,\n\t[AttributeEnum.NORMAL]: 10,\n\t[AttributeEnum.COLOR]: 8,\n\t[AttributeEnum.TEX_COORD]: 12,\n\t[AttributeEnum.GENERIC]: 12,\n};\n\nexport interface EncodedPrimitive {\n\tnumVertices: number;\n\tnumIndices: number;\n\tdata: Uint8Array;\n\tattributeIDs: {[key: string]: number};\n}\n\nexport interface EncoderOptions {\n\tdecodeSpeed?: number;\n\tencodeSpeed?: number;\n\tmethod?: EncoderMethod;\n\tquantizationBits?: {[key: string]: number};\n\tquantizationVolume?: 'mesh' | 'scene' | bbox;\n}\n\nconst DEFAULT_ENCODER_OPTIONS: EncoderOptions = {\n\tdecodeSpeed: 5,\n\tencodeSpeed: 5,\n\tmethod: EncoderMethod.EDGEBREAKER,\n\tquantizationBits: DEFAULT_QUANTIZATION_BITS,\n\tquantizationVolume: 'mesh',\n};\n\nexport function initEncoderModule (_encoderModule: EncoderModule): void {\n\tencoderModule = _encoderModule;\n}\n\n/**\n * References:\n * - https://github.com/mrdoob/three.js/blob/dev/examples/js/exporters/DRACOExporter.js\n * - https://github.com/CesiumGS/gltf-pipeline/blob/master/lib/compressDracoMeshes.js\n */\nexport function encodeGeometry (prim: Primitive, _options: EncoderOptions = DEFAULT_ENCODER_OPTIONS): EncodedPrimitive {\n\tconst options = {...DEFAULT_ENCODER_OPTIONS, ..._options} as Required<EncoderOptions>;\n\toptions.quantizationBits = {...DEFAULT_QUANTIZATION_BITS, ..._options.quantizationBits};\n\n\tconst encoder = new encoderModule.Encoder();\n\tconst builder = new encoderModule.MeshBuilder();\n\tconst mesh = new encoderModule.Mesh();\n\n\tconst attributeIDs: {[key: string]: number} = {};\n\tconst dracoBuffer = new encoderModule.DracoInt8Array();\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tconst attributeEnum = getAttributeEnum(semantic);\n\t\tconst attributeID: number = addAttribute(\n\t\t\tbuilder,\n\t\t\tattribute.getComponentType(),\n\t\t\tmesh,\n\t\t\tencoderModule[attributeEnum],\n\t\t\tattribute.getCount(),\n\t\t\tattribute.getElementSize(),\n\t\t\tattribute.getArray()!\n\t\t);\n\n\t\tif (attributeID === -1) throw new Error(`Error compressing \"${semantic}\" attribute.`);\n\n\t\tattributeIDs[semantic] = attributeID;\n\t\tif (options.quantizationVolume === 'mesh' || semantic !== 'POSITION') {\n\t\t\tencoder.SetAttributeQuantization(\n\t\t\t\tencoderModule[attributeEnum],\n\t\t\t\toptions.quantizationBits[attributeEnum]\n\t\t\t);\n\t\t} else if (typeof options.quantizationVolume === 'object') {\n\t\t\tconst {quantizationVolume} = options;\n\t\t\tconst range = Math.max(\n\t\t\t\tquantizationVolume.max[0] - quantizationVolume.min[0],\n\t\t\t\tquantizationVolume.max[1] - quantizationVolume.min[1],\n\t\t\t\tquantizationVolume.max[2] - quantizationVolume.min[2],\n\t\t\t);\n\t\t\tencoder.SetAttributeExplicitQuantization(\n\t\t\t\tencoderModule[attributeEnum],\n\t\t\t\toptions.quantizationBits[attributeEnum],\n\t\t\t\tattribute.getElementSize(),\n\t\t\t\tquantizationVolume.min,\n\t\t\t\trange\n\t\t\t);\n\t\t} else {\n\t\t\tthrow new Error('Invalid quantization volume state.');\n\t\t}\n\t}\n\n\tconst indices = prim.getIndices();\n\tif (!indices) throw new Error('Primitive must have indices.');\n\n\tbuilder.AddFacesToMesh(\n\t\tmesh,\n\t\tindices.getCount() / 3,\n\t\tindices.getArray() as unknown as Uint32Array\n\t);\n\n\tencoder.SetSpeedOptions(options.encodeSpeed, options.decodeSpeed);\n\tencoder.SetTrackEncodedProperties(true);\n\n\t// Preserve vertex order for primitives with morph targets.\n\tif (options.method === EncoderMethod.SEQUENTIAL || prim.listTargets().length > 0) {\n\t\tencoder.SetEncodingMethod(encoderModule.MESH_SEQUENTIAL_ENCODING);\n\t} else {\n\t\tencoder.SetEncodingMethod(encoderModule.MESH_EDGEBREAKER_ENCODING);\n\t}\n\n\tconst byteLength = encoder.EncodeMeshToDracoBuffer(mesh, dracoBuffer);\n\tif (byteLength <= 0) throw new Error('Error applying Draco compression.');\n\n\tconst data = new Uint8Array(byteLength);\n\tfor (let i = 0; i < byteLength; ++i) {\n\t\tdata[i] = dracoBuffer.GetValue(i);\n\t}\n\n\tconst prevNumVertices = prim.getAttribute('POSITION')!.getCount();\n\tconst numVertices = encoder.GetNumberOfEncodedPoints();\n\tconst numIndices = encoder.GetNumberOfEncodedFaces() * 3;\n\n\tif (prim.listTargets().length > 0 && numVertices !== prevNumVertices) {\n\t\tthrow new Error(''\n\t\t\t+ 'Compression reduced vertex count unexpectedly, corrupting morph targets.'\n\t\t\t+ ' Applying the \"weld\" function before compression may resolve the issue.'\n\t\t);\n\t}\n\n\tencoderModule.destroy(dracoBuffer);\n\tencoderModule.destroy(mesh);\n\tencoderModule.destroy(builder);\n\tencoderModule.destroy(encoder);\n\n\treturn {numVertices, numIndices, data, attributeIDs};\n}\n\nfunction getAttributeEnum(semantic: string): AttributeEnum {\n\tif (semantic === 'POSITION') {\n\t\treturn AttributeEnum.POSITION;\n\t} else if (semantic === 'NORMAL') {\n\t\treturn AttributeEnum.NORMAL;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\treturn AttributeEnum.COLOR;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\treturn AttributeEnum.TEX_COORD;\n\t}\n\treturn AttributeEnum.GENERIC;\n}\n\nfunction addAttribute(\n\tbuilder: MeshBuilder,\n\tcomponentType: GLTF.AccessorComponentType,\n\tmesh: Mesh,\n\tattribute: number,\n\tcount: number,\n\titemSize: number,\n\tarray: TypedArray\n): number {\n\tswitch (componentType) {\n\t\tcase Accessor.ComponentType.UNSIGNED_BYTE:\n\t\t\treturn builder.AddUInt8Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.BYTE:\n\t\t\treturn builder.AddInt8Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.UNSIGNED_SHORT:\n\t\t\treturn builder.AddUInt16Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.SHORT:\n\t\t\treturn builder.AddInt16Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.UNSIGNED_INT:\n\t\t\treturn builder.AddUInt32Attribute(mesh, attribute, count, itemSize, array);\n\t\tcase Accessor.ComponentType.FLOAT:\n\t\t\treturn builder.AddFloatAttribute(mesh, attribute, count, itemSize, array);\n\t\tdefault:\n\t\t\tthrow new Error(`Unexpected component type, \"${componentType}\".`);\n\t}\n}\n","import { Accessor, bbox, bounds, Document, Extension, GLB_BUFFER, Primitive, PropertyType, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { decodeAttribute, decodeGeometry, decodeIndex, initDecoderModule } from './decoder';\nimport { EncodedPrimitive, encodeGeometry, EncoderMethod, EncoderOptions, initEncoderModule } from './encoder';\nimport { KHR_DRACO_MESH_COMPRESSION } from '../constants';\nimport type { Decoder, DecoderModule, EncoderModule, Mesh } from 'draco3dgltf';\n\nconst NAME = KHR_DRACO_MESH_COMPRESSION;\n\ninterface DracoPrimitiveExtension {\n\tbufferView: number;\n\tattributes: {\n\t\t[name: string]: number;\n\t};\n}\n\ninterface DracoWriterContext {\n\tprimitiveHashMap: Map<Primitive, string>;\n\tprimitiveEncodingMap: Map<string, EncodedPrimitive>;\n}\n\n/**\n * # DracoMeshCompression\n *\n * [`KHR_draco_mesh_compression`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_draco_mesh_compression/)\n * provides advanced compression for mesh geometry.\n *\n * For models where geometry is a significant factor (>1 MB), Draco can reduce filesize by ~95%\n * in many cases. When animation or textures are large, other complementary compression methods\n * should be used as well. For geometry <1MB, the size of the WASM decoder library may outweigh\n * size savings.\n *\n * Be aware that decompression happens before uploading to the GPU — this will add some latency to\n * the parsing process, and means that compressing geometry with  Draco does _not_ affect runtime\n * performance. To improve framerate, you'll need to simplify the geometry by reducing vertex count\n * or draw calls — not just compress it. Finally, be aware that Draco compression is lossy:\n * repeatedly compressing and decompressing a model in a pipeline will lose precision, so\n * compression should generally be the last stage of an art workflow, and uncompressed original\n * files should be kept.\n *\n * A decoder or encoder from the `draco3dgltf` npm module for Node.js (or\n * [elsewhere for web](https://stackoverflow.com/a/66978236/1314762)) is required for reading and writing,\n * and must be provided by the application.\n *\n * ### Encoding options\n *\n * Two compression methods are available: 'edgebreaker' and 'sequential'. The\n * edgebreaker method will give higher compression in general, but changes the\n * order of the model's vertices. To preserve index order, use sequential\n * compression. When a mesh uses morph targets, or a high decoding speed is\n * selected, sequential compression will automatically be chosen.\n *\n * Both speed options affect the encoder's choice of algorithms. For example, a\n * requirement for fast decoding may prevent the encoder from using the best\n * compression methods even if the encoding speed is set to 0. In general, the\n * faster of the two options limits the choice of features that can be used by the\n * encoder. Setting --decodeSpeed to be faster than the --encodeSpeed may allow\n * the encoder to choose the optimal method out of the available features for the\n * given --decodeSpeed.\n *\n * ### Example\n *\n * ```typescript\n * import { NodeIO } from '@gltf-transform/core';\n * import { DracoMeshCompression } from '@gltf-transform/extensions';\n *\n * import draco3d from 'draco3dgltf';\n *\n * // ...\n *\n * const io = new NodeIO()\n *\t.registerExtensions([DracoMeshCompression])\n *\t.registerDependencies({\n *\t\t'draco3d.decoder': await draco3d.createDecoderModule(), // Optional.\n *\t\t'draco3d.encoder': await draco3d.createEncoderModule(), // Optional.\n *\t});\n *\n * // Read and decode.\n * const doc = io.read('compressed.glb');\n *\n * // Write and encode.\n * doc.createExtension(DracoMeshCompression)\n * \t.setRequired(true)\n * \t.setEncoderOptions({\n * \t\tmethod: DracoMeshCompression.EncoderMethod.EDGEBREAKER,\n * \t\tencodeSpeed: 5,\n * \t\tdecodeSpeed: 5,\n * \t});\n * io.write('compressed.glb', doc);\n * ```\n */\nexport class DracoMeshCompression extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic readonly prereadTypes = [PropertyType.PRIMITIVE];\n\tpublic readonly prewriteTypes = [PropertyType.ACCESSOR];\n\tpublic readonly readDependencies = ['draco3d.decoder'];\n\tpublic readonly writeDependencies = ['draco3d.encoder'];\n\n\tpublic static readonly EXTENSION_NAME = NAME;\n\tpublic static readonly EncoderMethod = EncoderMethod;\n\n\tprivate _decoderModule: DecoderModule | null = null;\n\tprivate _encoderModule: EncoderModule | null = null;\n\tprivate _encoderOptions: EncoderOptions = {};\n\n\tpublic install(key: string, dependency: unknown): this {\n\t\tif (key === 'draco3d.decoder') {\n\t\t\tthis._decoderModule = dependency as DecoderModule;\n\t\t\tinitDecoderModule(this._decoderModule);\n\t\t}\n\t\tif (key === 'draco3d.encoder') {\n\t\t\tthis._encoderModule = dependency as EncoderModule;\n\t\t\tinitEncoderModule(this._encoderModule);\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic setEncoderOptions(options: EncoderOptions): this {\n\t\tthis._encoderOptions = options;\n\t\treturn this;\n\t}\n\n\tpublic preread(context: ReaderContext): this {\n\t\tif (!this._decoderModule) {\n\t\t\tthrow new Error(`[${NAME}] Please install extension dependency, \"draco3d.decoder\".`);\n\t\t}\n\n\t\tconst logger = this.doc.getLogger();\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst dracoMeshes: Map<number, [Decoder, Mesh]> = new Map();\n\n\t\ttry {\n\n\t\tconst meshDefs = jsonDoc.json.meshes || [];\n\t\tfor (const meshDef of meshDefs) {\n\t\t\tfor (const primDef of meshDef.primitives) {\n\t\t\t\tif (!primDef.extensions || !primDef.extensions[NAME]) continue;\n\n\t\t\t\tconst dracoDef = primDef.extensions[NAME] as DracoPrimitiveExtension;\n\t\t\t\tlet [decoder, dracoMesh] = dracoMeshes.get(dracoDef.bufferView) || [];\n\n\t\t\t\tif (!dracoMesh || !decoder) {\n\t\t\t\t\tconst bufferViewDef = jsonDoc.json.bufferViews![dracoDef.bufferView];\n\t\t\t\t\tconst bufferDef = jsonDoc.json.buffers![bufferViewDef.buffer];\n\t\t\t\t\tconst resource = bufferDef.uri\n\t\t\t\t\t\t? jsonDoc.resources[bufferDef.uri]\n\t\t\t\t\t\t: jsonDoc.resources[GLB_BUFFER];\n\n\t\t\t\t\tconst byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\t\t\tconst byteLength = bufferViewDef.byteLength;\n\t\t\t\t\tconst compressedData = new Int8Array(resource, byteOffset, byteLength);\n\n\t\t\t\t\tdecoder = new this._decoderModule.Decoder();\n\t\t\t\t\tdracoMesh = decodeGeometry(decoder, compressedData);\n\t\t\t\t\tdracoMeshes.set(dracoDef.bufferView, [decoder, dracoMesh]);\n\t\t\t\t\tlogger.debug(`[${NAME}] Decompressed ${compressedData.byteLength} bytes.`);\n\t\t\t\t}\n\n\t\t\t\t// Attributes.\n\t\t\t\tfor (const semantic in primDef.attributes) {\n\t\t\t\t\tconst accessorDef =\n\t\t\t\t\t\tcontext.jsonDoc.json.accessors![primDef.attributes[semantic]];\n\t\t\t\t\tconst dracoAttribute =\n\t\t\t\t\t\tdecoder.GetAttributeByUniqueId(dracoMesh, dracoDef.attributes[semantic]);\n\t\t\t\t\tconst attributeArray =\n\t\t\t\t\t\tdecodeAttribute(decoder, dracoMesh, dracoAttribute, accessorDef);\n\t\t\t\t\tcontext.accessors[primDef.attributes[semantic]].setArray(attributeArray);\n\t\t\t\t}\n\n\t\t\t\t// Indices. Optional, see https://github.com/google/draco/issues/720.\n\t\t\t\tif (primDef.indices !== undefined) {\n\t\t\t\t\tcontext.accessors[primDef.indices].setArray(decodeIndex(decoder, dracoMesh));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t} finally {\n\t\t\tfor (const [decoder, dracoMesh] of Array.from(dracoMeshes.values())) {\n\t\t\t\tthis._decoderModule.destroy(decoder);\n\t\t\t\tthis._decoderModule.destroy(dracoMesh);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tpublic read(_context: ReaderContext): this {\n\t\treturn this;\n\t}\n\n\tpublic prewrite(context: WriterContext, _propertyType: PropertyType): this {\n\t\tif (!this._encoderModule) {\n\t\t\tthrow new Error(`[${NAME}] Please install extension dependency, \"draco3d.encoder\".`);\n\t\t}\n\n\t\tconst logger = this.doc.getLogger();\n\t\tlogger.debug(`[${NAME}] Compression options: ${JSON.stringify(this._encoderOptions)}`);\n\n\t\tconst primitiveHashMap = listDracoPrimitives(this.doc);\n\t\tconst primitiveEncodingMap = new Map<string, EncodedPrimitive>();\n\n\t\tlet quantizationVolume: bbox | 'mesh' = 'mesh';\n\t\tif (this._encoderOptions.quantizationVolume === 'scene') {\n\t\t\tif (this.doc.getRoot().listScenes().length !== 1) {\n\t\t\t\tlogger.warn(`[${NAME}]: quantizationVolume=scene requires exactly 1 scene.`);\n\t\t\t} else {\n\t\t\t\tquantizationVolume = bounds(this.doc.getRoot().listScenes().pop()!);\n\t\t\t}\n\t\t}\n\n\t\tfor (const prim of Array.from(primitiveHashMap.keys())) {\n\t\t\tconst primHash = primitiveHashMap.get(prim);\n\t\t\tif (!primHash) throw new Error('Unexpected primitive.');\n\n\t\t\t// Reuse an existing EncodedPrimitive, if possible.\n\t\t\tif (primitiveEncodingMap.has(primHash)) {\n\t\t\t\tprimitiveEncodingMap.set(primHash, primitiveEncodingMap.get(primHash)!);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst indices = prim.getIndices()!; // Condition for listDracoPrimitives().\n\t\t\tconst accessorDefs = context.jsonDoc.json.accessors!;\n\n\t\t\t// Create a new EncodedPrimitive.\n\t\t\tconst encodedPrim = encodeGeometry(prim, {...this._encoderOptions, quantizationVolume});\n\t\t\tprimitiveEncodingMap.set(primHash, encodedPrim);\n\n\t\t\t// Create indices definition, update count.\n\t\t\tconst indicesDef = context.createAccessorDef(indices);\n\t\t\tindicesDef.count = encodedPrim.numIndices;\n\t\t\tcontext.accessorIndexMap.set(indices, accessorDefs.length);\n\t\t\taccessorDefs.push(indicesDef);\n\n\t\t\t// Create attribute definitions, update count.\n\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\tconst attributeDef = context.createAccessorDef(attribute);\n\t\t\t\tattributeDef.count = encodedPrim.numVertices;\n\t\t\t\tcontext.accessorIndexMap.set(attribute, accessorDefs.length);\n\t\t\t\taccessorDefs.push(attributeDef);\n\t\t\t}\n\n\t\t\t// Map compressed buffer view to a Buffer.\n\t\t\tconst buffer = prim.getAttribute('POSITION')!.getBuffer()\n\t\t\t\t|| this.doc.getRoot().listBuffers()[0];\n\t\t\tif (!context.otherBufferViews.has(buffer)) context.otherBufferViews.set(buffer, []);\n\t\t\tcontext.otherBufferViews.get(buffer)!.push(encodedPrim.data);\n\t\t}\n\n\t\tlogger.debug(`[${NAME}] Compressed ${primitiveHashMap.size} primitives.`);\n\n\t\tcontext.extensionData[NAME] = {\n\t\t\tprimitiveHashMap,\n\t\t\tprimitiveEncodingMap\n\t\t} as DracoWriterContext;\n\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst dracoContext: DracoWriterContext = context.extensionData[NAME] as DracoWriterContext;\n\n\t\tfor (const mesh of this.doc.getRoot().listMeshes()) {\n\t\t\tconst meshDef = context.jsonDoc.json.meshes![context.meshIndexMap.get(mesh)!];\n\t\t\tfor (let i = 0; i < mesh.listPrimitives().length; i++) {\n\t\t\t\tconst prim = mesh.listPrimitives()[i];\n\t\t\t\tconst primDef = meshDef.primitives[i];\n\n\t\t\t\tconst primHash = dracoContext.primitiveHashMap.get(prim);\n\t\t\t\tif (!primHash) continue;\n\n\t\t\t\tconst encodedPrim = dracoContext.primitiveEncodingMap.get(primHash)!;\n\t\t\t\tprimDef.extensions = primDef.extensions || {};\n\t\t\t\tprimDef.extensions[NAME] = {\n\t\t\t\t\tbufferView: context.otherBufferViewsIndexMap.get(encodedPrim.data),\n\t\t\t\t\tattributes: encodedPrim.attributeIDs,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Omit the extension if nothing was compressed.\n\t\tif (!dracoContext.primitiveHashMap.size) {\n\t\t\tconst json = context.jsonDoc.json;\n\t\t\tjson.extensionsUsed = (json.extensionsUsed || [])\n\t\t\t\t.filter((name) => name !== NAME);\n\t\t\tjson.extensionsRequired = (json.extensionsRequired || [])\n\t\t\t\t.filter((name) => name !== NAME);\n\t\t}\n\n\t\treturn this;\n\t}\n}\n\n/**\n * Returns a list of Primitives compatible with Draco compression. If any required preconditions\n * fail, and would break assumptions required for compression, this function will throw an error.\n */\nfunction listDracoPrimitives(doc: Document): Map<Primitive, string> {\n\tconst logger = doc.getLogger();\n\tconst included = new Set<Primitive>();\n\tconst excluded = new Set<Primitive>();\n\n\t// Support compressing only indexed, mode=TRIANGLES primitives.\n\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tif (!prim.getIndices()) {\n\t\t\t\texcluded.add(prim);\n\t\t\t\tlogger.warn(`[${NAME}] Skipping Draco compression on non-indexed primitive.`);\n\t\t\t} else if (prim.getMode() !== Primitive.Mode.TRIANGLES) {\n\t\t\t\texcluded.add(prim);\n\t\t\t\tlogger.warn(`[${NAME}] Skipping Draco compression on non-TRIANGLES primitive.`);\n\t\t\t} else {\n\t\t\t\tincluded.add(prim);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Create an Accessor->index mapping.\n\tconst accessors = doc.getRoot().listAccessors();\n\tconst accessorIndices = new Map<Accessor, number>();\n\tfor (let i = 0; i < accessors.length; i++) accessorIndices.set(accessors[i], i);\n\n\t// For each compressed Primitive, create a hash key identifying its accessors. Map each\n\t// compressed Primitive and Accessor to this hash key.\n\tconst includedAccessors = new Map<Accessor, string>();\n\tconst includedHashKeys = new Set<string>();\n\tconst primToHashKey = new Map<Primitive, string>();\n\tfor (const prim of Array.from(included)) {\n\t\tlet hashKey = createHashKey(prim, accessorIndices);\n\n\t\t// If accessors of an identical primitive have already been checked, we're done.\n\t\tif (includedHashKeys.has(hashKey)) {\n\t\t\tprimToHashKey.set(prim, hashKey);\n\t\t\tcontinue;\n\t\t}\n\n\n\n\t\t// If any accessors are already in use, but the same hashKey hasn't been written, then we\n\t\t// need to create copies of these accessors for the current encoded primitive. We can't\n\t\t// reuse the same compressed accessor for two encoded primitives, because Draco might\n\t\t// change the vertex count, change the vertex order, or cause other conflicts.\n\t\tif (includedAccessors.has(prim.getIndices()!)) {\n\t\t\tconst indices = prim.getIndices()!; // Condition for 'included' list.\n\t\t\tconst dstIndices = indices.clone();\n\t\t\taccessorIndices.set(dstIndices, doc.getRoot().listAccessors().length - 1);\n\t\t\tprim.swap(indices, dstIndices);\n\t\t}\n\t\tfor (const attribute of prim.listAttributes()) {\n\t\t\tif (includedAccessors.has(attribute)) {\n\t\t\t\tconst dstAttribute = attribute.clone();\n\t\t\t\taccessorIndices.set(dstAttribute, doc.getRoot().listAccessors().length - 1);\n\t\t\t\tprim.swap(attribute, dstAttribute);\n\t\t\t}\n\t\t}\n\n\t\t// With conflicts resolved, compute the hash key again.\n\t\thashKey = createHashKey(prim, accessorIndices);\n\n\t\t// Commit the primitive and its accessors to the hash key.\n\t\tincludedHashKeys.add(hashKey);\n\t\tprimToHashKey.set(prim, hashKey);\n\t\tincludedAccessors.set(prim.getIndices()!, hashKey);\n\t\tfor (const attribute of prim.listAttributes()) {\n\t\t\tincludedAccessors.set(attribute, hashKey);\n\t\t}\n\t}\n\n\t// For each compressed Accessor, ensure that it isn't used except by a Primitive.\n\tfor (const accessor of Array.from(includedAccessors.keys())) {\n\t\tconst parentTypes = new Set(accessor.listParents().map((prop) => prop.propertyType));\n\t\tif (parentTypes.size !== 2 || !parentTypes.has('Primitive') || !parentTypes.has('Root')) {\n\t\t\tthrow new Error(\n\t\t\t\t`[${NAME}] Compressed accessors must only be used as indices or vertex attributes.`\n\t\t\t);\n\t\t}\n\t}\n\n\t// For each compressed Primitive, ensure that Accessors are mapped only to the same hash key.\n\tfor (const prim of Array.from(included)) {\n\t\tconst hashKey = primToHashKey.get(prim);\n\t\tconst indices = prim.getIndices()!; // Condition for 'included' list.\n\t\tif (includedAccessors.get(indices) !== hashKey\n\t\t\t\t|| prim.listAttributes().some((attr) => includedAccessors.get(attr) !== hashKey)) {\n\t\t\tthrow new Error(`[${NAME}] Draco primitives must share all, or no, accessors.`);\n\t\t}\n\t}\n\n\t// For each excluded Primitive, ensure that no Accessors are compressed.\n\tfor (const prim of Array.from(excluded)) {\n\t\tconst indices = prim.getIndices()!; // Condition for 'included' list.\n\t\tif (includedAccessors.has(indices)\n\t\t\t\t|| prim.listAttributes().some((attr) => includedAccessors.has(attr))) {\n\t\t\tthrow new Error(\n\t\t\t\t`[${NAME}] Accessor cannot be shared by compressed and uncompressed primitives.`\n\t\t\t);\n\t\t}\n\t}\n\n\treturn primToHashKey;\n}\n\nfunction createHashKey(prim: Primitive, indexMap: Map<Accessor, number>): string {\n\tconst hashElements = [];\n\tconst indices = prim.getIndices()!; // Condition for 'included' list.\n\n\thashElements.push(indexMap.get(indices));\n\tfor (const attribute of prim.listAttributes()) {\n\t\thashElements.push(indexMap.get(attribute));\n\t}\n\n\treturn hashElements.sort().join('|');\n}\n","import { COPY_IDENTITY, ExtensionProperty, PropertyType, vec3 } from '@gltf-transform/core';\nimport { ColorUtils } from '@gltf-transform/core';\nimport { KHR_LIGHTS_PUNCTUAL } from '../constants';\n\ntype PunctualLightType = 'point' | 'spot' | 'directional';\n\n/**\n * # Light\n *\n * Defines a light attached to a {@link Node}. See {@link LightsPunctual}.\n */\nexport class Light extends ExtensionProperty {\n\tpublic readonly propertyType = 'Light';\n\tpublic readonly parentTypes = [PropertyType.NODE];\n\tpublic readonly extensionName = KHR_LIGHTS_PUNCTUAL;\n\tpublic static EXTENSION_NAME = KHR_LIGHTS_PUNCTUAL;\n\n\t/**********************************************************************************************\n\t * CONSTANTS.\n\t */\n\n\tpublic static Type: Record<string, PunctualLightType> = {\n\t\tPOINT: 'point',\n\t\tSPOT: 'spot',\n\t\tDIRECTIONAL: 'directional',\n\t};\n\n\t/**********************************************************************************************\n\t * INSTANCE.\n\t */\n\n\tprivate _color: vec3 = [1, 1, 1];\n\tprivate _intensity = 1;\n\tprivate _type: PunctualLightType = Light.Type.POINT;\n\tprivate _range: number | null = null;\n\n\tprivate _innerConeAngle = 0;\n\tprivate _outerConeAngle = Math.PI / 4;\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\tsuper.copy(other, resolve);\n\n\t\tthis._color = [...other._color] as vec3;\n\t\tthis._intensity = other._intensity;\n\t\tthis._type = other._type;\n\t\tthis._range = other._range;\n\n\t\tthis._innerConeAngle = other._innerConeAngle;\n\t\tthis._outerConeAngle = other._outerConeAngle;\n\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * COLOR.\n\t */\n\n\t/** Components (R, G, B) of light's color in linear space. */\n\tpublic getColor(): vec3 { return this._color; }\n\n\t/** Components (R, G, B) of light's color in linear space. */\n\tpublic setColor(color: vec3): this {\n\t\tthis._color = color;\n\t\treturn this;\n\t}\n\n\t/** Hex light color in sRGB colorspace. */\n\tpublic getColorHex(): number { return ColorUtils.factorToHex(this._color); }\n\n\t/** Hex light color in sRGB colorspace. */\n\tpublic setColorHex(hex: number): this {\n\t\tColorUtils.hexToFactor(hex, this._color);\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * INTENSITY.\n\t */\n\n\t/**\n\t * Brightness of light. Units depend on the type of light: point and spot lights use luminous\n\t * intensity in candela (lm/sr) while directional lights use illuminance in lux (lm/m2).\n\t */\n\tpublic getIntensity(): number { return this._intensity; }\n\n\t/**\n\t * Brightness of light. Units depend on the type of light: point and spot lights use luminous\n\t * intensity in candela (lm/sr) while directional lights use illuminance in lux (lm/m2).\n\t */\n\tpublic setIntensity(intensity: number): this {\n\t\tthis._intensity = intensity;\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * TYPE.\n\t */\n\n\t/** Type. */\n\tpublic getType(): PunctualLightType { return this._type; }\n\n\t/** Type. */\n\tpublic setType(type: PunctualLightType): this {\n\t\tthis._type = type;\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * RANGE.\n\t */\n\n\t/**\n\t * Hint defining a distance cutoff at which the light's intensity may be considered to have\n\t * reached zero. Supported only for point and spot lights. Must be > 0. When undefined, range\n\t * is assumed to be infinite.\n\t */\n\tpublic getRange(): number | null { return this._range; }\n\n\t/**\n\t * Hint defining a distance cutoff at which the light's intensity may be considered to have\n\t * reached zero. Supported only for point and spot lights. Must be > 0. When undefined, range\n\t * is assumed to be infinite.\n\t */\n\tpublic setRange(range: number | null): this {\n\t\tthis._range = range;\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * SPOT LIGHT PROPERTIES\n\t */\n\n\t/**\n\t * Angle, in radians, from centre of spotlight where falloff begins. Must be ≥ 0 and\n\t * < outerConeAngle.\n\t */\n\tpublic getInnerConeAngle(): number { return this._innerConeAngle; }\n\n\t/**\n\t * Angle, in radians, from centre of spotlight where falloff begins. Must be ≥ 0 and\n\t * < outerConeAngle.\n\t */\n\tpublic setInnerConeAngle(innerConeAngle: number): this {\n\t\tthis._innerConeAngle = innerConeAngle;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Angle, in radians, from centre of spotlight where falloff ends. Must be > innerConeAngle and\n\t * ≤ PI / 2.0.\n\t */\n\tpublic getOuterConeAngle(): number { return this._outerConeAngle; }\n\n\t/**\n\t * Angle, in radians, from centre of spotlight where falloff ends. Must be > innerConeAngle and\n\t * ≤ PI / 2.0.\n\t */\n\tpublic setOuterConeAngle(outerConeAngle: number): this {\n\t\tthis._outerConeAngle = outerConeAngle;\n\t\treturn this;\n\t}\n}\n","import { Extension, MathUtils, ReaderContext, WriterContext, vec3 } from '@gltf-transform/core';\nimport { KHR_LIGHTS_PUNCTUAL } from '../constants';\nimport { Light } from './light';\n\nconst NAME = KHR_LIGHTS_PUNCTUAL;\n\ninterface LightsPunctualRootDef {\n\tlights?: LightDef[];\n}\n\ninterface LightsPunctualNodeDef {\n\tlight: number;\n}\n\ninterface LightDef {\n\tname?: string;\n\tcolor?: vec3;\n\tintensity?: number;\n\trange?: number;\n\tinnerConeAngle?: number;\n\touterConeAngle?: number;\n\ttype: 'spot' | 'point' | 'directional'\n}\n\n/**\n * # LightsPunctual\n *\n * [`KHR_lights_punctual`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_lights_punctual/) defines three \"punctual\" light types: directional, point and\n * spot.\n *\n * Punctual lights are parameterized, infinitely small points that emit light in\n * well-defined directions and intensities. Lights are referenced by nodes and inherit the transform\n * of that node.\n *\n * Properties:\n * - {@link Light}\n *\n * ### Example\n *\n * ```typescript\n * import { LightsPunctual, Light, LightType } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const lightsExtension = document.createExtension(LightsPunctual);\n *\n * // Create a Light property.\n * const light = lightsExtension.createLight()\n *\t.setType(LightType.POINT)\n *\t.setIntensity(2.0)\n *\t.setColor([1.0, 0.0, 0.0]);\n *\n * // Attach the property to a Material.\n * node.setExtension('KHR_lights_punctual', light);\n * ```\n */\nexport class LightsPunctual extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic createLight(): Light {\n\t\treturn new Light(this.doc.getGraph(), this);\n\t}\n\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tif (!jsonDoc.json.extensions || !jsonDoc.json.extensions[NAME]) return this;\n\n\t\tconst rootDef = jsonDoc.json.extensions[NAME] as LightsPunctualRootDef;\n\t\tconst lightDefs = rootDef.lights || [] as LightDef[];\n\t\tconst lights = lightDefs.map((lightDef) => {\n\t\t\tconst light = this.createLight()\n\t\t\t\t.setName(lightDef.name || '')\n\t\t\t\t.setType(lightDef.type);\n\n\t\t\tif (lightDef.color !== undefined) light.setColor(lightDef.color);\n\t\t\tif (lightDef.intensity !== undefined) light.setIntensity(lightDef.intensity);\n\t\t\tif (lightDef.range !== undefined) light.setRange(lightDef.range);\n\n\t\t\tif (lightDef.innerConeAngle !== undefined) {\n\t\t\t\tlight.setInnerConeAngle(lightDef.innerConeAngle);\n\t\t\t}\n\t\t\tif (lightDef.outerConeAngle !== undefined) {\n\t\t\t\tlight.setOuterConeAngle(lightDef.outerConeAngle);\n\t\t\t}\n\n\t\t\treturn light;\n\t\t});\n\n\t\tjsonDoc.json.nodes!.forEach((nodeDef, nodeIndex) => {\n\t\t\tif (!nodeDef.extensions || !nodeDef.extensions[NAME]) return;\n\t\t\tconst lightNodeDef = nodeDef.extensions[NAME] as LightsPunctualNodeDef;\n\t\t\tcontext.nodes[nodeIndex].setExtension(NAME, lights[lightNodeDef.light]);\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tif (this.properties.size === 0) return this;\n\n\t\tconst lightDefs = [];\n\t\tconst lightIndexMap = new Map<Light, number>();\n\n\t\tfor (const property of this.properties) {\n\t\t\tconst light = property as Light;\n\t\t\tconst lightDef = {type: light.getType()} as LightDef;\n\n\t\t\tif (!MathUtils.eq(light.getColor(), [1, 1, 1])) lightDef.color = light.getColor();\n\t\t\tif (light.getIntensity() !== 1) lightDef.intensity = light.getIntensity();\n\t\t\tif (light.getRange() != null) lightDef.range = light.getRange()!;\n\n\t\t\tif (light.getName()) lightDef['name'] = light.getName();\n\n\t\t\tif (light.getType() === Light.Type.SPOT) {\n\t\t\t\tlightDef['innerConeAngle'] = light.getInnerConeAngle();\n\t\t\t\tlightDef['outerConeAngle'] = light.getOuterConeAngle();\n\t\t\t}\n\n\t\t\tlightDefs.push(lightDef);\n\t\t\tlightIndexMap.set(light, lightDefs.length - 1);\n\t\t}\n\n\t\tthis.doc.getRoot()\n\t\t\t.listNodes()\n\t\t\t.forEach((node) => {\n\t\t\t\tconst light = node.getExtension<Light>(NAME);\n\t\t\t\tif (light) {\n\t\t\t\t\tconst nodeIndex = context.nodeIndexMap.get(node)!;\n\t\t\t\t\tconst nodeDef = jsonDoc.json.nodes![nodeIndex];\n\t\t\t\t\tnodeDef.extensions = nodeDef.extensions || {};\n\t\t\t\t\tnodeDef.extensions[NAME] = {light: lightIndexMap.get(light)};\n\t\t\t\t}\n\t\t\t});\n\n\t\tjsonDoc.json.extensions = jsonDoc.json.extensions || {};\n\t\tjsonDoc.json.extensions[NAME] = {lights: lightDefs};\n\n\t\treturn this;\n\t}\n}\n","import { COPY_IDENTITY, ExtensionProperty, GraphChild, Link, PropertyType, Texture, TextureChannel, TextureInfo, TextureLink } from '@gltf-transform/core';\nimport { KHR_MATERIALS_CLEARCOAT } from '../constants';\n\nconst { R, G, B } = TextureChannel;\n\n/**\n * # Clearcoat\n *\n * Defines clear coat for a PBR material. See {@link MaterialsClearcoat}.\n */\nexport class Clearcoat extends ExtensionProperty {\n\tpublic readonly propertyType = 'Clearcoat';\n\tpublic readonly parentTypes = [PropertyType.MATERIAL];\n\tpublic readonly extensionName = KHR_MATERIALS_CLEARCOAT;\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_CLEARCOAT;\n\n\tprivate _clearcoatFactor = 0.0;\n\tprivate _clearcoatRoughnessFactor = 0.0;\n\tprivate _clearcoatNormalScale = 1.0;\n\n\t@GraphChild private clearcoatTexture: TextureLink | null = null;\n\t@GraphChild private clearcoatTextureInfo: Link<this, TextureInfo> =\n\t\tthis.graph.link('clearcoatTextureInfo', this, new TextureInfo(this.graph));\n\n\t@GraphChild private clearcoatRoughnessTexture: TextureLink | null = null;\n\t@GraphChild private clearcoatRoughnessTextureInfo: Link<this, TextureInfo> =\n\t\tthis.graph.link('clearcoatRoughnessTextureInfo', this, new TextureInfo(this.graph));\n\n\t@GraphChild private clearcoatNormalTexture: TextureLink | null = null;\n\t@GraphChild private clearcoatNormalTextureInfo: Link<this, TextureInfo> =\n\t\tthis.graph.link('clearcoatNormalTextureInfo', this, new TextureInfo(this.graph));\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\tsuper.copy(other, resolve);\n\n\t\tthis._clearcoatFactor = other._clearcoatFactor;\n\t\tthis._clearcoatRoughnessFactor = other._clearcoatRoughnessFactor;\n\t\tthis._clearcoatNormalScale = other._clearcoatNormalScale;\n\n\t\tthis.setClearcoatTexture(\n\t\t\tother.clearcoatTexture\n\t\t\t\t? resolve(other.clearcoatTexture.getChild())\n\t\t\t\t: null\n\t\t);\n\t\tthis.clearcoatTextureInfo.getChild()\n\t\t\t.copy(resolve(other.clearcoatTextureInfo.getChild()), resolve);\n\n\t\tthis.setClearcoatRoughnessTexture(\n\t\t\tother.clearcoatRoughnessTexture\n\t\t\t\t? resolve(other.clearcoatRoughnessTexture.getChild())\n\t\t\t\t: null\n\t\t);\n\t\tthis.clearcoatRoughnessTextureInfo.getChild()\n\t\t\t.copy(resolve(other.clearcoatRoughnessTextureInfo.getChild()), resolve);\n\n\t\tthis.setClearcoatNormalTexture(\n\t\t\tother.clearcoatNormalTexture\n\t\t\t\t? resolve(other.clearcoatNormalTexture.getChild())\n\t\t\t\t: null\n\t\t);\n\t\tthis.clearcoatNormalTextureInfo.getChild()\n\t\t\t.copy(resolve(other.clearcoatNormalTextureInfo.getChild()), resolve);\n\n\t\treturn this;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.clearcoatTextureInfo.getChild().dispose();\n\t\tthis.clearcoatRoughnessTextureInfo.getChild().dispose();\n\t\tthis.clearcoatNormalTextureInfo.getChild().dispose();\n\t\tsuper.dispose();\n\t}\n\n\t/**********************************************************************************************\n\t * Clearcoat.\n\t */\n\n\t/** Clearcoat; linear multiplier. See {@link getClearcoatTexture}. */\n\tpublic getClearcoatFactor(): number { return this._clearcoatFactor; }\n\n\t/** Clearcoat; linear multiplier. See {@link getClearcoatTexture}. */\n\tpublic setClearcoatFactor(clearcoatFactor: number): this {\n\t\tthis._clearcoatFactor = clearcoatFactor;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clearcoat texture; linear multiplier. The `r` channel of this texture specifies an amount\n\t * [0-1] of coating over the surface of the material, which may have its own roughness and\n\t * normal map properties.\n\t */\n\tpublic getClearcoatTexture(): Texture | null {\n\t\treturn this.clearcoatTexture ? this.clearcoatTexture.getChild() : null;\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its clearcoat texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getClearcoatTextureInfo(): TextureInfo | null {\n\t\treturn this.clearcoatTexture ? this.clearcoatTextureInfo.getChild() : null;\n\t}\n\n\t/** Sets clearcoat texture. See {@link getClearcoatTexture}. */\n\tpublic setClearcoatTexture(texture: Texture | null): this {\n\t\tthis.clearcoatTexture = this.graph.linkTexture('clearcoatTexture', R, this, texture);\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Clearcoat roughness.\n\t */\n\n\t/** Clearcoat roughness; linear multiplier. See {@link getClearcoatRoughnessTexture}. */\n\tpublic getClearcoatRoughnessFactor(): number { return this._clearcoatRoughnessFactor; }\n\n\t/** Clearcoat roughness; linear multiplier. See {@link getClearcoatRoughnessTexture}. */\n\tpublic setClearcoatRoughnessFactor(clearcoatRoughnessFactor: number): this {\n\t\tthis._clearcoatRoughnessFactor = clearcoatRoughnessFactor;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clearcoat roughness texture; linear multiplier. The `g` channel of this texture specifies\n\t * roughness, independent of the base layer's roughness.\n\t */\n\tpublic getClearcoatRoughnessTexture(): Texture | null {\n\t\treturn this.clearcoatRoughnessTexture ? this.clearcoatRoughnessTexture.getChild() : null;\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its clearcoat roughness texture. If no texture is\n\t * attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getClearcoatRoughnessTextureInfo(): TextureInfo | null {\n\t\treturn this.clearcoatRoughnessTexture\n\t\t\t? this.clearcoatRoughnessTextureInfo.getChild()\n\t\t\t: null;\n\t}\n\n\t/** Sets clearcoat roughness texture. See {@link getClearcoatRoughnessTexture}. */\n\tpublic setClearcoatRoughnessTexture(texture: Texture | null): this {\n\t\tthis.clearcoatRoughnessTexture\n\t\t\t= this.graph.linkTexture('clearcoatRoughnessTexture', G, this, texture);\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Clearcoat normals.\n\t */\n\n\t/** Clearcoat normal scale. See {@link getClearcoatNormalTexture}. */\n\tpublic getClearcoatNormalScale(): number { return this._clearcoatNormalScale; }\n\n\t/** Clearcoat normal scale. See {@link getClearcoatNormalTexture}. */\n\tpublic setClearcoatNormalScale(clearcoatNormalScale: number): this {\n\t\tthis._clearcoatNormalScale = clearcoatNormalScale;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clearcoat normal map. Independent of the material base layer normal map.\n\t */\n\tpublic getClearcoatNormalTexture(): Texture | null {\n\t\treturn this.clearcoatNormalTexture ? this.clearcoatNormalTexture.getChild() : null;\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its clearcoat normal texture. If no texture is\n\t * attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getClearcoatNormalTextureInfo(): TextureInfo | null {\n\t\treturn this.clearcoatNormalTexture ? this.clearcoatNormalTextureInfo.getChild() : null;\n\t}\n\n\t/** Sets clearcoat normal texture. See {@link getClearcoatNormalTexture}. */\n\tpublic setClearcoatNormalTexture(texture: Texture | null): this {\n\t\tthis.clearcoatNormalTexture =\n\t\t\tthis.graph.linkTexture('clearcoatNormalTexture', R | G | B, this, texture);\n\t\treturn this;\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_CLEARCOAT } from '../constants';\nimport { Clearcoat } from './clearcoat';\n\nconst NAME = KHR_MATERIALS_CLEARCOAT;\n\ninterface ClearcoatDef {\n\tclearcoatFactor?: number;\n\tclearcoatRoughnessFactor?: number;\n\tclearcoatTexture?: GLTF.ITextureInfo;\n\tclearcoatRoughnessTexture?: GLTF.ITextureInfo;\n\tclearcoatNormalTexture?: GLTF.IMaterialNormalTextureInfo;\n}\n\n/**\n * # MaterialsClearcoat\n *\n * [KHR_materials_clearcoat](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_clearcoat/)\n * defines a clear coating on a glTF PBR material.\n *\n * ![Illustration](/media/extensions/khr-materials-clearcoat.png)\n *\n * > _**Figure:** Comparison of a carbon-fiber material without clearcoat (left) and with clearcoat\n * > (right). Source: [Filament](https://google.github.io/filament/Materials.html)._\n *\n * A clear coat is a common technique used in Physically-Based\n * Rendering for a protective layer applied to a base material.\n * Commonly used to represent car paint, carbon fiber, or thin lacquers.\n *\n * Properties:\n * - {@link Clearcoat}\n *\n * ### Example\n *\n * ```typescript\n * import { MaterialsClearcoat, Clearcoat } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const clearcoatExtension = document.createExtension(MaterialsClearcoat);\n *\n * // Create Clearcoat property.\n * const clearcoat = clearcoatExtension.createClearcoat()\n *\t.setClearcoatFactor(1.0);\n *\n * // Assign to a Material.\n * material.setExtension('KHR_materials_clearcoat', clearcoat);\n * ```\n */\nexport class MaterialsClearcoat extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic createClearcoat(): Clearcoat {\n\t\treturn new Clearcoat(this.doc.getGraph(), this);\n\t}\n\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst clearcoat = this.createClearcoat();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, clearcoat);\n\n\t\t\t\tconst clearcoatDef = materialDef.extensions[NAME] as ClearcoatDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (clearcoatDef.clearcoatFactor !== undefined) {\n\t\t\t\t\tclearcoat.setClearcoatFactor(clearcoatDef.clearcoatFactor);\n\t\t\t\t}\n\t\t\t\tif (clearcoatDef.clearcoatRoughnessFactor !== undefined) {\n\t\t\t\t\tclearcoat.setClearcoatRoughnessFactor(\n\t\t\t\t\t\tclearcoatDef.clearcoatRoughnessFactor\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (clearcoatDef.clearcoatTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = clearcoatDef.clearcoatTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tclearcoat.setClearcoatTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(clearcoat.getClearcoatTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (clearcoatDef.clearcoatRoughnessTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = clearcoatDef.clearcoatRoughnessTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tclearcoat.setClearcoatRoughnessTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(\n\t\t\t\t\t\tclearcoat.getClearcoatRoughnessTextureInfo()!,\n\t\t\t\t\t\ttextureInfoDef\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (clearcoatDef.clearcoatNormalTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = clearcoatDef.clearcoatNormalTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tclearcoat.setClearcoatNormalTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(\n\t\t\t\t\t\tclearcoat.getClearcoatNormalTextureInfo()!,\n\t\t\t\t\t\ttextureInfoDef\n\t\t\t\t\t);\n\t\t\t\t\tif (textureInfoDef.scale !== undefined) {\n\t\t\t\t\t\tclearcoat.setClearcoatNormalScale(textureInfoDef.scale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.doc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst clearcoat = material.getExtension<Clearcoat>(NAME);\n\t\t\t\tif (clearcoat) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst clearcoatDef = materialDef.extensions[NAME] = {\n\t\t\t\t\t\tclearcoatFactor: clearcoat.getClearcoatFactor(),\n\t\t\t\t\t\tclearcoatRoughnessFactor: clearcoat.getClearcoatRoughnessFactor(),\n\t\t\t\t\t} as ClearcoatDef;\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (clearcoat.getClearcoatTexture()) {\n\t\t\t\t\t\tconst texture = clearcoat.getClearcoatTexture()!;\n\t\t\t\t\t\tconst textureInfo = clearcoat.getClearcoatTextureInfo()!;\n\t\t\t\t\t\tclearcoatDef.clearcoatTexture\n\t\t\t\t\t\t\t= context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (clearcoat.getClearcoatRoughnessTexture()) {\n\t\t\t\t\t\tconst texture = clearcoat.getClearcoatRoughnessTexture()!;\n\t\t\t\t\t\tconst textureInfo = clearcoat.getClearcoatRoughnessTextureInfo()!;\n\t\t\t\t\t\tclearcoatDef.clearcoatRoughnessTexture\n\t\t\t\t\t\t\t= context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (clearcoat.getClearcoatNormalTexture()) {\n\t\t\t\t\t\tconst texture = clearcoat.getClearcoatNormalTexture()!;\n\t\t\t\t\t\tconst textureInfo = clearcoat.getClearcoatNormalTextureInfo()!;\n\t\t\t\t\t\tclearcoatDef.clearcoatNormalTexture\n\t\t\t\t\t\t\t= context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t\tif (clearcoat.getClearcoatNormalScale() !== 1) {\n\t\t\t\t\t\t\tclearcoatDef.clearcoatNormalTexture.scale\n\t\t\t\t\t\t\t\t= clearcoat.getClearcoatNormalScale();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { COPY_IDENTITY, ExtensionProperty, PropertyType } from '@gltf-transform/core';\nimport { KHR_MATERIALS_EMISSIVE_STRENGTH } from '../constants';\n\n/**\n * # EmissiveStrength\n *\n * Defines emissive strength for a PBR {@link Material}, allowing high-dynamic-range\n * (HDR) emissive materials. See {@link MaterialsEmissiveStrength}.\n */\nexport class EmissiveStrength extends ExtensionProperty {\n\tpublic readonly propertyType = 'EmissiveStrength';\n\tpublic readonly parentTypes = [PropertyType.MATERIAL];\n\tpublic readonly extensionName = KHR_MATERIALS_EMISSIVE_STRENGTH;\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_EMISSIVE_STRENGTH;\n\n\tprivate _emissiveStrength = 1.0;\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\tsuper.copy(other, resolve);\n\n\t\tthis._emissiveStrength = other._emissiveStrength;\n\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * EmissiveStrength.\n\t */\n\n\t/** EmissiveStrength. */\n\tpublic getEmissiveStrength(): number { return this._emissiveStrength; }\n\n\t/** EmissiveStrength. */\n\tpublic setEmissiveStrength(emissiveStrength: number): this {\n\t\tthis._emissiveStrength = emissiveStrength;\n\t\treturn this;\n\t}\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_EMISSIVE_STRENGTH } from '../constants';\nimport { EmissiveStrength } from './emissive-strength';\n\nconst NAME = KHR_MATERIALS_EMISSIVE_STRENGTH;\n\ninterface EmissiveStrengthDef {\n\temissiveStrength?: number;\n}\n\n/**\n * # MaterialsEmissiveStrength\n *\n * [KHR_materials_emissive_strength](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_emissive_strength/)\n * defines emissive strength and enables high-dynamic-range (HDR) emissive materials.\n *\n * [[include:UNRATIFIED_EXTENSIONS_NOTE.md]]\n *\n * The core glTF 2.0 material model includes {@link Material.setEmissiveFactor `emissiveFactor`}\n * and {@link Material.setEmissiveTexture `emissiveTexture`} to control the color and intensity\n * of the light being emitted by the material, clamped to the range [0.0, 1.0]. However, in\n * PBR environments with HDR reflections and lighting, stronger emission effects may be desirable.\n *\n * In this extension, a new {@link EmissiveStrength.setEmissiveStrength `emissiveStrength`} scalar\n * factor is supplied, which governs the upper limit of emissive strength per material and may be\n * given arbitrarily high values.\n *\n * For implementations where a physical light unit is needed, the units for the multiplicative\n * product of the emissive texture and factor are candela per square meter (cd / m2), sometimes\n * called _nits_. Many realtime rendering engines simplify this calculation by assuming that an\n * emissive factor of 1.0 results in a fully exposed pixel.\n *\n * Properties:\n * - {@link EmissiveStrength}\n *\n * ### Example\n *\n * ```typescript\n * import { MaterialsEmissiveStrength, EmissiveStrength } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const emissiveStrengthExtension = document.createExtension(MaterialsEmissiveStrength);\n *\n * // Create EmissiveStrength property.\n * const emissiveStrength = emissiveStrengthExtension\n * \t.createEmissiveStrength().setEmissiveStrength(5.0);\n *\n * // Assign to a Material.\n * material.setExtension('KHR_materials_emissive_strength', emissiveStrength);\n * ```\n */\nexport class MaterialsEmissiveStrength extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic createEmissiveStrength(): EmissiveStrength {\n\t\treturn new EmissiveStrength(this.doc.getGraph(), this);\n\t}\n\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst emissiveStrength = this.createEmissiveStrength();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, emissiveStrength);\n\n\t\t\t\tconst emissiveStrengthDef = materialDef.extensions[NAME] as EmissiveStrengthDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (emissiveStrengthDef.emissiveStrength !== undefined) {\n\t\t\t\t\temissiveStrength.setEmissiveStrength(emissiveStrengthDef.emissiveStrength);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.doc\n\t\t\t.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst emissiveStrength = material.getExtension<EmissiveStrength>(NAME);\n\t\t\t\tif (emissiveStrength) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tmaterialDef.extensions[NAME] = {\n\t\t\t\t\t\temissiveStrength: emissiveStrength.getEmissiveStrength(),\n\t\t\t\t\t} as EmissiveStrengthDef;\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { COPY_IDENTITY, ExtensionProperty, PropertyType } from '@gltf-transform/core';\nimport { KHR_MATERIALS_IOR } from '../constants';\n\n/**\n * # IOR\n *\n * Defines index of refraction for a PBR {@link Material}. See {@link MaterialsIOR}.\n */\nexport class IOR extends ExtensionProperty {\n\tpublic readonly propertyType = 'IOR';\n\tpublic readonly parentTypes = [PropertyType.MATERIAL];\n\tpublic readonly extensionName = KHR_MATERIALS_IOR;\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_IOR;\n\n\tprivate _ior = 0.0;\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\tsuper.copy(other, resolve);\n\n\t\tthis._ior = other._ior;\n\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * IOR.\n\t */\n\n\t/** IOR. */\n\tpublic getIOR(): number { return this._ior; }\n\n\t/** IOR. */\n\tpublic setIOR(ior: number): this {\n\t\tthis._ior = ior;\n\t\treturn this;\n\t}\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_IOR } from '../constants';\nimport { IOR } from './ior';\n\nconst NAME = KHR_MATERIALS_IOR;\n\ninterface IORDef {\n\tior?: number;\n}\n\n/**\n * # MaterialsIOR\n *\n * [KHR_materials_ior](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_ior/)\n * defines index of refraction on a glTF PBR material.\n *\n * The dielectric BRDF of the metallic-roughness material in glTF uses a fixed value of 1.5 for the\n * index of refraction. This is a good fit for many plastics and glass, but not for other materials\n * like water or asphalt, sapphire or diamond. `KHR_materials_ior` allows users to set the index of\n * refraction to a certain value.\n *\n * Properties:\n * - {@link IOR}\n *\n * ### Example\n *\n * ```typescript\n * import { MaterialsIOR, IOR } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const iorExtension = document.createExtension(MaterialsIOR);\n *\n * // Create IOR property.\n * const ior = iorExtension.createIOR().setIOR(1.0);\n *\n * // Assign to a Material.\n * material.setExtension('KHR_materials_ior', ior);\n * ```\n */\nexport class MaterialsIOR extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic createIOR(): IOR {\n\t\treturn new IOR(this.doc.getGraph(), this);\n\t}\n\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst ior = this.createIOR();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, ior);\n\n\t\t\t\tconst iorDef = materialDef.extensions[NAME] as IORDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (iorDef.ior !== undefined) {\n\t\t\t\t\tior.setIOR(iorDef.ior);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.doc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst ior = material.getExtension<IOR>(NAME);\n\t\t\t\tif (ior) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tmaterialDef.extensions[NAME] = {\n\t\t\t\t\t\tior: ior.getIOR(),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { COPY_IDENTITY, ColorUtils, ExtensionProperty, GraphChild, Link, PropertyType, Texture, TextureChannel, TextureInfo, TextureLink, vec3, vec4 } from '@gltf-transform/core';\nimport { KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS } from '../constants';\n\nconst { R, G, B, A } = TextureChannel;\n\n/**\n * # PBRSpecularGlossiness\n *\n * Converts a {@link Material} to a spec/gloss workflow. See {@link MaterialsPBRSpecularGlossiness}.\n */\nexport class PBRSpecularGlossiness extends ExtensionProperty {\n\tpublic readonly propertyType = 'PBRSpecularGlossiness';\n\tpublic readonly parentTypes = [PropertyType.MATERIAL];\n\tpublic readonly extensionName = KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS;\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS;\n\n\tprivate _diffuseFactor: vec4 = [1.0, 1.0, 1.0, 1.0];\n\tprivate _specularFactor: vec3 = [1.0, 1.0, 1.0];\n\tprivate _glossinessFactor = 1.0;\n\n\t@GraphChild private diffuseTexture: TextureLink | null = null;\n\t@GraphChild private diffuseTextureInfo: Link<this, TextureInfo> =\n\t\tthis.graph.link('diffuseTextureInfo', this, new TextureInfo(this.graph));\n\n\t@GraphChild private specularGlossinessTexture: TextureLink | null = null;\n\t@GraphChild private specularGlossinessTextureInfo: Link<this, TextureInfo> =\n\t\tthis.graph.link('specularGlossinessTextureInfo', this, new TextureInfo(this.graph));\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\tsuper.copy(other, resolve);\n\n\t\tthis._diffuseFactor = other._diffuseFactor;\n\t\tthis._specularFactor = other._specularFactor;\n\t\tthis._glossinessFactor = other._glossinessFactor;\n\n\t\tthis.setDiffuseTexture(\n\t\t\tother.diffuseTexture\n\t\t\t\t? resolve(other.diffuseTexture.getChild())\n\t\t\t\t: null\n\t\t);\n\t\tthis.diffuseTextureInfo.getChild()\n\t\t\t.copy(resolve(other.diffuseTextureInfo.getChild()), resolve);\n\n\t\tthis.setSpecularGlossinessTexture(\n\t\t\tother.specularGlossinessTexture\n\t\t\t\t? resolve(other.specularGlossinessTexture.getChild())\n\t\t\t\t: null\n\t\t);\n\t\tthis.specularGlossinessTextureInfo.getChild()\n\t\t\t.copy(resolve(other.specularGlossinessTextureInfo.getChild()), resolve);\n\n\t\treturn this;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.diffuseTextureInfo.getChild().dispose();\n\t\tthis.specularGlossinessTextureInfo.getChild().dispose();\n\t\tsuper.dispose();\n\t}\n\n\t/**********************************************************************************************\n\t * Diffuse.\n\t */\n\n\t/** Diffuse; linear multiplier. See {@link getDiffuseTexture}. */\n\tpublic getDiffuseFactor(): vec4 { return this._diffuseFactor; }\n\n\t/** Diffuse; linear multiplier. See {@link getDiffuseTexture}. */\n\tpublic setDiffuseFactor(diffuseFactor: vec4): this {\n\t\tthis._diffuseFactor = diffuseFactor;\n\t\treturn this;\n\t}\n\n\t/** Diffuse; hex color in sRGB colorspace. */\n\tpublic getDiffuseHex(): number { return ColorUtils.factorToHex(this._diffuseFactor); }\n\n\t/** Diffuse; hex color in sRGB colorspace. */\n\tpublic setDiffuseHex(hex: number): this {\n\t\tColorUtils.hexToFactor(hex, this._diffuseFactor);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Diffuse texture; linear multiplier. Alternative to baseColorTexture used within the\n\t * spec/gloss PBR workflow.\n\t */\n\tpublic getDiffuseTexture(): Texture | null {\n\t\treturn this.diffuseTexture ? this.diffuseTexture.getChild() : null;\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its diffuse texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getDiffuseTextureInfo(): TextureInfo | null {\n\t\treturn this.diffuseTexture ? this.diffuseTextureInfo.getChild() : null;\n\t}\n\n\t/** Sets diffuse texture. See {@link getDiffuseTexture}. */\n\tpublic setDiffuseTexture(texture: Texture | null): this {\n\t\tthis.diffuseTexture =\n\t\t\tthis.graph.linkTexture('diffuseTexture', R | G | B | A, this, texture);\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Specular.\n\t */\n\n\t/** Specular; linear multiplier. */\n\tpublic getSpecularFactor(): vec3 { return this._specularFactor; }\n\n\t/** Specular; linear multiplier. */\n\tpublic setSpecularFactor(specularFactor: vec3): this {\n\t\tthis._specularFactor = specularFactor;\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Glossiness.\n\t */\n\n\t/** Glossiness; linear multiplier. */\n\tpublic getGlossinessFactor(): number { return this._glossinessFactor; }\n\n\t/** Glossiness; linear multiplier. */\n\tpublic setGlossinessFactor(glossinessFactor: number): this {\n\t\tthis._glossinessFactor = glossinessFactor;\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Specular/Glossiness.\n\t */\n\n\t/** Spec/gloss texture; linear multiplier. */\n\tpublic getSpecularGlossinessTexture(): Texture | null {\n\t\treturn this.specularGlossinessTexture ? this.specularGlossinessTexture.getChild() : null;\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its spec/gloss texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getSpecularGlossinessTextureInfo(): TextureInfo | null {\n\t\treturn this.specularGlossinessTexture\n\t\t\t? this.specularGlossinessTextureInfo.getChild()\n\t\t\t: null;\n\t}\n\n\t/** Spec/gloss texture; linear multiplier. */\n\tpublic setSpecularGlossinessTexture(texture: Texture | null): this {\n\t\tthis.specularGlossinessTexture\n\t\t\t= this.graph.linkTexture('specularGlossinessTexture', R | G | B | A, this, texture);\n\t\treturn this;\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext, vec3, vec4 } from '@gltf-transform/core';\nimport { KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS } from '../constants';\nimport { PBRSpecularGlossiness } from './pbr-specular-glossiness';\n\nconst NAME = KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS;\n\ninterface SpecularGlossinessDef {\n\tdiffuseFactor?: vec4;\n\tspecularFactor: vec3;\n\tglossinessFactor: number;\n\tdiffuseTexture?: GLTF.ITextureInfo;\n\tspecularGlossinessTexture?: GLTF.ITextureInfo;\n}\n\n/**\n * # MaterialsPBRSpecularGlossiness\n *\n * [`KHR_materials_pbrSpecularGlossiness`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness/)\n * converts a PBR material from the default metal/rough workflow to a spec/gloss workflow.\n *\n * > _**NOTICE:** The spec/gloss workflow does _not_ support other PBR extensions such as clearcoat,\n * > transmission, IOR, etc. For the complete PBR feature set and specular data, use the\n * > {@link MaterialsSpecular} extension instead, which provides specular data within a metal/rough\n * > workflow._\n *\n * ![Illustration](/media/extensions/khr-material-pbr-specular-glossiness.png)\n *\n * > _**Figure:** Components of a PBR spec/gloss material. Source: Khronos Group._\n *\n * Properties:\n * - {@link PBRSpecularGlossiness}\n *\n * ### Example\n *\n * ```typescript\n * import { MaterialsPBRSpecularGlossiness } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const specGlossExtension = document.createExtension(MaterialsPBRSpecularGlossiness);\n *\n * // Create a PBRSpecularGlossiness property.\n * const specGloss = specGlossExtension.createPBRSpecularGlossiness()\n * \t.setSpecularFactor(1.0);\n *\n * // // Assign to a Material.\n * material.setExtension('KHR_materials_pbrSpecularGlossiness', specGloss);\n * ```\n */\nexport class MaterialsPBRSpecularGlossiness extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic createPBRSpecularGlossiness(): PBRSpecularGlossiness {\n\t\treturn new PBRSpecularGlossiness(this.doc.getGraph(), this);\n\t}\n\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst specGloss = this.createPBRSpecularGlossiness();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, specGloss);\n\n\t\t\t\tconst specGlossDef = materialDef.extensions[NAME] as SpecularGlossinessDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (specGlossDef.diffuseFactor !== undefined) {\n\t\t\t\t\tspecGloss.setDiffuseFactor(specGlossDef.diffuseFactor);\n\t\t\t\t}\n\t\t\t\tif (specGlossDef.specularFactor !== undefined) {\n\t\t\t\t\tspecGloss.setSpecularFactor(specGlossDef.specularFactor);\n\t\t\t\t}\n\t\t\t\tif (specGlossDef.glossinessFactor !== undefined) {\n\t\t\t\t\tspecGloss.setGlossinessFactor(specGlossDef.glossinessFactor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (specGlossDef.diffuseTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = specGlossDef.diffuseTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tspecGloss.setDiffuseTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(specGloss.getDiffuseTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (specGlossDef.specularGlossinessTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = specGlossDef.specularGlossinessTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tspecGloss.setSpecularGlossinessTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(\n\t\t\t\t\t\tspecGloss.getSpecularGlossinessTextureInfo()!,\n\t\t\t\t\t\ttextureInfoDef\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.doc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst specGloss = material.getExtension<PBRSpecularGlossiness>(NAME);\n\t\t\t\tif (specGloss) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst specGlossDef = materialDef.extensions[NAME] = {\n\t\t\t\t\t\tdiffuseFactor: specGloss.getDiffuseFactor(),\n\t\t\t\t\t\tspecularFactor: specGloss.getSpecularFactor(),\n\t\t\t\t\t\tglossinessFactor: specGloss.getGlossinessFactor(),\n\t\t\t\t\t} as SpecularGlossinessDef;\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (specGloss.getDiffuseTexture()) {\n\t\t\t\t\t\tconst texture = specGloss.getDiffuseTexture()!;\n\t\t\t\t\t\tconst textureInfo = specGloss.getDiffuseTextureInfo()!;\n\t\t\t\t\t\tspecGlossDef.diffuseTexture\n\t\t\t\t\t\t\t= context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (specGloss.getSpecularGlossinessTexture()) {\n\t\t\t\t\t\tconst texture = specGloss.getSpecularGlossinessTexture()!;\n\t\t\t\t\t\tconst textureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\t\t\tspecGlossDef.specularGlossinessTexture\n\t\t\t\t\t\t\t= context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { COPY_IDENTITY, ColorUtils, ExtensionProperty, GraphChild, Link, PropertyType, Texture, TextureChannel, TextureInfo, TextureLink, vec3 } from '@gltf-transform/core';\nimport { KHR_MATERIALS_SHEEN } from '../constants';\n\nconst { R, G, B, A } = TextureChannel;\n\n/**\n * # Sheen\n *\n * Defines sheen on a PBR {@link Material}. See {@link MaterialsSheen}.\n */\nexport class Sheen extends ExtensionProperty {\n\tpublic readonly propertyType = 'Sheen';\n\tpublic readonly parentTypes = [PropertyType.MATERIAL];\n\tpublic readonly extensionName = KHR_MATERIALS_SHEEN;\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_SHEEN;\n\n\tprivate _sheenColorFactor: vec3 = [0.0, 0.0, 0.0];\n\tprivate _sheenRoughnessFactor = 0.0;\n\n\t@GraphChild private sheenColorTexture: TextureLink | null = null;\n\t@GraphChild private sheenColorTextureInfo: Link<this, TextureInfo> =\n\t\tthis.graph.link('sheenColorTextureInfo', this, new TextureInfo(this.graph));\n\n\t@GraphChild private sheenRoughnessTexture: TextureLink | null = null;\n\t@GraphChild private sheenRoughnessTextureInfo: Link<this, TextureInfo> =\n\t\tthis.graph.link('sheenRoughnessTextureInfo', this, new TextureInfo(this.graph));\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\tsuper.copy(other, resolve);\n\n\t\tthis._sheenColorFactor = other._sheenColorFactor;\n\t\tthis._sheenRoughnessFactor = other._sheenRoughnessFactor;\n\n\t\tthis.setSheenColorTexture(\n\t\t\tother.sheenColorTexture\n\t\t\t\t? resolve(other.sheenColorTexture.getChild())\n\t\t\t\t: null\n\t\t);\n\t\tthis.sheenColorTextureInfo.getChild()\n\t\t\t.copy(resolve(other.sheenColorTextureInfo.getChild()), resolve);\n\n\t\tthis.setSheenRoughnessTexture(\n\t\t\tother.sheenRoughnessTexture\n\t\t\t\t? resolve(other.sheenRoughnessTexture.getChild())\n\t\t\t\t: null\n\t\t);\n\t\tthis.sheenRoughnessTextureInfo.getChild()\n\t\t\t.copy(resolve(other.sheenRoughnessTextureInfo.getChild()), resolve);\n\n\t\treturn this;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.sheenColorTextureInfo.getChild().dispose();\n\t\tthis.sheenRoughnessTextureInfo.getChild().dispose();\n\t\tsuper.dispose();\n\t}\n\n\t/**********************************************************************************************\n\t * Sheen color.\n\t */\n\n\t/** Sheen; linear multiplier. */\n\tpublic getSheenColorFactor(): vec3 { return this._sheenColorFactor; }\n\n\t/** Sheen; hex color in sRGB colorspace. */\n\tpublic getSheenColorHex(): number { return ColorUtils.factorToHex(this._sheenColorFactor); }\n\n\t/** Sheen; linear multiplier. */\n\tpublic setSheenColorFactor(sheenColorFactor: vec3): this {\n\t\tthis._sheenColorFactor = sheenColorFactor;\n\t\treturn this;\n\t}\n\n\t/** Sheen; hex color in sRGB colorspace. */\n\tpublic setSheenColorHex(hex: number): this {\n\t\tColorUtils.hexToFactor(hex, this._sheenColorFactor);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sheen color texture, in sRGB colorspace.\n\t */\n\tpublic getSheenColorTexture(): Texture | null {\n\t\treturn this.sheenColorTexture ? this.sheenColorTexture.getChild() : null;\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its sheen color texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getSheenColorTextureInfo(): TextureInfo | null {\n\t\treturn this.sheenColorTexture ? this.sheenColorTextureInfo.getChild() : null;\n\t}\n\n\t/** Sets sheen color texture. See {@link getSheenColorTexture}. */\n\tpublic setSheenColorTexture(texture: Texture | null): this {\n\t\tthis.sheenColorTexture =\n\t\t\tthis.graph.linkTexture('sheenColorTexture', R | G | B, this, texture);\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Sheen roughness.\n\t */\n\n\t/** Sheen roughness; linear multiplier. See {@link getSheenRoughnessTexture}. */\n\tpublic getSheenRoughnessFactor(): number { return this._sheenRoughnessFactor; }\n\n\t/** Sheen roughness; linear multiplier. See {@link getSheenRoughnessTexture}. */\n\tpublic setSheenRoughnessFactor(sheenRoughnessFactor: number): this {\n\t\tthis._sheenRoughnessFactor = sheenRoughnessFactor;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sheen roughness texture; linear multiplier. The `a` channel of this texture specifies\n\t * roughness, independent of the base layer's roughness.\n\t */\n\tpublic getSheenRoughnessTexture(): Texture | null {\n\t\treturn this.sheenRoughnessTexture ? this.sheenRoughnessTexture.getChild() : null;\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its sheen roughness texture. If no texture is\n\t * attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getSheenRoughnessTextureInfo(): TextureInfo | null {\n\t\treturn this.sheenRoughnessTexture ? this.sheenRoughnessTextureInfo.getChild() : null;\n\t}\n\n\t/**\n\t * Sets sheen roughness texture.  The `a` channel of this texture specifies\n\t * roughness, independent of the base layer's roughness.\n\t */\n\tpublic setSheenRoughnessTexture(texture: Texture | null): this {\n\t\tthis.sheenRoughnessTexture =\n\t\t\tthis.graph.linkTexture('sheenRoughnessTexture', A, this, texture);\n\t\treturn this;\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext, vec3 } from '@gltf-transform/core';\nimport { KHR_MATERIALS_SHEEN } from '../constants';\nimport { Sheen } from './sheen';\n\nconst NAME = KHR_MATERIALS_SHEEN;\n\ninterface SheenDef {\n\tsheenColorFactor?: vec3;\n\tsheenRoughnessFactor?: number;\n\tsheenColorTexture?: GLTF.ITextureInfo;\n\tsheenRoughnessTexture?: GLTF.ITextureInfo;\n}\n\n/**\n * # MaterialsSheen\n *\n * [`KHR_materials_sheen`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_sheen/)\n * defines a velvet-like sheen layered on a glTF PBR material.\n *\n * ![Illustration](/media/extensions/khr-materials-sheen.png)\n *\n * > _**Figure:** A cushion, showing high material roughness and low sheen roughness. Soft\n * > highlights at edges of the material show backscattering from microfibers. Source: Khronos\n * > Group._\n *\n * A sheen layer is a common technique used in Physically-Based Rendering to represent\n * cloth and fabric materials.\n *\n * Properties:\n * - {@link Sheen}\n *\n * ### Example\n *\n * The `MaterialsSheen` class provides a single {@link ExtensionProperty} type, `Sheen`,\n * which may be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { MaterialsSheen, Sheen } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const sheenExtension = document.createExtension(MaterialsSheen);\n *\n * // Create a Sheen property.\n * const sheen = sheenExtension.createSheen()\n * \t.setSheenColorFactor([1.0, 1.0, 1.0]);\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_sheen', sheen);\n * ```\n */\nexport class MaterialsSheen extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic createSheen(): Sheen {\n\t\treturn new Sheen(this.doc.getGraph(), this);\n\t}\n\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst sheen = this.createSheen();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, sheen);\n\n\t\t\t\tconst sheenDef = materialDef.extensions[NAME] as SheenDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (sheenDef.sheenColorFactor !== undefined) {\n\t\t\t\t\tsheen.setSheenColorFactor(sheenDef.sheenColorFactor);\n\t\t\t\t}\n\t\t\t\tif (sheenDef.sheenRoughnessFactor !== undefined) {\n\t\t\t\t\tsheen.setSheenRoughnessFactor(\n\t\t\t\t\t\tsheenDef.sheenRoughnessFactor\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (sheenDef.sheenColorTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = sheenDef.sheenColorTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tsheen.setSheenColorTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(sheen.getSheenColorTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (sheenDef.sheenRoughnessTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = sheenDef.sheenRoughnessTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tsheen.setSheenRoughnessTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(sheen.getSheenRoughnessTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.doc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst sheen = material.getExtension<Sheen>(NAME);\n\t\t\t\tif (sheen) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst sheenDef = materialDef.extensions[NAME] = {\n\t\t\t\t\t\tsheenColorFactor: sheen.getSheenColorFactor(),\n\t\t\t\t\t\tsheenRoughnessFactor: sheen.getSheenRoughnessFactor(),\n\t\t\t\t\t} as SheenDef;\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (sheen.getSheenColorTexture()) {\n\t\t\t\t\t\tconst texture = sheen.getSheenColorTexture()!;\n\t\t\t\t\t\tconst textureInfo = sheen.getSheenColorTextureInfo()!;\n\t\t\t\t\t\tsheenDef.sheenColorTexture\n\t\t\t\t\t\t\t= context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (sheen.getSheenRoughnessTexture()) {\n\t\t\t\t\t\tconst texture = sheen.getSheenRoughnessTexture()!;\n\t\t\t\t\t\tconst textureInfo = sheen.getSheenRoughnessTextureInfo()!;\n\t\t\t\t\t\tsheenDef.sheenRoughnessTexture\n\t\t\t\t\t\t\t= context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { COPY_IDENTITY, ColorUtils, ExtensionProperty, GraphChild, Link, PropertyType, Texture, TextureChannel, TextureInfo, TextureLink, vec3 } from '@gltf-transform/core';\nimport { KHR_MATERIALS_SPECULAR } from '../constants';\n\nconst { R, G, B, A } = TextureChannel;\n\n/**\n * # Specular\n *\n * Defines specular reflectivity on a PBR {@link Material}. See {@link MaterialsSpecular}.\n */\nexport class Specular extends ExtensionProperty {\n\tpublic readonly propertyType = 'Specular';\n\tpublic readonly parentTypes = [PropertyType.MATERIAL];\n\tpublic readonly extensionName = KHR_MATERIALS_SPECULAR;\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_SPECULAR;\n\n\tprivate _specularFactor = 1.0;\n\tprivate _specularColorFactor: vec3 = [1.0, 1.0, 1.0];\n\n\t@GraphChild private specularTexture: TextureLink | null = null;\n\t@GraphChild private specularTextureInfo: Link<this, TextureInfo> =\n\t\tthis.graph.link('specularTextureInfo', this, new TextureInfo(this.graph));\n\t@GraphChild private specularColorTexture: TextureLink | null = null;\n\t@GraphChild private specularColorTextureInfo: Link<this, TextureInfo> =\n\t\tthis.graph.link('specularColorTextureInfo', this, new TextureInfo(this.graph));\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\tsuper.copy(other, resolve);\n\n\t\tthis._specularFactor = other._specularFactor;\n\t\tthis._specularColorFactor = other._specularColorFactor;\n\n\t\tthis.setSpecularTexture(\n\t\t\tother.specularTexture\n\t\t\t\t? resolve(other.specularTexture.getChild())\n\t\t\t\t: null\n\t\t);\n\t\tthis.specularTextureInfo.getChild()\n\t\t\t.copy(resolve(other.specularTextureInfo.getChild()), resolve);\n\n\t\tthis.setSpecularColorTexture(\n\t\t\tother.specularColorTexture\n\t\t\t\t? resolve(other.specularColorTexture.getChild())\n\t\t\t\t: null\n\t\t);\n\t\tthis.specularColorTextureInfo.getChild()\n\t\t\t.copy(resolve(other.specularColorTextureInfo.getChild()), resolve);\n\n\t\treturn this;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.specularTextureInfo.getChild().dispose();\n\t\tsuper.dispose();\n\t}\n\n\t/**********************************************************************************************\n\t * Specular.\n\t */\n\n\t/** Specular; linear multiplier. See {@link getSpecularTexture}. */\n\tpublic getSpecularFactor(): number { return this._specularFactor; }\n\n\t/** Specular; linear multiplier. See {@link getSpecularTexture}. */\n\tpublic setSpecularFactor(specularFactor: number): this {\n\t\tthis._specularFactor = specularFactor;\n\t\treturn this;\n\t}\n\n\t/** Specular color; components in linear space. See {@link getSpecularTexture}. */\n\tpublic getSpecularColorFactor(): vec3 { return this._specularColorFactor; }\n\n\t/** Specular color; components in linear space. See {@link getSpecularTexture}. */\n\tpublic setSpecularColorFactor(specularColorFactor: vec3): this {\n\t\tthis._specularColorFactor = specularColorFactor;\n\t\treturn this;\n\t}\n\n\t/** Specular color; hexadecimal in sRGB colorspace. See {@link getSpecularTexture} */\n\tpublic getSpecularColorHex(): number {\n\t\treturn ColorUtils.factorToHex(this._specularColorFactor);\n\t}\n\n\t/** Specular color; hexadecimal in sRGB colorspace. See {@link getSpecularTexture} */\n\tpublic setSpecularColorHex(hex: number): this {\n\t\tColorUtils.hexToFactor(hex, this._specularColorFactor);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Specular texture; linear multiplier. Configures the strength of the specular reflection in\n\t * the dielectric BRDF. A value of zero disables the specular reflection, resulting in a pure\n\t * diffuse material.\n\t *\n\t * Only the alpha (A) channel is used for specular strength, but this texture may optionally\n\t * be packed with specular color (RGB) into a single texture.\n\t */\n\tpublic getSpecularTexture(): Texture | null {\n\t\treturn this.specularTexture ? this.specularTexture.getChild() : null;\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its specular texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getSpecularTextureInfo(): TextureInfo | null {\n\t\treturn this.specularTexture ? this.specularTextureInfo.getChild() : null;\n\t}\n\n\t/** Sets specular texture. See {@link getSpecularTexture}. */\n\tpublic setSpecularTexture(texture: Texture | null): this {\n\t\tthis.specularTexture =\n\t\t\tthis.graph.linkTexture('specularTexture', A, this, texture);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Specular color texture; linear multiplier. Defines the F0 color of the specular reflection\n\t * (RGB channels, encoded in sRGB) in the the dielectric BRDF.\n\t *\n\t * Only RGB channels are used here, but this texture may optionally be packed with a specular\n\t * factor (A) into a single texture.\n\t */\n\tpublic getSpecularColorTexture(): Texture | null {\n\t\treturn this.specularColorTexture ? this.specularColorTexture.getChild() : null;\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its specular color texture. If no texture is\n\t * attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getSpecularColorTextureInfo(): TextureInfo | null {\n\t\treturn this.specularColorTexture ? this.specularColorTextureInfo.getChild() : null;\n\t}\n\n\t/** Sets specular color texture. See {@link getSpecularColorTexture}. */\n\tpublic setSpecularColorTexture(texture: Texture | null): this {\n\t\tthis.specularColorTexture =\n\t\t\tthis.graph.linkTexture('specularColorTexture', R | G | B, this, texture);\n\t\treturn this;\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext, vec3, MathUtils } from '@gltf-transform/core';\nimport { KHR_MATERIALS_SPECULAR } from '../constants';\nimport { Specular } from './specular';\n\nconst NAME = KHR_MATERIALS_SPECULAR;\n\ninterface SpecularDef {\n\tspecularFactor?: number;\n\tspecularColorFactor?: vec3;\n\tspecularTexture?: GLTF.ITextureInfo;\n\tspecularColorTexture?: GLTF.ITextureInfo;\n}\n\n/**\n * # MaterialsSpecular\n *\n * [`KHR_materials_specular`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_specular/)\n * adjusts the strength of the specular reflection in the dielectric BRDF.\n *\n * MaterialsSpecular is a better alternative to the older\n * {@link MaterialsPBRSpecularGlossiness KHR_materials_pbrSpecularGlossiness} extension, and\n * provides specular information while remaining within a metal/rough PBR workflow. A\n * value of zero disables the specular reflection, resulting in a pure diffuse material.\n *\n * Properties:\n * - {@link Specular}\n *\n * ### Example\n *\n * The `MaterialsSpecular` class provides a single {@link ExtensionProperty} type, `Specular`,\n * which may be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { MaterialsSpecular, Specular } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const specularExtension = document.createExtension(MaterialsSpecular);\n *\n * // Create a Specular property.\n * const specular = specularExtension.createSpecular()\n * \t.setSpecularFactor(1.0);\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_specular', specular);\n * ```\n */\nexport class MaterialsSpecular extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic createSpecular(): Specular {\n\t\treturn new Specular(this.doc.getGraph(), this);\n\t}\n\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst specular = this.createSpecular();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, specular);\n\n\t\t\t\tconst specularDef = materialDef.extensions[NAME] as SpecularDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (specularDef.specularFactor !== undefined) {\n\t\t\t\t\tspecular.setSpecularFactor(specularDef.specularFactor);\n\t\t\t\t}\n\t\t\t\tif (specularDef.specularColorFactor !== undefined) {\n\t\t\t\t\tspecular.setSpecularColorFactor(specularDef.specularColorFactor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (specularDef.specularTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = specularDef.specularTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tspecular.setSpecularTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(specular.getSpecularTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t\tif (specularDef.specularColorTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = specularDef.specularColorTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tspecular.setSpecularColorTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(specular.getSpecularColorTextureInfo()!, textureInfoDef);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.doc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst specular = material.getExtension<Specular>(NAME);\n\t\t\t\tif (specular) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst specularDef = materialDef.extensions[NAME] = {} as SpecularDef;\n\n\t\t\t\t\tif (specular.getSpecularFactor() !== 1) {\n\t\t\t\t\t\tspecularDef.specularFactor = specular.getSpecularFactor();\n\t\t\t\t\t}\n\t\t\t\t\tif (!MathUtils.eq(specular.getSpecularColorFactor(), [1, 1, 1])) {\n\t\t\t\t\t\tspecularDef.specularColorFactor = specular.getSpecularColorFactor();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (specular.getSpecularTexture()) {\n\t\t\t\t\t\tconst texture = specular.getSpecularTexture()!;\n\t\t\t\t\t\tconst textureInfo = specular.getSpecularTextureInfo()!;\n\t\t\t\t\t\tspecularDef.specularTexture\n\t\t\t\t\t\t\t= context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t\tif (specular.getSpecularColorTexture()) {\n\t\t\t\t\t\tconst texture = specular.getSpecularColorTexture()!;\n\t\t\t\t\t\tconst textureInfo = specular.getSpecularColorTextureInfo()!;\n\t\t\t\t\t\tspecularDef.specularColorTexture\n\t\t\t\t\t\t\t= context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { COPY_IDENTITY, ExtensionProperty, GraphChild, Link, PropertyType, Texture, TextureChannel, TextureInfo, TextureLink } from '@gltf-transform/core';\nimport { KHR_MATERIALS_TRANSMISSION } from '../constants';\n\nconst { R } = TextureChannel;\n\n/**\n * # Transmission\n *\n * Defines optical transmission on a PBR {@link Material}. See {@link MaterialsTransmission}.\n */\nexport class Transmission extends ExtensionProperty {\n\tpublic readonly propertyType = 'Transmission';\n\tpublic readonly parentTypes = [PropertyType.MATERIAL];\n\tpublic readonly extensionName = KHR_MATERIALS_TRANSMISSION;\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_TRANSMISSION;\n\n\tprivate _transmissionFactor = 0.0;\n\n\t@GraphChild private transmissionTexture: TextureLink | null = null;\n\t@GraphChild private transmissionTextureInfo: Link<this, TextureInfo> =\n\t\tthis.graph.link('transmissionTextureInfo', this, new TextureInfo(this.graph));\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\tsuper.copy(other, resolve);\n\n\t\tthis._transmissionFactor = other._transmissionFactor;\n\n\t\tthis.setTransmissionTexture(\n\t\t\tother.transmissionTexture\n\t\t\t\t? resolve(other.transmissionTexture.getChild())\n\t\t\t\t: null\n\t\t);\n\t\tthis.transmissionTextureInfo.getChild()\n\t\t\t.copy(resolve(other.transmissionTextureInfo.getChild()), resolve);\n\n\t\treturn this;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.transmissionTextureInfo.getChild().dispose();\n\t\tsuper.dispose();\n\t}\n\n\t/**********************************************************************************************\n\t * Transmission.\n\t */\n\n\t/** Transmission; linear multiplier. See {@link getTransmissionTexture}. */\n\tpublic getTransmissionFactor(): number { return this._transmissionFactor; }\n\n\t/** Transmission; linear multiplier. See {@link getTransmissionTexture}. */\n\tpublic setTransmissionFactor(transmissionFactor: number): this {\n\t\tthis._transmissionFactor = transmissionFactor;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Transmission texture; linear multiplier. The `r` channel of this texture specifies\n\t * transmission [0-1] of the material's surface. By default this is a thin transparency\n\t * effect, but volume effects (refraction, subsurface scattering) may be introduced with the\n\t * addition of the `KHR_materials_volume` extension.\n\t */\n\tpublic getTransmissionTexture(): Texture | null {\n\t\treturn this.transmissionTexture ? this.transmissionTexture.getChild() : null;\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its transmission texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getTransmissionTextureInfo(): TextureInfo | null {\n\t\treturn this.transmissionTexture ? this.transmissionTextureInfo.getChild() : null;\n\t}\n\n\t/** Sets transmission texture. See {@link getTransmissionTexture}. */\n\tpublic setTransmissionTexture(texture: Texture | null): this {\n\t\tthis.transmissionTexture = this.graph.linkTexture('transmissionTexture', R, this, texture);\n\t\treturn this;\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_TRANSMISSION } from '../constants';\nimport { Transmission } from './transmission';\n\nconst NAME = KHR_MATERIALS_TRANSMISSION;\n\ninterface TransmissionDef {\n\ttransmissionFactor?: number;\n\ttransmissionTexture?: GLTF.ITextureInfo;\n}\n\n/**\n * # MaterialsTransmission\n *\n * [`KHR_materials_transmission`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_transmission/)\n * provides a common type of optical transparency: infinitely-thin materials with no refraction,\n * scattering, or dispersion.\n *\n * While default PBR materials using alpha blending become invisible as their opacity approaches\n * zero, a transmissive material continues to reflect light in a glass-like manner, even at low\n * transmission values. When combined with {@link MaterialsVolume}, transmission may be used for\n * thicker materials and refractive effects.\n *\n * Properties:\n * - {@link Transmission}\n *\n * ### Example\n *\n * The `MaterialsTransmission` class provides a single {@link ExtensionProperty} type,\n * `Transmission`, which may be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { MaterialsTransmission, Transmission } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const transmissionExtension = document.createExtension(MaterialsTransmission);\n *\n * // Create a Transmission property.\n * const transmission = transmissionExtension.createTransmission()\n * \t.setTransmissionFactor(1.0);\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_transmission', transmission);\n * ```\n */\nexport class MaterialsTransmission extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic createTransmission(): Transmission {\n\t\treturn new Transmission(this.doc.getGraph(), this);\n\t}\n\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst transmission = this.createTransmission();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, transmission);\n\n\t\t\t\tconst transmissionDef = materialDef.extensions[NAME] as TransmissionDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (transmissionDef.transmissionFactor !== undefined) {\n\t\t\t\t\ttransmission.setTransmissionFactor(\n\t\t\t\t\t\ttransmissionDef.transmissionFactor\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (transmissionDef.transmissionTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = transmissionDef.transmissionTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\ttransmission.setTransmissionTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(\n\t\t\t\t\t\ttransmission.getTransmissionTextureInfo()!,\n\t\t\t\t\t\ttextureInfoDef\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.doc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst transmission = material.getExtension<Transmission>(NAME);\n\t\t\t\tif (transmission) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst transmissionDef = materialDef.extensions[NAME] = {\n\t\t\t\t\t\ttransmissionFactor: transmission.getTransmissionFactor(),\n\t\t\t\t\t} as TransmissionDef;\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (transmission.getTransmissionTexture()) {\n\t\t\t\t\t\tconst texture = transmission.getTransmissionTexture()!;\n\t\t\t\t\t\tconst textureInfo = transmission.getTransmissionTextureInfo()!;\n\t\t\t\t\t\ttransmissionDef.transmissionTexture\n\t\t\t\t\t\t\t= context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { ExtensionProperty } from '@gltf-transform/core';\nimport { PropertyType } from '@gltf-transform/core';\nimport { KHR_MATERIALS_UNLIT } from '../constants';\n\n/**\n * # Unlit\n *\n * Converts a PBR {@link Material} to an unlit shading model. See {@link MaterialsUnlit}.\n */\nexport class Unlit extends ExtensionProperty {\n\tpublic readonly propertyType = 'Unlit';\n\tpublic readonly parentTypes = [PropertyType.MATERIAL];\n\tpublic readonly extensionName = KHR_MATERIALS_UNLIT;\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_UNLIT;\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_UNLIT } from '../constants';\nimport { Unlit } from './unlit';\n\nconst NAME = KHR_MATERIALS_UNLIT;\n\n/**\n * # MaterialsUnlit\n *\n * [`KHR_materials_unlit`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_unlit/)\n * defines an unlit shading model for use in glTF 2.0 materials.\n *\n * ![Illustration](/media/extensions/khr-materials-unlit.png)\n *\n * > _**Figure:** Unlit materials are useful for flat shading, stylized effects, and for improving\n * > performance on mobile devices. Source: [Model by Hayden VanEarden](https://sketchfab.com/3d-models/summertime-kirby-c5711316103a4d67a62c34cfe8710938)._\n *\n * Unlit (also \"Shadeless\" or \"Constant\") materials provide a simple alternative to the Physically\n * Based Rendering (PBR) shading models provided by the core specification. Unlit materials are\n * often useful for cheaper rendering on performance-contrained devices, e.g. mobile phones.\n * Additionally, unlit materials can be very useful in achieving stylized, non-photo-realistic\n * effects like hand painted illustrative styles or baked toon shaders.\n *\n * Properties:\n * - {@link Unlit}\n *\n * ### Example\n *\n * The `MaterialsUnlit` class provides a single {@link ExtensionProperty} type, `Unlit`, which may\n * be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { MaterialsUnlit, Unlit } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const unlitExtension = document.createExtension(MaterialsUnlit);\n *\n * // Create an Unlit property.\n * const unlit = unlitExtension.createUnlit();\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_unlit', unlit);\n * ```\n */\nexport class MaterialsUnlit extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic createUnlit(): Unlit {\n\t\treturn new Unlit(this.doc.getGraph(), this);\n\t}\n\n\tpublic read(context: ReaderContext): this {\n\t\tconst materialDefs = context.jsonDoc.json.materials || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, this.createUnlit());\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.doc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tif (material.getExtension<Unlit>(NAME)) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\t\t\t\t\tmaterialDef.extensions[NAME] = {};\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { COPY_IDENTITY, ExtensionProperty, GraphChild, GraphChildList, Link, Material } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VARIANTS } from '../constants';\nimport { Variant } from './variant';\n\n/**\n * # Mapping\n *\n * Maps {@link Variant}s to {@link Material}s. See {@link MaterialsVariants}.\n */\nexport class Mapping extends ExtensionProperty {\n\tpublic readonly propertyType = 'Mapping';\n\tpublic readonly parentTypes = ['MappingList'];\n\tpublic readonly extensionName = KHR_MATERIALS_VARIANTS;\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_VARIANTS;\n\n\t@GraphChild private material: Link<this, Material> | null = null;\n\t@GraphChildList private variants: Link<this, Variant>[] = [];\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\tsuper.copy(other, resolve);\n\n\t\tthis.setMaterial(other.material ? resolve(other.material.getChild()) : null);\n\n\t\tthis.clearGraphChildList(this.variants);\n\t\tother.variants.forEach((link) => this.addVariant(resolve(link.getChild())));\n\n\t\treturn this;\n\t}\n\n\t/** The {@link Material} designated for this {@link Primitive}, under the given variants. */\n\tpublic getMaterial(): Material | null {\n\t\treturn this.material ? this.material.getChild() : null;\n\t}\n\n\t/** The {@link Material} designated for this {@link Primitive}, under the given variants. */\n\tpublic setMaterial(material: Material | null): this {\n\t\tthis.material = this.graph.link('material', this, material);\n\t\treturn this;\n\t}\n\n\t/** Adds a {@link Variant} to this mapping. */\n\tpublic addVariant(variant: Variant): this {\n\t\tconst link = this.graph.link('variant', this, variant);\n\t\treturn this.addGraphChild(this.variants, link);\n\t}\n\n\t/** Removes a {@link Variant} from this mapping. */\n\tpublic removeVariant(variant: Variant): this {\n\t\treturn this.removeGraphChild(this.variants, variant);\n\t}\n\n\t/** Lists {@link Variant}s in this mapping. */\n\tpublic listVariants(): Variant[] {\n\t\treturn this.variants.map((link) => link.getChild());\n\t}\n}\n","import { COPY_IDENTITY, ExtensionProperty, GraphChildList, Link, PropertyType } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VARIANTS } from '../constants';\nimport { Mapping } from './mapping';\n\n/**\n * # MappingList\n *\n * List of material variant {@link Mapping}s. See {@link MaterialsVariants}.\n */\nexport class MappingList extends ExtensionProperty {\n\tpublic readonly propertyType = 'MappingList';\n\tpublic readonly parentTypes = [PropertyType.PRIMITIVE];\n\tpublic readonly extensionName = KHR_MATERIALS_VARIANTS;\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_VARIANTS;\n\n\t@GraphChildList private mappings: Link<this, Mapping>[] = [];\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\tsuper.copy(other, resolve);\n\n\t\tthis.clearGraphChildList(this.mappings);\n\t\tother.mappings.forEach((link) => this.addMapping(resolve(link.getChild())));\n\n\t\treturn this;\n\t}\n\n\t/** Adds a {@link Mapping} to this mapping. */\n\tpublic addMapping(mapping: Mapping): this {\n\t\tconst link = this.graph.link('mapping', this, mapping);\n\t\treturn this.addGraphChild(this.mappings, link);\n\t}\n\n\t/** Removes a {@link Mapping} from the list for this {@link Primitive}. */\n\tpublic removeMapping(mapping: Mapping): this {\n\t\treturn this.removeGraphChild(this.mappings, mapping);\n\t}\n\n\t/** Lists {@link Mapping}s in this {@link Primitive}. */\n\tpublic listMappings(): Mapping[] {\n\t\treturn this.mappings.map((link) => link.getChild());\n\t}\n}\n","import { ExtensionProperty, PropertyType } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VARIANTS } from '../constants';\n\n/**\n * # Variant\n *\n * Defines a variant of a {@link Material}. See {@link MaterialsVariants}.\n */\nexport class Variant extends ExtensionProperty {\n\tpublic readonly propertyType = 'Variant';\n\tpublic readonly parentTypes = [PropertyType.ROOT, 'MappingList'];\n\tpublic readonly extensionName = KHR_MATERIALS_VARIANTS;\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_VARIANTS;\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VARIANTS } from '../constants';\nimport { Mapping } from './mapping';\nimport { MappingList } from './mapping-list';\nimport { Variant } from './variant';\n\nconst NAME = KHR_MATERIALS_VARIANTS;\n\ninterface VariantsRootDef {\n\tvariants: VariantDef[];\n}\n\ninterface VariantDef {\n\tname?: string;\n}\n\ninterface VariantPrimDef {\n\tmappings: VariantMappingDef[];\n}\n\ninterface VariantMappingDef {\n\tmaterial: number;\n\tvariants: number[];\n}\n\n/**\n * # MaterialsVariants\n *\n * [`KHR_materials_variants`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_variants/)\n * defines alternate {@link Material} states for any {@link Primitive} in the scene.\n *\n * ![Illustration](/media/extensions/khr-materials-variants.png)\n *\n * > _**Figure:** A sneaker, in three material variants. Source: Khronos Group._\n *\n * Uses include product configurators, night/day states, healthy/damaged states, etc. The\n * `MaterialsVariants` class provides three {@link ExtensionProperty} types: `Variant`, `Mapping`,\n * and `MappingList`. When attached to {@link Primitive} properties, these offer flexible ways of\n * defining the variants available to an application. Triggering a variant is out of scope of this\n * extension, but could be handled in the application with a UI dropdown, particular game states,\n * and so on.\n *\n * Mesh geometry cannot be changed by this extension, although another extension\n * (tentative: `KHR_mesh_variants`) is under consideration by the Khronos Group, for that purpose.\n *\n * Properties:\n * - {@link Variant}\n * - {@link Mapping}\n * - {@link MappingList}\n *\n * ### Example\n *\n * ```typescript\n * import { MaterialsVariants } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const variantExtension = document.createExtension(MaterialsVariants);\n *\n * // Create some Variant states.\n * const healthyVariant = variantExtension.createVariant('Healthy');\n * const damagedVariant = variantExtension.createVariant('Damaged');\n *\n * // Create mappings from a Variant state to a Material.\n * const healthyMapping = variantExtension.createMapping()\n * \t.addVariant(healthyVariant)\n * \t.setMaterial(healthyMat);\n * const damagedMapping = variantExtension.createMapping()\n * \t.addVariant(damagedVariant)\n * \t.setMaterial(damagedMat);\n *\n * // Attach the mappings to a Primitive.\n * primitive.setExtension(\n * \t'KHR_materials_variants',\n * \tvariantExtension.createMappingList()\n * \t\t.addMapping(healthyMapping)\n * \t\t.addMapping(damagedMapping)\n * );\n * ```\n *\n * A few notes about this extension:\n *\n * 1. Viewers that don't recognized this extension will show the default material for each primitive\n * \t instead, so assign that material accordingly. This material can be — but doesn't have to be —\n * \t associated with one of the available variants.\n * 2. Mappings can list multiple Variants. In that case, the first Mapping containing an active\n * \t Variant will be chosen by the viewer.\n * 3. Variant names are how these states are identified, so choose informative names.\n * 4. When writing the file to an unpacked `.gltf`, instead of an embedded `.glb`, viewers will have\n * \t the option of downloading only textures associated with the default state, and lazy-loading\n * \t any textures for inactive Variants only when they are needed.\n */\nexport class MaterialsVariants extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic createMappingList(): MappingList {\n\t\treturn new MappingList(this.doc.getGraph(), this);\n\t}\n\n\tpublic createVariant(name = ''): Variant {\n\t\treturn new Variant(this.doc.getGraph(), this).setName(name);\n\t}\n\n\tpublic createMapping(): Mapping {\n\t\treturn new Mapping(this.doc.getGraph(), this);\n\t}\n\n\tpublic listVariants(): Variant[] {\n\t\treturn Array.from(this.properties)\n\t\t\t.filter((prop) => prop instanceof Variant) as Variant[];\n\t}\n\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tif (!jsonDoc.json.extensions || !jsonDoc.json.extensions[NAME]) return this;\n\n\t\t// Read all top-level variant names.\n\t\tconst variantsRootDef = jsonDoc.json.extensions[NAME] as VariantsRootDef;\n\t\tconst variantDefs = variantsRootDef.variants || [];\n\t\tconst variants = variantDefs\n\t\t\t.map((variantDef) => this.createVariant().setName(variantDef.name || ''));\n\n\t\t// For each mesh primitive, read its material/variant mappings.\n\t\tconst meshDefs = jsonDoc.json.meshes || [];\n\t\tmeshDefs.forEach((meshDef, meshIndex) => {\n\t\t\tconst mesh = context.meshes[meshIndex];\n\t\t\tconst primDefs = meshDef.primitives || [];\n\n\t\t\tprimDefs.forEach((primDef, primIndex) => {\n\t\t\t\tif (!primDef.extensions || !primDef.extensions[NAME]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst mappingList = this.createMappingList();\n\n\t\t\t\tconst variantPrimDef = primDef.extensions[NAME] as VariantPrimDef;\n\t\t\t\tfor (const mappingDef of variantPrimDef.mappings) {\n\t\t\t\t\tconst mapping = this.createMapping();\n\n\t\t\t\t\tif (mappingDef.material !== undefined) {\n\t\t\t\t\t\tmapping.setMaterial(context.materials[mappingDef.material]);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const variantIndex of mappingDef.variants || []) {\n\t\t\t\t\t\tmapping.addVariant(variants[variantIndex]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmappingList.addMapping(mapping);\n\t\t\t\t}\n\n\t\t\t\tmesh.listPrimitives()[primIndex].setExtension(NAME, mappingList);\n\t\t\t});\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tconst variants = this.listVariants();\n\t\tif (!variants.length) return this;\n\n\n\t\t// Write all top-level variant names.\n\t\tconst variantDefs = [];\n\t\tconst variantIndexMap = new Map<Variant, number>();\n\t\tfor (const variant of variants) {\n\t\t\tvariantIndexMap.set(variant, variantDefs.length);\n\t\t\tvariantDefs.push(context.createPropertyDef(variant));\n\t\t}\n\n\t\t// For each mesh primitive, write its material/variant mappings.\n\t\tfor (const mesh of this.doc.getRoot().listMeshes()) {\n\t\t\tconst meshIndex = context.meshIndexMap.get(mesh)!;\n\n\t\t\tmesh.listPrimitives().forEach((prim, primIndex) => {\n\t\t\t\tconst mappingList = prim.getExtension<MappingList>(NAME);\n\t\t\t\tif (!mappingList) return;\n\n\t\t\t\tconst primDef = context.jsonDoc.json.meshes![meshIndex].primitives[primIndex];\n\n\n\t\t\t\tconst mappingDefs = mappingList.listMappings().map((mapping) => {\n\t\t\t\t\tconst mappingDef = context.createPropertyDef(mapping) as VariantMappingDef;\n\n\t\t\t\t\tconst material = mapping.getMaterial();\n\t\t\t\t\tif (material) {\n\t\t\t\t\t\tmappingDef.material = context.materialIndexMap.get(material)!;\n\t\t\t\t\t}\n\n\t\t\t\t\tmappingDef.variants = mapping.listVariants()\n\t\t\t\t\t\t.map((variant) => variantIndexMap.get(variant)!);\n\n\t\t\t\t\treturn mappingDef;\n\t\t\t\t});\n\n\t\t\t\tprimDef.extensions = primDef.extensions || {};\n\t\t\t\tprimDef.extensions[NAME] = {mappings: mappingDefs};\n\t\t\t});\n\t\t}\n\n\t\tjsonDoc.json.extensions = jsonDoc.json.extensions || {};\n\t\tjsonDoc.json.extensions[NAME] = {variants: variantDefs};\n\n\t\treturn this;\n\t}\n}\n","import {\n\tCOPY_IDENTITY,\n\tColorUtils,\n\tExtensionProperty,\n\tGraphChild,\n\tLink,\n\tPropertyType,\n\tTexture,\n\tTextureChannel,\n\tTextureInfo,\n\tTextureLink,\n\tvec3,\n} from '@gltf-transform/core';\nimport { KHR_MATERIALS_VOLUME } from '../constants';\n\nconst { G } = TextureChannel;\n\n/**\n * # Volume\n *\n * Defines volume on a PBR {@link Material}. See {@link MaterialsVolume}.\n */\nexport class Volume extends ExtensionProperty {\n\tpublic readonly propertyType = 'Volume';\n\tpublic readonly parentTypes = [PropertyType.MATERIAL];\n\tpublic readonly extensionName = KHR_MATERIALS_VOLUME;\n\tpublic static EXTENSION_NAME = KHR_MATERIALS_VOLUME;\n\n\tprivate _thicknessFactor = 0.0;\n\tprivate _attenuationDistance = Infinity;\n\tprivate _attenuationColor = [1, 1, 1] as vec3;\n\n\t@GraphChild private thicknessTexture: TextureLink | null = null;\n\t@GraphChild private thicknessTextureInfo: Link<this, TextureInfo> = this.graph.link(\n\t\t'thicknessTextureInfo',\n\t\tthis,\n\t\tnew TextureInfo(this.graph)\n\t);\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\tsuper.copy(other, resolve);\n\n\t\tthis._thicknessFactor = other._thicknessFactor;\n\t\tthis._attenuationDistance = other._attenuationDistance;\n\t\tthis._attenuationColor = [...other._attenuationColor] as vec3;\n\n\t\tthis.setThicknessTexture(other.thicknessTexture ? resolve(other.thicknessTexture.getChild()) : null);\n\t\tthis.thicknessTextureInfo.getChild().copy(resolve(other.thicknessTextureInfo.getChild()), resolve);\n\n\t\treturn this;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.thicknessTextureInfo.getChild().dispose();\n\t\tsuper.dispose();\n\t}\n\n\t/**********************************************************************************************\n\t * Thickness.\n\t */\n\n\t/**\n\t * Thickness of the volume beneath the surface in meters in the local coordinate system of the\n\t * node. If the value is 0 the material is thin-walled. Otherwise the material is a volume\n\t * boundary. The doubleSided property has no effect on volume boundaries.\n\t */\n\tpublic getThicknessFactor(): number {\n\t\treturn this._thicknessFactor;\n\t}\n\n\t/**\n\t * Thickness of the volume beneath the surface in meters in the local coordinate system of the\n\t * node. If the value is 0 the material is thin-walled. Otherwise the material is a volume\n\t * boundary. The doubleSided property has no effect on volume boundaries.\n\t */\n\tpublic setThicknessFactor(thicknessFactor: number): this {\n\t\tthis._thicknessFactor = thicknessFactor;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Texture that defines the thickness, stored in the G channel. This will be multiplied by\n\t * thicknessFactor.\n\t */\n\tpublic getThicknessTexture(): Texture | null {\n\t\treturn this.thicknessTexture ? this.thicknessTexture.getChild() : null;\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its thickness texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getThicknessTextureInfo(): TextureInfo | null {\n\t\treturn this.thicknessTexture ? this.thicknessTextureInfo.getChild() : null;\n\t}\n\n\t/**\n\t * Texture that defines the thickness, stored in the G channel. This will be multiplied by\n\t * thicknessFactor.\n\t */\n\tpublic setThicknessTexture(texture: Texture | null): this {\n\t\tthis.thicknessTexture = this.graph.linkTexture('thicknessTexture', G, this, texture);\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Attenuation.\n\t */\n\n\t/**\n\t * Density of the medium given as the average distance in meters that light travels in the\n\t * medium before interacting with a particle.\n\t */\n\tpublic getAttenuationDistance(): number {\n\t\treturn this._attenuationDistance;\n\t}\n\n\t/**\n\t * Density of the medium given as the average distance in meters that light travels in the\n\t * medium before interacting with a particle.\n\t */\n\tpublic setAttenuationDistance(attenuationDistance: number): this {\n\t\tthis._attenuationDistance = attenuationDistance;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Color (linear) that white light turns into due to absorption when reaching the attenuation\n\t * distance.\n\t */\n\tpublic getAttenuationColor(): vec3 {\n\t\treturn this._attenuationColor;\n\t}\n\n\t/**\n\t * Color (linear) that white light turns into due to absorption when reaching the attenuation\n\t * distance.\n\t */\n\tpublic setAttenuationColor(attenuationColor: vec3): this {\n\t\tthis._attenuationColor = attenuationColor;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Color (sRGB) that white light turns into due to absorption when reaching the attenuation\n\t * distance.\n\t */\n\tpublic getAttenuationColorHex(): number {\n\t\treturn ColorUtils.factorToHex(this._attenuationColor);\n\t}\n\n\t/**\n\t * Color (sRGB) that white light turns into due to absorption when reaching the attenuation\n\t * distance.\n\t */\n\tpublic setAttenuationColorHex(hex: number): this {\n\t\tColorUtils.hexToFactor(hex, this._attenuationColor);\n\t\treturn this;\n\t}\n}\n","import { Extension, GLTF, ReaderContext, WriterContext, vec3, MathUtils } from '@gltf-transform/core';\nimport { KHR_MATERIALS_VOLUME } from '../constants';\nimport { Volume } from './volume';\n\nconst NAME = KHR_MATERIALS_VOLUME;\n\ninterface VolumeDef {\n\tthicknessFactor?: number;\n\tthicknessTexture?: GLTF.ITextureInfo;\n\tattenuationDistance?: number;\n\tattenuationColor?: vec3;\n}\n\n/**\n * # MaterialsVolume\n *\n * [KHR_materials_volume](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_volume/)\n * adds refraction, absorption, or scattering to a glTF PBR material already using transmission or\n * translucency.\n *\n * ![Illustration](/media/extensions/khr-materials-volume.png)\n *\n * > _**Figure:** Base color changes the amount of light passing through the volume boundary\n * > (left). The overall color of the object is the same everywhere, as if the object is covered\n * > with a colored, transparent foil. Absorption changes the amount of light traveling through the\n * > volume (right). The overall color depends on the distance the light traveled through it; at\n * > small distances (tail of the dragon) less light is absorbed and the color is brighter than at\n * > large distances. Source: Khronos Group._\n *\n * By default, a glTF 2.0 material describes the scattering properties of a surface enclosing an\n * infinitely thin volume. The surface defined by the mesh represents a thin wall. The volume\n * extension makes it possible to turn the surface into an interface between volumes. The mesh to\n * which the material is attached defines the boundaries of an homogeneous medium and therefore must\n * be manifold. Volumes provide effects like refraction, absorption and scattering. Scattering\n * effects will require future (TBD) extensions.\n *\n * The volume extension must be combined with {@link MaterialsTransmission} or\n * `KHR_materials_translucency` in order to define entry of light into the volume.\n *\n * Properties:\n * - {@link Volume}\n *\n * ### Example\n *\n * The `MaterialsVolume` class provides a single {@link ExtensionProperty} type, `Volume`, which\n * may be attached to any {@link Material} instance. For example:\n *\n * ```typescript\n * import { MaterialsVolume, Volume } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const volumeExtension = document.createExtension(MaterialsVolume);\n *\n * // Create a Volume property.\n * const volume = volumeExtension.createVolume()\n * \t.setThicknessFactor(1.0)\n * \t.setThicknessTexture(texture)\n * \t.setAttenuationDistance(1.0)\n * \t.setAttenuationColorHex(0xFFEEEE);\n *\n * // Attach the property to a Material.\n * material.setExtension('KHR_materials_volume', volume);\n * ```\n *\n * A thickness texture is required in most realtime renderers, and can be baked in software such as\n * Blender or Substance Painter. When `thicknessFactor = 0`, all volumetric effects are disabled.\n */\nexport class MaterialsVolume extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic createVolume(): Volume {\n\t\treturn new Volume(this.doc.getGraph(), this);\n\t}\n\n\tpublic read(context: ReaderContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\t\tconst materialDefs = jsonDoc.json.materials || [];\n\t\tconst textureDefs = jsonDoc.json.textures || [];\n\t\tmaterialDefs.forEach((materialDef, materialIndex) => {\n\t\t\tif (materialDef.extensions && materialDef.extensions[NAME]) {\n\t\t\t\tconst volume = this.createVolume();\n\t\t\t\tcontext.materials[materialIndex].setExtension(NAME, volume);\n\n\t\t\t\tconst volumeDef = materialDef.extensions[NAME] as VolumeDef;\n\n\t\t\t\t// Factors.\n\n\t\t\t\tif (volumeDef.thicknessFactor !== undefined) {\n\t\t\t\t\tvolume.setThicknessFactor(volumeDef.thicknessFactor);\n\t\t\t\t}\n\t\t\t\tif (volumeDef.attenuationDistance !== undefined) {\n\t\t\t\t\tvolume.setAttenuationDistance(volumeDef.attenuationDistance);\n\t\t\t\t}\n\t\t\t\tif (volumeDef.attenuationColor !== undefined) {\n\t\t\t\t\tvolume.setAttenuationColor(volumeDef.attenuationColor);\n\t\t\t\t}\n\n\t\t\t\t// Textures.\n\n\t\t\t\tif (volumeDef.thicknessTexture !== undefined) {\n\t\t\t\t\tconst textureInfoDef = volumeDef.thicknessTexture;\n\t\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\t\tvolume.setThicknessTexture(texture);\n\t\t\t\t\tcontext.setTextureInfo(\n\t\t\t\t\t\tvolume.getThicknessTextureInfo()!,\n\t\t\t\t\t\ttextureInfoDef\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.doc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tconst volume = material.getExtension<Volume>(NAME);\n\t\t\t\tif (volume) {\n\t\t\t\t\tconst materialIndex = context.materialIndexMap.get(material)!;\n\t\t\t\t\tconst materialDef = jsonDoc.json.materials![materialIndex];\n\t\t\t\t\tmaterialDef.extensions = materialDef.extensions || {};\n\n\t\t\t\t\t// Factors.\n\n\t\t\t\t\tconst volumeDef = materialDef.extensions[NAME] = {} as VolumeDef;\n\n\t\t\t\t\tif (volume.getThicknessFactor() > 0) {\n\t\t\t\t\t\tvolumeDef.thicknessFactor = volume.getThicknessFactor();\n\t\t\t\t\t}\n\t\t\t\t\tif (Number.isFinite(volume.getAttenuationDistance())) {\n\t\t\t\t\t\tvolumeDef.attenuationDistance = volume.getAttenuationDistance();\n\t\t\t\t\t}\n\t\t\t\t\tif (!MathUtils.eq(volume.getAttenuationColor(), [1, 1, 1])) {\n\t\t\t\t\t\tvolumeDef.attenuationColor = volume.getAttenuationColor();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Textures.\n\n\t\t\t\t\tif (volume.getThicknessTexture()) {\n\t\t\t\t\t\tconst texture = volume.getThicknessTexture()!;\n\t\t\t\t\t\tconst textureInfo = volume.getThicknessTextureInfo()!;\n\t\t\t\t\t\tvolumeDef.thicknessTexture\n\t\t\t\t\t\t\t= context.createTextureInfoDef(texture, textureInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { Extension, ReaderContext, WriterContext } from '@gltf-transform/core';\nimport { KHR_MESH_QUANTIZATION } from '../constants';\n\nconst NAME = KHR_MESH_QUANTIZATION;\n\n/**\n * # MeshQuantization\n *\n * [`KHR_mesh_quantization`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_mesh_quantization/)\n * expands allowed component types for vertex attributes to include 16- and 8-bit storage.\n *\n * Quantization provides a memory/precision tradeoff — depending on the application needs, 16-bit or\n * 8-bit storage can be sufficient for mesh geometry, at 1/2 or 1/4 the size. For example, a 10x10\n * mesh might be written to a uint16 {@link Accessor}, with values `0–65536`, normalized to be\n * interpreted as `0–1`. With an additional 10x scale on any node {@link Node} instantiating the\n * quantized {@link Mesh}, the model retains its original scale with a minimal quality loss and\n * up to 50% file size reduction.\n *\n * Defining no {@link ExtensionProperty} types, this {@link Extension} is simply attached to the\n * {@link Document}, and affects the entire Document by allowing more flexible use of\n * {@link Accessor} types for vertex attributes. Without the Extension, the same use of these data\n * types would yield an invalid glTF document, under the stricter core glTF specification.\n *\n * Properties:\n * - N/A\n *\n * ### Example\n *\n * ```typescript\n * import { MeshQuantization } from '@gltf-transform/extensions';\n * import { quantize } from '@gltf-transform/functions';\n *\n * // Create an Extension attached to the Document.\n * const quantizationExtension = document.createExtension(MeshQuantization).setRequired(true);\n *\n * // Use Uint16Array, Uint8Array, Int16Array, and Int8Array in vertex accessors manually,\n * // or apply the provided quantize() function to compute quantized accessors automatically:\n * await document.transform(quantize({\n * \tquantizePosition: 16,\n * \tquantizeNormal: 12,\n * \tquantizeTexcoord: 14\n * }));\n * ```\n *\n * For more documentation about automatic quantization, see the {@link quantize} function.\n */\nexport class MeshQuantization extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tread(_: ReaderContext): this {\n\t\treturn this;\n\t}\n\n\twrite(_: WriterContext): this {\n\t\treturn this;\n\t}\n}\n","import { KTX2Model, read as readKTX } from 'ktx-parse';\nimport {\n\tExtension,\n\tImageUtils,\n\tImageUtilsFormat,\n\tPropertyType,\n\tReaderContext,\n\tWriterContext,\n\tvec2,\n} from '@gltf-transform/core';\nimport { KHR_TEXTURE_BASISU } from '../constants';\n\nconst NAME = KHR_TEXTURE_BASISU;\n\ninterface BasisuDef {\n\tsource: number;\n}\n\nclass KTX2ImageUtils implements ImageUtilsFormat {\n\tmatch(buffer: ArrayBuffer): boolean {\n\t\tconst array = new Uint8Array(buffer);\n\t\treturn (\n\t\t\tarray[0] === 0xab &&\n\t\t\tarray[1] === 0x4b &&\n\t\t\tarray[2] === 0x54 &&\n\t\t\tarray[3] === 0x58 &&\n\t\t\tarray[4] === 0x20 &&\n\t\t\tarray[5] === 0x32 &&\n\t\t\tarray[6] === 0x30 &&\n\t\t\tarray[7] === 0xbb &&\n\t\t\tarray[8] === 0x0d &&\n\t\t\tarray[9] === 0x0a &&\n\t\t\tarray[10] === 0x1a &&\n\t\t\tarray[11] === 0x0a\n\t\t);\n\t}\n\tgetSize(buffer: ArrayBuffer): vec2 {\n\t\tconst container = readKTX(new Uint8Array(buffer));\n\t\treturn [container.pixelWidth, container.pixelHeight];\n\t}\n\tgetChannels(buffer: ArrayBuffer): number {\n\t\tconst container = readKTX(new Uint8Array(buffer));\n\t\tconst dfd = container.dataFormatDescriptor[0];\n\t\tif (dfd.colorModel === KTX2Model.ETC1S) {\n\t\t\treturn dfd.samples.length === 2 && (dfd.samples[1].channelID & 0xf) === 15 ? 4 : 3;\n\t\t} else if (dfd.colorModel === KTX2Model.UASTC) {\n\t\t\treturn (dfd.samples[0].channelID & 0xf) === 3 ? 4 : 3;\n\t\t}\n\t\tthrow new Error(`Unexpected KTX2 colorModel, \"${dfd.colorModel}\".`);\n\t}\n\tgetGPUByteLength(buffer: ArrayBuffer): number {\n\t\tconst container = readKTX(new Uint8Array(buffer));\n\t\tconst hasAlpha = this.getChannels(buffer) > 3;\n\n\t\tlet uncompressedBytes = 0;\n\t\tfor (let i = 0; i < container.levels.length; i++) {\n\t\t\tconst level = container.levels[i];\n\n\t\t\t// Use level.uncompressedByteLength for UASTC; for ETC1S it's 0.\n\t\t\tif (level.uncompressedByteLength) {\n\t\t\t\tuncompressedBytes += level.uncompressedByteLength;\n\t\t\t} else {\n\t\t\t\tconst levelWidth = Math.max(1, Math.floor(container.pixelWidth / Math.pow(2, i)));\n\t\t\t\tconst levelHeight = Math.max(1, Math.floor(container.pixelHeight / Math.pow(2, i)));\n\t\t\t\tconst blockSize = hasAlpha ? 16 : 8;\n\t\t\t\tuncompressedBytes += (levelWidth / 4) * (levelHeight / 4) * blockSize;\n\t\t\t}\n\t\t}\n\n\t\treturn uncompressedBytes;\n\t}\n}\n\n/**\n * # TextureBasisu\n *\n * [`KHR_texture_basisu`](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_basisu)\n * enables KTX2 GPU textures with Basis Universal supercompression for any material texture.\n *\n * GPU texture formats, unlike traditional image formats, remain compressed in GPU memory. As a\n * result, they (1) upload to the GPU much more quickly, and (2) require much less GPU memory. In\n * certain cases they may also have smaller filesizes than PNG or JPEG textures, but this is not\n * guaranteed. GPU textures often require more careful tuning during compression to maintain image\n * quality, but this extra effort is worthwhile for applications that need to maintain a smooth\n * framerate while uploading images, or where GPU memory is limited.\n *\n * Defining no {@link ExtensionProperty} types, this {@link Extension} is simply attached to the\n * {@link Document}, and affects the entire Document by allowing use of the `image/ktx2` MIME type\n * and passing KTX2 image data to the {@link Texture.setImage} method. Without the Extension, the\n * same MIME types and image data would yield an invalid glTF document, under the stricter core glTF\n * specification.\n *\n * Properties:\n * - N/A\n *\n * ### Example\n *\n * ```typescript\n * import { TextureBasisu } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const basisuExtension = document.createExtension(TextureBasisu)\n * \t.setRequired(true);\n * document.createTexture('MyCompressedTexture')\n * \t.setMimeType('image/ktx2')\n * \t.setImage(fs.readFileSync('my-texture.ktx2'));\n * ```\n *\n * Compression is not done automatically when adding the extension as shown above — you must\n * compress the image data first, then pass the `.ktx2` payload to {@link Texture.setImage}. The\n * [glTF-Transform CLI](/cli.html) has functions to help with this, or any similar KTX2-capable\n * utility will work.\n *\n * When the `KHR_texture_basisu` extension is added to a file by glTF-Transform, the extension\n * should always be required. This tool does not support writing assets that \"fall back\" to optional\n * PNG or JPEG image data.\n *\n * > _**NOTICE:** Compressing some textures — particularly 3-component (RGB) normal maps, and\n * > occlusion/roughness/metalness maps, may give poor results with the ETC1S compression option.\n * > These issues can often be avoided with the larger UASTC compression option, or by upscaling the\n * > texture before compressing it.\n * >\n * > For best results when authoring new textures, use\n * > [texture dilation](https://docs.substance3d.com/spdoc/padding-134643719.html) and minimize\n * > prominent UV seams._\n */\nexport class TextureBasisu extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic readonly prereadTypes = [PropertyType.TEXTURE];\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic static register(): void {\n\t\tImageUtils.registerFormat('image/ktx2', new KTX2ImageUtils());\n\t}\n\n\tpublic preread(context: ReaderContext): this {\n\t\tcontext.jsonDoc.json.textures!.forEach((textureDef) => {\n\t\t\tif (textureDef.extensions && textureDef.extensions[NAME]) {\n\t\t\t\tconst basisuDef = textureDef.extensions[NAME] as BasisuDef;\n\t\t\t\ttextureDef.source = basisuDef.source;\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tpublic read(context: ReaderContext): this {\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst jsonDoc = context.jsonDoc;\n\n\t\tthis.doc\n\t\t\t.getRoot()\n\t\t\t.listTextures()\n\t\t\t.forEach((texture) => {\n\t\t\t\tif (texture.getMimeType() === 'image/ktx2') {\n\t\t\t\t\tconst imageIndex = context.imageIndexMap.get(texture);\n\t\t\t\t\tjsonDoc.json.textures!.forEach((textureDef) => {\n\t\t\t\t\t\tif (textureDef.source === imageIndex) {\n\t\t\t\t\t\t\ttextureDef.extensions = textureDef.extensions || {};\n\t\t\t\t\t\t\ttextureDef.extensions[NAME] = { source: textureDef.source };\n\t\t\t\t\t\t\tdelete textureDef.source;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this;\n\t}\n}\n","import { COPY_IDENTITY, ExtensionProperty, vec2 } from '@gltf-transform/core';\nimport { PropertyType } from '@gltf-transform/core';\nimport { KHR_TEXTURE_TRANSFORM } from '../constants';\n\n/**\n * # Transform\n *\n * Defines UV transform for a {@link TextureInfo}. See {@link TextureTransform}.\n */\nexport class Transform extends ExtensionProperty {\n\tpublic readonly propertyType = 'Transform';\n\tpublic readonly parentTypes = [PropertyType.TEXTURE_INFO];\n\tpublic readonly extensionName = KHR_TEXTURE_TRANSFORM;\n\tpublic static EXTENSION_NAME = KHR_TEXTURE_TRANSFORM;\n\n\tprivate _offset: vec2 = [0, 0];\n\tprivate _rotation = 0;\n\tprivate _scale: vec2 = [1, 1];\n\tprivate _texCoord: number | null = null;\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\tsuper.copy(other, resolve);\n\n\t\tthis._offset = other._offset;\n\t\tthis._rotation = other._rotation;\n\t\tthis._scale = other._scale;\n\t\tthis._texCoord = other._texCoord;\n\n\t\treturn this;\n\t}\n\n\tpublic getOffset(): vec2 { return this._offset; }\n\tpublic setOffset(offset: vec2): this {\n\t\tthis._offset = offset;\n\t\treturn this;\n\t}\n\n\tpublic getRotation(): number { return this._rotation; }\n\tpublic setRotation(rotation: number): this {\n\t\tthis._rotation = rotation;\n\t\treturn this;\n\t}\n\n\tpublic getScale(): vec2 { return this._scale; }\n\tpublic setScale(scale: vec2): this {\n\t\tthis._scale = scale;\n\t\treturn this;\n\t}\n\n\tpublic getTexCoord(): number | null { return this._texCoord; }\n\tpublic setTexCoord(texCoord: number): this {\n\t\tthis._texCoord = texCoord;\n\t\treturn this;\n\t}\n}\n","import { Extension, MathUtils, ReaderContext, WriterContext, vec2 } from '@gltf-transform/core';\nimport { KHR_TEXTURE_TRANSFORM } from '../constants';\nimport { Transform } from './transform';\n\nconst NAME = KHR_TEXTURE_TRANSFORM;\n\ninterface TransformDef {\n\toffset?: vec2;\n\trotation?: number;\n\tscale?: vec2;\n\ttexCoord?: number;\n}\n\n/**\n * # TextureTransform\n *\n * [`KHR_texture_transform`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_texture_transform/)\n * adds offset, rotation, and scale to {@link TextureInfo} properties.\n *\n * Affine UV transforms are useful for reducing the number of textures the GPU must load, improving\n * performance when used in techniques like texture atlases. UV transforms cannot be animated at\n * this time.\n *\n * Properties:\n * - {@link Transform}\n *\n * ### Example\n *\n * The `TextureTransform` class provides a single {@link ExtensionProperty} type, `Transform`, which\n * may be attached to any {@link TextureInfo} instance. For example:\n *\n * ```typescript\n * import { TextureTransform } from '@gltf-transform/extensions';\n *\n * // Create an Extension attached to the Document.\n * const transformExtension = document.createExtension(TextureTransform)\n * \t.setRequired(true);\n *\n * // Create a reusable Transform.\n * const transform = transformExtension.createTransform()\n * \t.setScale([100, 100]);\n *\n * // Apply the Transform to a Material's baseColorTexture.\n * document.createMaterial()\n * \t.setBaseColorTexture(myTexture)\n * \t.getBaseColorTextureInfo()\n * \t.setExtension('KHR_texture_transform', transform);\n * ```\n */\nexport class TextureTransform extends Extension {\n\tpublic readonly extensionName = NAME;\n\tpublic static readonly EXTENSION_NAME = NAME;\n\n\tpublic createTransform(): Transform {\n\t\treturn new Transform(this.doc.getGraph(), this);\n\t}\n\n\tpublic read(context: ReaderContext): this {\n\t\tfor (const [textureInfo, textureInfoDef] of Array.from(context.textureInfos.entries())) {\n\t\t\tif (!textureInfoDef.extensions || !textureInfoDef.extensions[NAME]) continue;\n\n\t\t\tconst transform = this.createTransform();\n\t\t\tconst transformDef = textureInfoDef.extensions[NAME] as TransformDef;\n\n\t\t\tif (transformDef.offset !== undefined) transform.setOffset(transformDef.offset);\n\t\t\tif (transformDef.rotation !== undefined) transform.setRotation(transformDef.rotation);\n\t\t\tif (transformDef.scale !== undefined) transform.setScale(transformDef.scale);\n\t\t\tif (transformDef.texCoord !== undefined) transform.setTexCoord(transformDef.texCoord);\n\n\t\t\ttextureInfo.setExtension(NAME, transform);\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic write(context: WriterContext): this {\n\t\tconst textureInfoEntries = Array.from(context.textureInfoDefMap.entries());\n\t\tfor (const [textureInfo, textureInfoDef] of textureInfoEntries) {\n\t\t\tconst transform = textureInfo.getExtension<Transform>(NAME);\n\t\t\tif (!transform) continue;\n\n\t\t\ttextureInfoDef.extensions = textureInfoDef.extensions || {};\n\t\t\tconst transformDef = {} as TransformDef;\n\n\t\t\tconst eq = MathUtils.eq;\n\t\t\tif (!eq(transform.getOffset(), [0, 0])) transformDef.offset = transform.getOffset();\n\t\t\tif (transform.getRotation() !== 0) transformDef.rotation = transform.getRotation();\n\t\t\tif (!eq(transform.getScale(), [1, 1])) transformDef.scale = transform.getScale();\n\t\t\tif (transform.getTexCoord() != null) transformDef.texCoord = transform.getTexCoord()!;\n\n\t\t\ttextureInfoDef.extensions[NAME] = transformDef;\n\t\t}\n\t\treturn this;\n\t}\n}\n","/** @module extensions */\n\nimport { MeshGPUInstancing } from './ext-mesh-gpu-instancing';\nimport { MeshoptCompression } from './ext-meshopt-compression';\nimport { TextureWebP } from './ext-texture-webp';\nimport { DracoMeshCompression } from './khr-draco-mesh-compression';\nimport { LightsPunctual } from './khr-lights-punctual';\nimport { MaterialsClearcoat } from './khr-materials-clearcoat';\nimport { MaterialsEmissiveStrength } from './khr-materials-emissive-strength';\nimport { MaterialsIOR } from './khr-materials-ior';\nimport { MaterialsPBRSpecularGlossiness } from './khr-materials-pbr-specular-glossiness';\nimport { MaterialsSheen } from './khr-materials-sheen';\nimport { MaterialsSpecular } from './khr-materials-specular';\nimport { MaterialsTransmission } from './khr-materials-transmission';\nimport { MaterialsUnlit } from './khr-materials-unlit';\nimport { MaterialsVariants } from './khr-materials-variants';\nimport { MaterialsVolume } from './khr-materials-volume';\nimport { MeshQuantization } from './khr-mesh-quantization';\nimport { TextureBasisu } from './khr-texture-basisu';\nimport { TextureTransform } from './khr-texture-transform';\n\nexport const KHRONOS_EXTENSIONS = [\n\tDracoMeshCompression,\n\tLightsPunctual,\n\tMaterialsClearcoat,\n\tMaterialsEmissiveStrength,\n\tMaterialsIOR,\n\tMaterialsPBRSpecularGlossiness,\n\tMaterialsSpecular,\n\tMaterialsSheen,\n\tMaterialsTransmission,\n\tMaterialsUnlit,\n\tMaterialsVariants,\n\tMaterialsVolume,\n\tMeshQuantization,\n\tTextureBasisu,\n\tTextureTransform,\n];\n\nexport const ALL_EXTENSIONS = [\n\tMeshGPUInstancing,\n\tMeshoptCompression,\n\tTextureWebP,\n\t...KHRONOS_EXTENSIONS,\n];\n\nexport * from './ext-mesh-gpu-instancing';\nexport * from './ext-meshopt-compression';\nexport * from './ext-texture-webp';\nexport * from './khr-draco-mesh-compression';\nexport * from './khr-lights-punctual';\nexport * from './khr-materials-clearcoat';\nexport * from './khr-materials-emissive-strength';\nexport * from './khr-materials-ior';\nexport * from './khr-materials-sheen';\nexport * from './khr-materials-specular';\nexport * from './khr-materials-pbr-specular-glossiness';\nexport * from './khr-materials-transmission';\nexport * from './khr-materials-unlit';\nexport * from './khr-materials-variants';\nexport * from './khr-materials-volume';\nexport * from './khr-mesh-quantization';\nexport * from './khr-texture-basisu';\nexport * from './khr-texture-transform';\n"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","InstancedMesh","ExtensionProperty","propertyType","parentTypes","PropertyType","NODE","extensionName","attributes","copy","other","resolve","COPY_IDENTITY","super","this","clearGraphChildList","listSemantics","forEach","semantic","setAttribute","getAttribute","link","find","getChild","accessor","prevAccessor","removeGraphChild","graph","linkAttribute","toLowerCase","addGraphChild","listAttributes","map","EXTENSION_NAME","GraphChildList","NAME","MeshGPUInstancing","Extension","provideTypes","prewriteTypes","ACCESSOR","createInstancedMesh","doc","getGraph","read","context","jsonDoc","json","nodes","nodeDef","nodeIndex","extensions","instancedMeshDef","instancedMesh","accessors","setExtension","prewrite","accessorUsageGroupedByParent","add","prop","properties","attribute","addAccessorToUsageGroup","write","getRoot","listNodes","node","getExtension","nodeIndexMap","get","accessorIndexMap","EncoderMethod","MeshoptMode","MeshoptFilter","BYTE","SHORT","FLOAT","Accessor","ComponentType","normalize","denormalize","MathUtils","prepareAccessor","encoder","mode","filterOptions","filter","bits","result","array","getArray","byteStride","getElementSize","getComponentSize","componentType","getComponentType","normalized","getNormalized","ATTRIBUTES","NONE","srcArray","dstArray","Float32Array","denormalizeArray","EXPONENTIAL","encodeFilterExp","getCount","OCTAHEDRAL","il","padNormals","encodeFilterOct","QUATERNION","encodeFilterQuat","Error","min","getMin","max","getMax","v","elementSize","elementStride","BufferUtils","padNumber","BYTES_PER_ELEMENT","constructor","j","padArrayElements","byteLength","getMeshoptMode","usage","WriterContext","BufferViewUsage","ELEMENT_ARRAY_BUFFER","listParents","some","parent","Primitive","getMode","Mode","TRIANGLES","INDICES","getMeshoptFilter","semantics","listParentLinks","getName","name","startsWith","targetPath","getTargetPath","sampler","AnimationSampler","channel","AnimationChannel","DEFAULT_ENCODER_OPTIONS","method","QUANTIZE","MeshoptCompression","prereadTypes","BUFFER","PRIMITIVE","readDependencies","writeDependencies","_decoder","_decoderFallbackBufferMap","Map","_encoder","_encoderOptions","_encoderFallbackBuffer","_encoderBufferViews","_encoderBufferViewData","_encoderBufferViewAccessors","install","dependency","setEncoderOptions","options","preread","isRequired","supported","_prereadBuffers","_prereadPrimitives","bufferViews","viewDef","index","meshoptDef","byteOffset","count","stride","Uint8Array","ArrayBuffer","bufferDef","buffers","buffer","source","uri","resources","GLB_BUFFER","decodeGltfBuffer","fallback","set","_context","fallbackBuffer","swap","dispose","_prewriteAccessors","_prewriteBuffers","createBuffer","fallbackBufferIndex","listBuffers","indexOf","listAccessors","getAccessorUsage","FILTER","preparedAccessor","getBuffer","bufferIndex","join","bufferView","bufferViewData","bufferViewAccessors","USAGE_TO_TARGET","ARRAY_BUFFER","undefined","[object Object]","accessorDef","createAccessorDef","push","slice","EXT_meshopt_compression","otherBufferViews","concat","encodeGltfBuffer","compressedData","pad","fallbackBufferByteOffset","bufferViewIndex","otherBufferViewsIndexMap","finalBufferViewDef","compressedByteOffset","assign","bufferIndexMap","fallbackBufferDef","WEBPImageUtils","match","getSize","RIFF","decodeText","WEBP","view","DataView","offset","chunkId","chunkByteLength","getUint32","getInt16","b0","getUint8","b1","b2","getChannels","_buffer","TextureWebP","TEXTURE","ImageUtils","registerFormat","textures","textureDef","listTextures","texture","getMimeType","imageIndex","imageIndexMap","decoderModule","COMPONENT_ARRAY","DATA_TYPE","encoderModule","decodeGeometry","decoder","data","DecoderBuffer","Init","GetEncodedGeometryType","TRIANGULAR_MESH","dracoMesh","Mesh","DecodeBufferToMesh","ok","ptr","destroy","decodeIndex","mesh","numIndices","num_faces","indices","num_points","Uint16Array","_malloc","GetTrianglesUInt16Array","HEAPU16","Uint32Array","GetTrianglesUInt32Array","HEAPU32","_free","decodeAttribute","dataType","ArrayCtor","numComponents","num_components","numValues","GetAttributeDataArrayForAllPoints","HEAPF32","AttributeEnum","DEFAULT_QUANTIZATION_BITS","POSITION","NORMAL","COLOR","TEX_COORD","GENERIC","decodeSpeed","encodeSpeed","EDGEBREAKER","quantizationBits","quantizationVolume","encodeGeometry","prim","_options","Encoder","builder","MeshBuilder","attributeIDs","dracoBuffer","DracoInt8Array","attributeEnum","getAttributeEnum","attributeID","addAttribute","SetAttributeQuantization","range","Math","SetAttributeExplicitQuantization","getIndices","AddFacesToMesh","SetSpeedOptions","SetTrackEncodedProperties","SEQUENTIAL","listTargets","SetEncodingMethod","MESH_SEQUENTIAL_ENCODING","MESH_EDGEBREAKER_ENCODING","EncodeMeshToDracoBuffer","GetValue","prevNumVertices","numVertices","GetNumberOfEncodedPoints","GetNumberOfEncodedFaces","itemSize","UNSIGNED_BYTE","AddUInt8Attribute","AddInt8Attribute","UNSIGNED_SHORT","AddUInt16Attribute","AddInt16Attribute","UNSIGNED_INT","AddUInt32Attribute","AddFloatAttribute","DracoMeshCompression","_decoderModule","_encoderModule","Int16Array","Int8Array","DT_FLOAT32","DT_UINT32","DT_UINT16","DT_UINT8","DT_INT16","DT_INT8","logger","getLogger","dracoMeshes","meshDefs","meshes","meshDef","primDef","primitives","dracoDef","bufferViewDef","Decoder","debug","dracoAttribute","GetAttributeByUniqueId","attributeArray","setArray","Array","from","values","_propertyType","JSON","stringify","primitiveHashMap","included","Set","excluded","listMeshes","listPrimitives","warn","accessorIndices","includedAccessors","includedHashKeys","primToHashKey","hashKey","createHashKey","has","dstIndices","clone","dstAttribute","keys","size","attr","listDracoPrimitives","primitiveEncodingMap","listScenes","bounds","pop","primHash","accessorDefs","encodedPrim","indicesDef","attributeDef","extensionData","dracoContext","meshIndexMap","extensionsUsed","extensionsRequired","indexMap","hashElements","sort","Light","_color","_intensity","_type","Type","POINT","_range","_innerConeAngle","_outerConeAngle","PI","getColor","setColor","color","getColorHex","ColorUtils","factorToHex","setColorHex","hex","hexToFactor","getIntensity","setIntensity","intensity","getType","setType","type","getRange","setRange","getInnerConeAngle","setInnerConeAngle","innerConeAngle","getOuterConeAngle","setOuterConeAngle","outerConeAngle","SPOT","DIRECTIONAL","LightsPunctual","createLight","lights","lightDef","light","setName","lightDefs","lightIndexMap","property","eq","R","G","B","TextureChannel","Clearcoat","MATERIAL","_clearcoatFactor","_clearcoatRoughnessFactor","_clearcoatNormalScale","clearcoatTexture","clearcoatTextureInfo","TextureInfo","clearcoatRoughnessTexture","clearcoatRoughnessTextureInfo","clearcoatNormalTexture","clearcoatNormalTextureInfo","setClearcoatTexture","setClearcoatRoughnessTexture","setClearcoatNormalTexture","getClearcoatFactor","setClearcoatFactor","clearcoatFactor","getClearcoatTexture","getClearcoatTextureInfo","linkTexture","getClearcoatRoughnessFactor","setClearcoatRoughnessFactor","clearcoatRoughnessFactor","getClearcoatRoughnessTexture","getClearcoatRoughnessTextureInfo","getClearcoatNormalScale","setClearcoatNormalScale","clearcoatNormalScale","getClearcoatNormalTexture","getClearcoatNormalTextureInfo","GraphChild","MaterialsClearcoat","createClearcoat","textureDefs","materials","materialDef","materialIndex","clearcoat","clearcoatDef","textureInfoDef","setTextureInfo","scale","listMaterials","material","materialIndexMap","textureInfo","createTextureInfoDef","EmissiveStrength","_emissiveStrength","getEmissiveStrength","setEmissiveStrength","emissiveStrength","MaterialsEmissiveStrength","createEmissiveStrength","emissiveStrengthDef","IOR","_ior","getIOR","setIOR","ior","MaterialsIOR","createIOR","iorDef","A","PBRSpecularGlossiness","_diffuseFactor","_specularFactor","_glossinessFactor","diffuseTexture","diffuseTextureInfo","specularGlossinessTexture","specularGlossinessTextureInfo","setDiffuseTexture","setSpecularGlossinessTexture","getDiffuseFactor","setDiffuseFactor","diffuseFactor","getDiffuseHex","setDiffuseHex","getDiffuseTexture","getDiffuseTextureInfo","getSpecularFactor","setSpecularFactor","specularFactor","getGlossinessFactor","setGlossinessFactor","glossinessFactor","getSpecularGlossinessTexture","getSpecularGlossinessTextureInfo","MaterialsPBRSpecularGlossiness","createPBRSpecularGlossiness","specGloss","specGlossDef","Sheen","_sheenColorFactor","_sheenRoughnessFactor","sheenColorTexture","sheenColorTextureInfo","sheenRoughnessTexture","sheenRoughnessTextureInfo","setSheenColorTexture","setSheenRoughnessTexture","getSheenColorFactor","getSheenColorHex","setSheenColorFactor","sheenColorFactor","setSheenColorHex","getSheenColorTexture","getSheenColorTextureInfo","getSheenRoughnessFactor","setSheenRoughnessFactor","sheenRoughnessFactor","getSheenRoughnessTexture","getSheenRoughnessTextureInfo","MaterialsSheen","createSheen","sheen","sheenDef","Specular","_specularColorFactor","specularTexture","specularTextureInfo","specularColorTexture","specularColorTextureInfo","setSpecularTexture","setSpecularColorTexture","getSpecularColorFactor","setSpecularColorFactor","specularColorFactor","getSpecularColorHex","setSpecularColorHex","getSpecularTexture","getSpecularTextureInfo","getSpecularColorTexture","getSpecularColorTextureInfo","MaterialsSpecular","createSpecular","specular","specularDef","Transmission","_transmissionFactor","transmissionTexture","transmissionTextureInfo","setTransmissionTexture","getTransmissionFactor","setTransmissionFactor","transmissionFactor","getTransmissionTexture","getTransmissionTextureInfo","MaterialsTransmission","createTransmission","transmission","transmissionDef","Unlit","MaterialsUnlit","createUnlit","Mapping","variants","setMaterial","addVariant","getMaterial","variant","removeVariant","listVariants","MappingList","mappings","addMapping","mapping","removeMapping","listMappings","Variant","ROOT","MaterialsVariants","createMappingList","createVariant","createMapping","variantDef","meshIndex","primIndex","mappingList","variantPrimDef","mappingDef","variantIndex","variantDefs","variantIndexMap","createPropertyDef","mappingDefs","Volume","_thicknessFactor","_attenuationDistance","Infinity","_attenuationColor","thicknessTexture","thicknessTextureInfo","setThicknessTexture","getThicknessFactor","setThicknessFactor","thicknessFactor","getThicknessTexture","getThicknessTextureInfo","getAttenuationDistance","setAttenuationDistance","attenuationDistance","getAttenuationColor","setAttenuationColor","attenuationColor","getAttenuationColorHex","setAttenuationColorHex","MaterialsVolume","createVolume","volume","volumeDef","Number","isFinite","MeshQuantization","_","KTX2ImageUtils","container","readKTX","pixelWidth","pixelHeight","dfd","dataFormatDescriptor","colorModel","KTX2Model","ETC1S","samples","channelID","UASTC","getGPUByteLength","hasAlpha","uncompressedBytes","levels","level","uncompressedByteLength","floor","pow","TextureBasisu","Transform","TEXTURE_INFO","_offset","_rotation","_scale","_texCoord","getOffset","setOffset","getRotation","setRotation","rotation","getScale","setScale","getTexCoord","setTexCoord","texCoord","TextureTransform","createTransform","textureInfos","entries","transform","transformDef","textureInfoEntries","textureInfoDefMap","KHRONOS_EXTENSIONS","ALL_EXTENSIONS"],"mappings":"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"}