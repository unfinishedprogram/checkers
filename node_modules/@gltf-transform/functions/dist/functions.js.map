{"version":3,"file":"functions.js","sources":["../src/utils.ts","../src/center.ts","../src/colorspace.ts","../src/dedup.ts","../src/dequantize.ts","../src/inspect.ts","../src/instance.ts","../src/metal-rough.ts","../src/prune.ts","../src/partition.ts","../src/quantize.ts","../src/resample.ts","../src/reorder.ts","../src/sequence.ts","../src/tangents.ts","../src/texture-resize.ts","../src/unweld.ts","../src/weld.ts"],"sourcesContent":["import { NdArray } from 'ndarray';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport { Primitive, Texture, Transform, TransformContext } from '@gltf-transform/core';\n\n/**\n * Prepares a function used in an {@link Document.transform} pipeline. Use of this wrapper is\n * optional, and plain functions may be used in transform pipelines just as well. The wrapper is\n * used internally so earlier pipeline stages can detect and optimize based on later stages.\n */\nexport function createTransform(name: string, fn: Transform): Transform {\n\tObject.defineProperty(fn, 'name', { value: name });\n\treturn fn;\n}\n\nexport function isTransformPending(context: TransformContext | undefined, initial: string, pending: string): boolean {\n\tif (!context) return false;\n\tconst initialIndex = context.stack.lastIndexOf(initial);\n\tconst pendingIndex = context.stack.lastIndexOf(pending);\n\treturn initialIndex < pendingIndex;\n}\n\n/** Maps pixels from source to target textures, with a per-pixel callback. */\nexport async function rewriteTexture(\n\t\tsource: Texture,\n\t\ttarget: Texture,\n\t\tfn: (pixels: NdArray, i: number, j: number) => void): Promise<Texture|null> {\n\n\tif (!source) return null;\n\n\tconst srcImage = source.getImage();\n\tif (!srcImage) return null;\n\n\tconst pixels = await getPixels(new Uint8Array(srcImage), source.getMimeType());\n\n\tfor(let i = 0; i < pixels.shape[0]; ++i) {\n\t\tfor(let j = 0; j < pixels.shape[1]; ++j) {\n\t\t\tfn(pixels, i, j);\n\t\t}\n\t}\n\n\tconst dstImage = (await savePixels(pixels, 'image/png')).buffer;\n\treturn target.setImage(dstImage).setMimeType('image/png');\n}\n\nexport function getGLPrimitiveCount(prim: Primitive): number {\n\tconst indices = prim.getIndices();\n\tconst position = prim.getAttribute('POSITION')!;\n\n\t// Reference: https://www.khronos.org/opengl/wiki/Primitive\n\tswitch (prim.getMode()) {\n\t\tcase Primitive.Mode.POINTS:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINES:\n\t\t\treturn indices\n\t\t\t\t? indices.getCount() / 2\n\t\t\t\t: position.getCount() / 2;\n\t\tcase Primitive.Mode.LINE_LOOP:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINE_STRIP:\n\t\t\treturn position.getCount() - 1;\n\t\tcase Primitive.Mode.TRIANGLES:\n\t\t\treturn indices\n\t\t\t\t? indices.getCount() / 3\n\t\t\t\t: position.getCount() / 3;\n\t\tcase Primitive.Mode.TRIANGLE_STRIP:\n\t\tcase Primitive.Mode.TRIANGLE_FAN:\n\t\t\treturn position.getCount() - 2;\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected mode: ' + prim.getMode());\n\t}\n}\n\nexport class SetMap<K, V> {\n\tprivate _map = new Map<K, Set<V>>();\n\tpublic get size(): number {\n\t\treturn this._map.size;\n\t}\n\tpublic has(k: K): boolean {\n\t\treturn this._map.has(k);\n\t}\n\tpublic add(k: K, v: V): this {\n\t\tlet entry = this._map.get(k);\n\t\tif (!entry) {\n\t\t\tentry = new Set();\n\t\t\tthis._map.set(k, entry);\n\t\t}\n\t\tentry.add(v);\n\t\treturn this;\n\t}\n\tpublic get(k: K): Set<V> {\n\t\treturn this._map.get(k) || new Set();\n\t}\n\tpublic keys(): Iterable<K> {\n\t\treturn this._map.keys();\n\t}\n}\n","import { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { bounds } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'center';\n\n/** Options for the {@link center} function. */\nexport interface CenterOptions {\n\t/** Location on the model to be considered the pivot, and recentered at the origin. */\n\tpivot?: 'center' | 'above' | 'below' | vec3;\n}\n\nconst CENTER_DEFAULTS: Required<CenterOptions> = {pivot: 'center'};\n\n/**\n * Centers the {@link Scene} at the origin, or above/below it. Transformations from animation,\n * skinning, and morph targets are not taken into account.\n *\n * Example:\n *\n * ```ts\n * await document.transform(center({pivot: 'below'}));\n * ```\n */\nexport function center (_options: CenterOptions = CENTER_DEFAULTS): Transform {\n\tconst options = {...CENTER_DEFAULTS, ..._options} as Required<CenterOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst isAnimated = root.listAnimations().length > 0 || root.listSkins().length > 0;\n\n\t\tdoc.getRoot().listScenes().forEach((scene, index) => {\n\t\t\tlogger.debug(`${NAME}: Scene ${index + 1} / ${root.listScenes().length}.`);\n\n\t\t\tlet pivot: vec3;\n\t\t\tif (typeof options.pivot === 'string') {\n\t\t\t\tconst bbox = bounds(scene);\n\t\t\t\tpivot = [\n\t\t\t\t\t(bbox.max[0] - bbox.min[0]) / 2 + bbox.min[0],\n\t\t\t\t\t(bbox.max[1] - bbox.min[1]) / 2 + bbox.min[1],\n\t\t\t\t\t(bbox.max[2] - bbox.min[2]) / 2 + bbox.min[2],\n\t\t\t\t];\n\t\t\t\tif (options.pivot === 'above') pivot[1] = bbox.max[1];\n\t\t\t\tif (options.pivot === 'below') pivot[1] = bbox.min[1];\n\t\t\t} else {\n\t\t\t\tpivot = options.pivot as vec3;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Pivot \"${pivot.join(', ')}\".`);\n\n\t\t\tconst offset: vec3 = [-1 * pivot[0], -1 * pivot[1], -1 * pivot[2]];\n\n\t\t\tif (isAnimated) {\n\t\t\t\tlogger.debug(`${NAME}: Model contains animation or skin. Adding a wrapper node.`);\n\t\t\t\tconst offsetNode = doc.createNode('Pivot').setTranslation(offset);\n\t\t\t\tscene.listChildren().forEach((child) => offsetNode.addChild(child));\n\t\t\t\tscene.addChild(offsetNode);\n\t\t\t} else {\n\t\t\t\tlogger.debug(`${NAME}: Skipping wrapper, offsetting all root nodes.`);\n\t\t\t\tscene.listChildren().forEach((child) => {\n\t\t\t\t\tconst t = child.getTranslation();\n\t\t\t\t\tchild.setTranslation([\n\t\t\t\t\t\tt[0] + offset[0],\n\t\t\t\t\t\tt[1] + offset[1],\n\t\t\t\t\t\tt[2] + offset[2],\n\t\t\t\t\t]);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n};\n","import { Accessor, Document, Primitive, Transform, vec3 } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'colorspace';\n\n/** Options for the {@link colorspace} function. */\nexport interface ColorspaceOptions {\n\t/** Must be `\"sRGB\"`. Required. */\n    inputEncoding: string;\n}\n\n/**\n * Vertex color colorspace correction. The glTF format requires vertex colors to be stored\n * as linear values, and this function provides a way to correct vertex colors that are\n * (incorrectly) sRGB.\n */\nexport function colorspace (options: ColorspaceOptions): Transform {\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.inputEncoding === 'linear') {\n\t\t\tlogger.info(`${NAME}: Vertex colors already linear. Skipping conversion.`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.inputEncoding !== 'sRGB') {\n\t\t\tlogger.error(\n\t\t\t\t`${NAME}: Unknown input encoding \"${options.inputEncoding}\" – should be \"sRGB\" or `\n\t\t\t\t+ '\"linear\". Skipping conversion.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst converted = new Set<Accessor>();\n\n\t\t// Source: THREE.Color\n\t\tfunction sRGBToLinear( c: number ): number {\n\n\t\t\treturn ( c < 0.04045 )\n\t\t\t\t? c * 0.0773993808\n\t\t\t\t: Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t\t}\n\n\t\tfunction updatePrimitive(primitive: Primitive): void {\n\t\t\tconst color = [0, 0, 0] as vec3;\n\t\t\tlet attribute: Accessor | null;\n\t\t\tfor (let i = 0; (attribute = primitive.getAttribute(`COLOR_${i}`)); i++) {\n\t\t\t\tif (converted.has(attribute)) continue;\n\n\t\t\t\tfor (let j = 0; j < attribute.getCount(); j++) {\n\t\t\t\t\tattribute.getElement(j, color);\n\t\t\t\t\tcolor[0] = sRGBToLinear(color[0]);\n\t\t\t\t\tcolor[1] = sRGBToLinear(color[1]);\n\t\t\t\t\tcolor[2] = sRGBToLinear(color[2]);\n\t\t\t\t\tattribute.setElement(j, color);\n\t\t\t\t}\n\n\t\t\t\tconverted.add(attribute);\n\t\t\t}\n\t\t}\n\n\t\tdoc.getRoot()\n\t\t\t.listMeshes()\n\t\t\t.forEach((mesh) => mesh.listPrimitives().forEach(updatePrimitive));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n};\n","import { Accessor, BufferUtils, Document, Logger, Material, Mesh, Primitive, PrimitiveTarget, PropertyType, Root, Texture, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'dedup';\n\nexport interface DedupOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes: string[];\n}\n\nconst DEDUP_DEFAULTS: Required<DedupOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.MESH,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.MATERIAL,\n\t],\n};\n\n/**\n * Removes duplicate {@link Accessor}, {@link Mesh}, {@link Texture}, and {@link Material}\n * properties. Partially based on a\n * [gist by mattdesl](https://gist.github.com/mattdesl/aea40285e2d73916b6b9101b36d84da8). Only\n * accessors in mesh primitives, morph targets, and animation samplers are processed.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listMeshes(); // → [Mesh, Mesh, Mesh]\n *\n * await document.transform(dedup({propertyTypes: [PropertyType.MESH]}));\n *\n * document.getRoot().listMeshes(); // → [Mesh]\n * ```\n */\nexport const dedup = function (_options: DedupOptions = DEDUP_DEFAULTS): Transform {\n\tconst options = {...DEDUP_DEFAULTS, ..._options} as Required<DedupOptions>;\n\n\tconst propertyTypes = new Set(options.propertyTypes);\n\tfor (const propertyType of options.propertyTypes) {\n\t\tif (!DEDUP_DEFAULTS.propertyTypes.includes(propertyType)) {\n\t\t\tthrow new Error(`${NAME}: Unsupported deduplication on type \"${propertyType}\".`);\n\t\t}\n\t}\n\n\treturn createTransform(NAME, (doc: Document): void =>  {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) dedupAccessors(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.MESH)) dedupMeshes(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) dedupImages(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) dedupMaterials(logger, doc);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n};\n\nfunction dedupAccessors(logger: Logger, doc: Document): void {\n\t// Find all accessors used for mesh data.\n\tconst indicesAccessors: Set<Accessor> = new Set();\n\tconst attributeAccessors: Set<Accessor> = new Set();\n\tconst inputAccessors: Set<Accessor> = new Set();\n\tconst outputAccessors: Set<Accessor> = new Set();\n\n\tconst meshes = doc.getRoot().listMeshes();\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => (attributeAccessors.add(accessor)));\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices) indicesAccessors.add(indices);\n\t\t});\n\t});\n\n\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input) inputAccessors.add(input);\n\t\t\tif (output) outputAccessors.add(output);\n\t\t}\n\t}\n\n\t// Find duplicate accessors of a given type.\n\tfunction detectDuplicates(accessors: Accessor[]): Map<Accessor, Accessor> {\n\t\tconst duplicateAccessors: Map<Accessor, Accessor> = new Map();\n\n\t\tfor (let i = 0; i < accessors.length; i++) {\n\t\t\tconst a = accessors[i];\n\t\t\tconst aData = a.getArray()!.slice().buffer;\n\n\t\t\tif (duplicateAccessors.has(a)) continue;\n\n\t\t\tfor (let j = 0; j < accessors.length; j++) {\n\t\t\t\tconst b = accessors[j];\n\n\t\t\t\tif (a === b) continue;\n\t\t\t\tif (duplicateAccessors.has(b)) continue;\n\n\t\t\t\tif (a.getType() !== b.getType()) continue;\n\t\t\t\tif (a.getComponentType() !== b.getComponentType()) continue;\n\t\t\t\tif (a.getCount() !== b.getCount()) continue;\n\t\t\t\tif (a.getNormalized() !== b.getNormalized()) continue;\n\t\t\t\tif (BufferUtils.equals(aData, b.getArray()!.slice().buffer)) {\n\t\t\t\t\tduplicateAccessors.set(b, a);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn duplicateAccessors;\n\t}\n\n\tconst duplicateIndices = detectDuplicates(Array.from(indicesAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateIndices.size} duplicates among ${indicesAccessors.size} indices.`\n\t);\n\n\tconst duplicateAttributes = detectDuplicates(Array.from(attributeAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateAttributes.size} duplicates among ${attributeAccessors.size}`\n\t\t+ ' attributes.'\n\t);\n\n\tconst duplicateInputs = detectDuplicates(Array.from(inputAccessors));\n\tconst duplicateOutputs = detectDuplicates(Array.from(outputAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateInputs.size + duplicateOutputs.size} duplicates among`\n\t\t+ ` ${inputAccessors.size + outputAccessors.size} animation accessors.`\n\t);\n\n\t// Dissolve duplicate vertex attributes and indices.\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => {\n\t\t\t\tif (duplicateAttributes.has(accessor)) {\n\t\t\t\t\tprimitive.swap(accessor, duplicateAttributes.get(accessor) as Accessor);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices && duplicateIndices.has(indices)) {\n\t\t\t\tprimitive.swap(indices, duplicateIndices.get(indices) as Accessor);\n\t\t\t}\n\t\t});\n\t});\n\tArray.from(duplicateIndices.keys()).forEach((indices) => indices.dispose());\n\tArray.from(duplicateAttributes.keys()).forEach((attribute) => attribute.dispose());\n\n\t// Dissolve duplicate animation sampler inputs and outputs.\n\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input && duplicateInputs.has(input)) {\n\t\t\t\tsampler.swap(input, duplicateInputs.get(input) as Accessor);\n\t\t\t}\n\t\t\tif (output && duplicateOutputs.has(output)) {\n\t\t\t\tsampler.swap(output, duplicateOutputs.get(output) as Accessor);\n\t\t\t}\n\t\t}\n\t}\n\tArray.from(duplicateInputs.keys()).forEach((input) => input.dispose());\n\tArray.from(duplicateOutputs.keys()).forEach((output) => output.dispose());\n}\n\nfunction dedupMeshes(logger: Logger, doc: Document): void {\n\tconst root = doc.getRoot();\n\n\t// Create Reference -> ID lookup table.\n\tconst refs = new Map<Accessor|Material, number>();\n\troot.listAccessors().forEach((accessor, index) => refs.set(accessor, index));\n\troot.listMaterials().forEach((material, index) => refs.set(material, index));\n\n\t// For each mesh, create a hashkey.\n\tconst numMeshes = root.listMeshes().length;\n\tconst uniqueMeshes = new Map<string, Mesh>();\n\tfor (const src of root.listMeshes()) {\n\t\t// For each mesh, create a hashkey.\n\t\tconst srcKeyItems = [];\n\t\tfor (const prim of src.listPrimitives()) {\n\t\t\tsrcKeyItems.push(createPrimitiveKey(prim, refs));\n\t\t}\n\n\t\t// If another mesh exists with the same key, replace all instances with that, and dispose\n\t\t// of the duplicate. If not, just cache it.\n\t\tconst meshKey = srcKeyItems.join(';');\n\t\tif (uniqueMeshes.has(meshKey)) {\n\t\t\tconst targetMesh = uniqueMeshes.get(meshKey)!;\n\t\t\tsrc.listParents().forEach((parent) => {\n\t\t\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\t\t\tparent.swap(src, targetMesh);\n\t\t\t\t}\n\t\t\t});\n\t\t\tsrc.dispose();\n\t\t} else {\n\t\t\tuniqueMeshes.set(meshKey, src);\n\t\t}\n\t}\n\n\tlogger.debug(\n\t\t`${NAME}: Found ${numMeshes - uniqueMeshes.size} duplicates among ${numMeshes} meshes.`\n\t);\n}\n\nfunction dedupImages(logger: Logger, doc: Document): void {\n\tconst root = doc.getRoot();\n\tconst textures = root.listTextures();\n\tconst duplicates: Map<Texture, Texture> = new Map();\n\n\t// Compare each texture to every other texture — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < textures.length; i++) {\n\t\tconst a = textures[i];\n\t\tconst aData = a.getImage();\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = 0; j < textures.length; j++) {\n\t\t\tconst b = textures[j];\n\t\t\tconst bData = b.getImage();\n\n\t\t\tif (a === b) continue;\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// URIs are intentionally not compared.\n\t\t\tif (a.getMimeType() !== b.getMimeType()) continue;\n\n\t\t\tconst aSize = a.getSize();\n\t\t\tconst bSize = b.getSize();\n\t\t\tif (!aSize || !bSize) continue;\n\t\t\tif (aSize[0] !== bSize[0]) continue;\n\t\t\tif (aSize[1] !== bSize[1]) continue;\n\t\t\tif (!aData || !bData) continue;\n\t\t\tif (BufferUtils.equals(aData, bData)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicates.size} duplicates among ${root.listTextures().length} textures.`\n\t);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupMaterials(logger: Logger, doc: Document): void {\n\tconst root = doc.getRoot();\n\tconst materials = root.listMaterials();\n\tconst duplicates: Map<Material, Material> = new Map();\n\n\t// Compare each material to every other material — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < materials.length; i++){\n\t\tconst a = materials[i];\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = 0; j < materials.length; j++){\n\t\t\tconst b = materials[j];\n\n\t\t\tif (a === b) continue;\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\tif (a.equals(b)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(\n\t\t// eslint-disable-next-line max-len\n\t\t`${NAME}: Found ${duplicates.size} duplicates among ${root.listMaterials().length} materials.`\n\t);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\n/** Generates a key unique to the content of a primitive or target. */\nfunction createPrimitiveKey(\n\tprim: Primitive | PrimitiveTarget,\n\trefs: Map<Accessor|Material, number>\n): string {\n\tconst primKeyItems = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tprimKeyItems.push(semantic + ':' + refs.get(attribute));\n\t}\n\tif (prim instanceof Primitive) {\n\t\tconst indices = prim.getIndices();\n\t\tif (indices) {\n\t\t\tprimKeyItems.push('indices:' + refs.get(indices));\n\t\t}\n\t\tconst material = prim.getMaterial();\n\t\tif (material) {\n\t\t\tprimKeyItems.push('material:' + refs.get(material));\n\t\t}\n\t\tprimKeyItems.push('mode:' + prim.getMode());\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tprimKeyItems.push('target:' + createPrimitiveKey(target, refs));\n\t\t}\n\t}\n\treturn primKeyItems.join(',');\n}\n","import { Accessor, Document, Primitive, Transform } from '@gltf-transform/core';\nimport { MeshQuantization } from '@gltf-transform/extensions';\nimport { createTransform } from './utils';\n\nconst NAME = 'dequantize';\n\n/** Options for the {@link dequantize} function. */\nexport interface DequantizeOptions {\n\t/**\n\t * Pattern (regex) used to filter vertex attribute semantics for quantization.\n\t * Default: `/^((?!JOINTS_).)*$/`.\n\t */\n\tpattern?: RegExp;\n}\n\nconst DEQUANTIZE_DEFAULTS: DequantizeOptions = {\n\tpattern: /^((?!JOINTS_).)*$/,\n};\n\n/**\n * Dequantize {@link Primitive Primitives}, removing {@link MeshQuantization `KHR_mesh_quantization`}\n * if present. Dequantization will increase the size of the mesh on disk and in memory, but may be\n * necessary for compatibility with applications that don't support quantization.\n */\nexport function dequantize(_options: DequantizeOptions = DEQUANTIZE_DEFAULTS): Transform {\n\tconst options = {...DEQUANTIZE_DEFAULTS, ..._options} as Required<DequantizeOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tdequantizePrimitive(prim, options);\n\t\t\t}\n\t\t}\n\t\tdoc.createExtension(MeshQuantization).dispose();\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction dequantizePrimitive(prim: Primitive, options: Required<DequantizeOptions>): void {\n\tfor (const semantic of prim.listSemantics()) {\n\t\tdequantizeAttribute(semantic, prim.getAttribute(semantic)!, options);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const semantic of target.listSemantics()) {\n\t\t\tdequantizeAttribute(semantic, target.getAttribute(semantic)!, options);\n\t\t}\n\t}\n}\n\nfunction dequantizeAttribute(semantic: string, attribute: Accessor, options: Required<DequantizeOptions>): void {\n\tif (!attribute.getArray()) return;\n\tif (!options.pattern.test(semantic)) return;\n\tif (attribute.getComponentSize() >= 4) return;\n\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = new Float32Array(srcArray.length);\n\n\tfor (let i = 0, il = attribute.getCount(), el = [] as number[]; i < il; i++) {\n\t\tel = attribute.getElement(i, el);\n\t\tattribute.setArray(dstArray).setElement(i, el).setArray(srcArray);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n","import { Accessor, Document, ExtensionProperty, GLTF, ImageUtils, Texture, TypedArray, bounds } from '@gltf-transform/core';\nimport { getGLPrimitiveCount } from './utils';\n\n/** Inspects the contents of a glTF file and returns a JSON report. */\nexport function inspect (doc: Document): InspectReport {\n\treturn {\n\t\tscenes: listScenes(doc),\n\t\tmeshes: listMeshes(doc),\n\t\tmaterials: listMaterials(doc),\n\t\ttextures: listTextures(doc),\n\t\tanimations: listAnimations(doc),\n\t};\n}\n\n/** List scenes. */\nfunction listScenes (doc: Document): InspectPropertyReport<InspectSceneReport> {\n\tconst scenes = doc.getRoot().listScenes().map((scene) => {\n\t\tconst root = scene.listChildren()[0];\n\t\tconst sceneBounds = bounds(scene);\n\t\treturn {\n\t\t\tname: scene.getName(),\n\t\t\trootName: root ? root.getName() : '',\n\t\t\tbboxMin: toPrecision(sceneBounds.min),\n\t\t\tbboxMax: toPrecision(sceneBounds.max),\n\t\t};\n\t});\n\treturn {properties: scenes};\n}\n\n/** List meshes. */\nfunction listMeshes (doc: Document): InspectPropertyReport<InspectMeshReport> {\n\tconst meshes: InspectMeshReport[] = doc.getRoot().listMeshes().map((mesh) => {\n\t\tconst instances = mesh.listParents()\n\t\t\t.filter((parent) => parent.propertyType !== 'Root')\n\t\t\t.length;\n\t\tlet glPrimitives = 0;\n\t\tlet verts = 0;\n\t\tconst semantics = new Set<string>();\n\t\tconst meshIndices = new Set<string>();\n\t\tconst meshAccessors: Set<Accessor> = new Set();\n\n\t\tmesh.listPrimitives().forEach((prim) => {\n\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\tconst attr = prim.getAttribute(semantic)!;\n\t\t\t\tsemantics.add(semantic + ':' + arrayToType(attr.getArray()!));\n\t\t\t\tmeshAccessors.add(attr);\n\t\t\t}\n\t\t\tfor (const targ of prim.listTargets()) {\n\t\t\t\ttarg.listAttributes().forEach((attr) => meshAccessors.add(attr));\n\t\t\t}\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (indices) {\n\t\t\t\tmeshIndices.add(arrayToType(indices.getArray()!));\n\t\t\t\tmeshAccessors.add(indices);\n\t\t\t}\n\t\t\tverts += prim.listAttributes()[0].getCount();\n\t\t\tglPrimitives += getGLPrimitiveCount(prim);\n\t\t});\n\n\t\tlet size = 0;\n\t\tArray.from(meshAccessors).forEach((a) => (size += a.getArray()!.byteLength));\n\n\t\tconst modes = mesh.listPrimitives()\n\t\t\t.map((prim) => MeshPrimitiveModeLabels[prim.getMode()]);\n\n\t\treturn {\n\t\t\tname: mesh.getName(),\n\t\t\tmode: Array.from(new Set(modes)),\n\t\t\tprimitives: mesh.listPrimitives().length,\n\t\t\tglPrimitives: glPrimitives,\n\t\t\tvertices: verts,\n\t\t\tindices: Array.from(meshIndices).sort(),\n\t\t\tattributes: Array.from(semantics).sort(),\n\t\t\tinstances: instances,\n\t\t\tsize: size,\n\t\t};\n\t});\n\n\treturn {properties: meshes};\n}\n\n/** List materials. */\nfunction listMaterials (doc: Document): InspectPropertyReport<InspectMaterialReport> {\n\tconst materials: InspectMaterialReport[] = doc.getRoot().listMaterials().map((material) => {\n\t\tconst instances = material.listParents()\n\t\t\t.filter((parent) => parent.propertyType !== 'Root')\n\t\t\t.length;\n\n\t\t// Find all texture slots attached to this material or its extensions.\n\t\tconst extensions = new Set<ExtensionProperty>(material.listExtensions());\n\t\tconst slots = doc.getGraph().getLinks()\n\t\t\t.filter((link) => {\n\t\t\t\tconst child = link.getChild();\n\t\t\t\tconst parent = link.getParent();\n\t\t\t\tif (child instanceof Texture && parent === material) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (child instanceof Texture\n\t\t\t\t\t\t&& parent instanceof ExtensionProperty\n\t\t\t\t\t\t&& extensions.has(parent)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t})\n\t\t\t.map((link) => link.getName());\n\n\t\treturn {\n\t\t\tname: material.getName(),\n\t\t\tinstances,\n\t\t\ttextures: slots,\n\t\t\talphaMode: material.getAlphaMode(),\n\t\t\tdoubleSided: material.getDoubleSided(),\n\t\t};\n\t});\n\n\treturn {properties: materials};\n}\n\n/** List textures. */\nfunction listTextures (doc: Document): InspectPropertyReport<InspectTextureReport> {\n\tconst textures: InspectTextureReport[] = doc.getRoot().listTextures().map((texture) => {\n\t\tconst instances = texture.listParents()\n\t\t\t.filter((parent) => parent.propertyType !== 'Root')\n\t\t\t.length;\n\n\t\tconst slots = doc.getGraph().listParentLinks(texture)\n\t\t\t.map((link) => link.getName())\n\t\t\t.filter((name) => name !== 'texture');\n\n\t\tconst resolution = ImageUtils.getSize(texture.getImage()!, texture.getMimeType());\n\n\t\treturn {\n\t\t\tname: texture.getName(),\n\t\t\turi: texture.getURI(),\n\t\t\tslots: Array.from(new Set(slots)),\n\t\t\tinstances,\n\t\t\tmimeType: texture.getMimeType(),\n\t\t\tresolution: resolution ? resolution.join('x') : '',\n\t\t\tsize: texture.getImage()!.byteLength,\n\t\t\tgpuSize: ImageUtils.getMemSize(texture.getImage()!, texture.getMimeType()),\n\t\t};\n\t});\n\n\treturn {properties: textures};\n}\n\n/** List animations. */\nfunction listAnimations (doc: Document): InspectPropertyReport<InspectAnimationReport> {\n\tconst animations: InspectAnimationReport[] = doc.getRoot().listAnimations().map((anim) => {\n\t\tlet minTime = Infinity;\n\t\tlet maxTime = -Infinity;\n\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\tconst input = sampler.getInput();\n\t\t\tif (!input) return;\n\t\t\tminTime = Math.min(minTime, input.getMin([])[0]);\n\t\t\tmaxTime = Math.max(maxTime, input.getMax([])[0]);\n\t\t});\n\n\t\tlet size = 0;\n\t\tlet keyframes = 0;\n\t\tconst accessors: Set<Accessor> = new Set();\n\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (!input) return;\n\t\t\tkeyframes += input.getCount();\n\t\t\taccessors.add(input);\n\t\t\tif (!output) return;\n\t\t\taccessors.add(output);\n\t\t});\n\t\tArray.from(accessors).forEach((accessor) => {\n\t\t\tsize += accessor.getArray()!.byteLength;\n\t\t});\n\n\t\treturn {\n\t\t\tname: anim.getName(),\n\t\t\tchannels: anim.listChannels().length,\n\t\t\tsamplers: anim.listSamplers().length,\n\t\t\tduration: Math.round((maxTime - minTime) * 1000) / 1000,\n\t\t\tkeyframes: keyframes,\n\t\t\tsize: size,\n\t\t};\n\t});\n\n\treturn {properties: animations};\n}\n\nexport interface InspectReport {\n\tscenes: InspectPropertyReport<InspectSceneReport>;\n\tmeshes: InspectPropertyReport<InspectMeshReport>;\n\tmaterials: InspectPropertyReport<InspectMaterialReport>;\n\ttextures: InspectPropertyReport<InspectTextureReport>;\n\tanimations: InspectPropertyReport<InspectAnimationReport>;\n}\n\nexport interface InspectPropertyReport<T> {\n\tproperties: T[];\n\terrors?: string[];\n\twarnings?: string[];\n}\n\nexport interface InspectSceneReport {\n\tname: string;\n\trootName: string;\n\tbboxMin: number[];\n\tbboxMax: number[];\n}\n\nexport interface InspectMeshReport {\n\tname: string;\n\tprimitives: number;\n\tmode: string[];\n\tvertices: number;\n\tglPrimitives: number;\n\tindices: string[];\n\tattributes: string[];\n\tinstances: number;\n\tsize: number;\n}\n\nexport interface InspectMaterialReport {\n\tname: string;\n\tinstances: number;\n\ttextures: string[];\n\talphaMode: GLTF.MaterialAlphaMode;\n\tdoubleSided: boolean;\n}\n\nexport interface InspectTextureReport {\n\tname: string;\n\turi: string;\n\tslots: string[];\n\tinstances: number;\n\tmimeType: string;\n\tresolution: string;\n\tsize: number;\n\tgpuSize: number | null;\n}\n\nexport interface InspectAnimationReport {\n\tname: string;\n\tchannels: number;\n\tsamplers: number;\n\tkeyframes: number;\n\tduration: number;\n\tsize: number;\n}\n\nconst MeshPrimitiveModeLabels = [\n\t'POINTS',\n\t'LINES',\n\t'LINE_LOOP',\n\t'LINE_STRIP',\n\t'TRIANGLES',\n\t'TRIANGLE_STRIP',\n\t'TRIANGLE_FAN',\n];\n\n/** Maps values in a vector to a finite precision. */\nfunction toPrecision(v: number[]): number[] {\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif ((v[i] as number).toFixed) v[i] = Number(v[i].toFixed(5));\n\t}\n\treturn v;\n}\n\nfunction arrayToType(array: TypedArray): string {\n\treturn array.constructor.name.replace('Array', '').toLowerCase();\n}\n","import { Document, Logger, MathUtils, Mesh, Node, Transform, vec3, vec4 } from '@gltf-transform/core';\nimport { InstancedMesh, MeshGPUInstancing } from '@gltf-transform/extensions';\nimport { createTransform } from './utils';\n\nconst NAME = 'instance';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface InstanceOptions {}\n\nconst INSTANCE_DEFAULTS: Required<InstanceOptions> = {};\n\n/**\n * Creates GPU instances (with `EXT_mesh_gpu_instancing`) for shared {@link Mesh} references. No\n * options are currently implemented for this function.\n */\nexport function instance (_options: InstanceOptions = INSTANCE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...INSTANCE_DEFAULTS, ..._options} as Required<InstanceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst batchExtension = doc.createExtension(MeshGPUInstancing);\n\n\t\tif (root.listAnimations().length) {\n\t\t\tthrow new Error(`${NAME}: Instancing is not currently supported for animated models.`);\n\t\t}\n\n\t\tlet numBatches = 0;\n\t\tlet numInstances = 0;\n\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t// Gather a one-to-many Mesh/Node mapping, identifying what we can instance.\n\t\t\tconst meshInstances = new Map<Mesh, Set<Node>>();\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst mesh = node.getMesh();\n\t\t\t\tif (!mesh) return;\n\t\t\t\tmeshInstances.set(mesh, (meshInstances.get(mesh) || new Set<Node>()).add(node));\n\t\t\t});\n\n\t\t\t// For each Mesh, create an InstancedMesh and collect transforms.\n\t\t\tconst modifiedNodes = [];\n\t\t\tfor (const mesh of Array.from(meshInstances.keys())) {\n\t\t\t\tconst nodes = Array.from(meshInstances.get(mesh)!);\n\t\t\t\tif (nodes.length < 2) continue;\n\t\t\t\tif (nodes.some((node) => node.getSkin())) continue;\n\n\t\t\t\tconst batch = createBatch(doc, batchExtension, mesh, nodes.length);\n\t\t\t\tconst batchTranslation = batch.getAttribute('TRANSLATION')!;\n\t\t\t\tconst batchRotation = batch.getAttribute('ROTATION')!;\n\t\t\t\tconst batchScale = batch.getAttribute('SCALE')!;\n\n\t\t\t\tconst batchNode = doc.createNode()\n\t\t\t\t\t.setMesh(mesh)\n\t\t\t\t\t.setExtension('EXT_mesh_gpu_instancing', batch);\n\t\t\t\tscene.addChild(batchNode);\n\n\t\t\t\tlet needsTranslation = false;\n\t\t\t\tlet needsRotation = false;\n\t\t\t\tlet needsScale = false;\n\n\t\t\t\t// For each Node, write TRS properties into instance attributes.\n\t\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\t\tlet t: vec3, r: vec4, s: vec3;\n\t\t\t\t\tconst node = nodes[i];\n\n\t\t\t\t\tbatchTranslation.setElement(i, t = node.getWorldTranslation());\n\t\t\t\t\tbatchRotation.setElement(i, r = node.getWorldRotation());\n\t\t\t\t\tbatchScale.setElement(i, s = node.getWorldScale());\n\n\t\t\t\t\tif (!MathUtils.eq(t, [0, 0, 0])) needsTranslation = true;\n\t\t\t\t\tif (!MathUtils.eq(r, [0, 0, 0, 1])) needsRotation = true;\n\t\t\t\t\tif (!MathUtils.eq(s, [1, 1, 1])) needsScale = true;\n\n\t\t\t\t\t// Mark the node for cleanup.\n\t\t\t\t\tnode.setMesh(null);\n\t\t\t\t\tmodifiedNodes.push(node);\n\t\t\t\t}\n\n\t\t\t\tif (!needsTranslation) batchTranslation.dispose();\n\t\t\t\tif (!needsRotation) batchRotation.dispose();\n\t\t\t\tif (!needsScale) batchScale.dispose();\n\n\t\t\t\tpruneUnusedNodes(modifiedNodes, logger);\n\n\t\t\t\tnumBatches++;\n\t\t\t\tnumInstances += nodes.length;\n\t\t\t}\n\t\t}\n\n\t\tif (numBatches > 0) {\n\t\t\tlogger.info(\n\t\t\t\t`${NAME}: Created ${numBatches} batches, with ${numInstances} total instances.`\n\t\t\t);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No meshes with multiple parent nodes were found.`);\n\t\t\tbatchExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n}\n\nfunction pruneUnusedNodes(nodes: Node[], logger: Logger): void {\n\tlet node: Node | undefined;\n\tlet unusedNodes = 0;\n\twhile ((node = nodes.pop())) {\n\t\tif (node.listChildren().length\n\t\t\t\t|| node.getCamera()\n\t\t\t\t|| node.getMesh()\n\t\t\t\t|| node.getSkin()\n\t\t\t\t|| node.listExtensions().length) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst nodeParent = node.getParent();\n\t\tif (nodeParent instanceof Node) {\n\t\t\tnodes.push(nodeParent);\n\t\t}\n\t\tnode.dispose();\n\t\tunusedNodes++;\n\t}\n\n\tlogger.debug(`${NAME}: Removed ${unusedNodes} unused nodes.`);\n}\n\nfunction createBatch(\n\t\tdoc: Document,\n\t\tbatchExtension: MeshGPUInstancing,\n\t\tmesh: Mesh,\n\t\tcount: number): InstancedMesh {\n\tconst buffer = mesh.listPrimitives()[0].getAttribute('POSITION')!.getBuffer();\n\n\tconst batchTranslation = doc.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\tconst batchRotation = doc.createAccessor()\n\t\t.setType('VEC4')\n\t\t.setArray(new Float32Array(4 * count))\n\t\t.setBuffer(buffer);\n\tconst batchScale = doc.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\n\treturn batchExtension.createInstancedMesh()\n\t\t.setAttribute('TRANSLATION', batchTranslation)\n\t\t.setAttribute('ROTATION', batchRotation)\n\t\t.setAttribute('SCALE', batchScale);\n}\n","import { Document, Texture, Transform } from '@gltf-transform/core';\nimport { MaterialsIOR, MaterialsPBRSpecularGlossiness, MaterialsSpecular, PBRSpecularGlossiness } from '@gltf-transform/extensions';\nimport { createTransform, rewriteTexture } from './utils';\n\nconst NAME = 'metalRough';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MetalRoughOptions {}\n\nconst METALROUGH_DEFAULTS: Required<MetalRoughOptions> = {};\n\n/**\n * Convert {@link Material}s from spec/gloss PBR workflow to metal/rough PBR workflow,\n * removing `KHR_materials_pbrSpecularGlossiness` and adding `KHR_materials_ior` and\n * `KHR_materials_specular`. The metal/rough PBR workflow is preferred for most use cases,\n * and is a prerequisite for other advanced PBR extensions provided by glTF.\n *\n * No options are currently implemented for this function.\n */\nexport function metalRough (_options: MetalRoughOptions = METALROUGH_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...METALROUGH_DEFAULTS, ..._options} as Required<MetalRoughOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\n\t\tconst logger = doc.getLogger();\n\n\t\tconst extensionsUsed = doc.getRoot().listExtensionsUsed().map((ext) => ext.extensionName);\n\t\tif (!extensionsUsed.includes('KHR_materials_pbrSpecularGlossiness')) {\n\t\t\tlogger.warn(`${NAME}: KHR_materials_pbrSpecularGlossiness not found on document.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst iorExtension = doc.createExtension(MaterialsIOR);\n\t\tconst specExtension = doc.createExtension(MaterialsSpecular);\n\t\tconst specGlossExtension = doc.createExtension(MaterialsPBRSpecularGlossiness);\n\n\t\tconst inputTextures = new Set<Texture | null>();\n\n\t\tfor (const material of doc.getRoot().listMaterials()) {\n\t\t\tconst specGloss = material\n\t\t\t\t.getExtension<PBRSpecularGlossiness>('KHR_materials_pbrSpecularGlossiness');\n\t\t\tif (!specGloss) continue;\n\n\t\t\t// Create specular extension.\n\t\t\tconst specular = specExtension.createSpecular()\n\t\t\t\t.setSpecularFactor(1.0)\n\t\t\t\t.setSpecularColorFactor(specGloss.getSpecularFactor());\n\n\t\t\t// Stash textures that might become unused, to check and clean up later.\n\t\t\tinputTextures.add(specGloss.getSpecularGlossinessTexture());\n\t\t\tinputTextures.add(material.getBaseColorTexture());\n\t\t\tinputTextures.add(material.getMetallicRoughnessTexture());\n\n\t\t\t// Set up a metal/rough PBR material with IOR=Infinity (or 0), metallic=0. This\n\t\t\t// representation is precise and reliable, but perhaps less convenient for artists\n\t\t\t// than deriving a metalness value. Unfortunately we can't do that without imprecise\n\t\t\t// heuristics, and perhaps user tuning.\n\t\t\t// See: https://github.com/KhronosGroup/glTF/pull/1719#issuecomment-674365677\n\t\t\tmaterial\n\t\t\t\t.setBaseColorFactor(specGloss.getDiffuseFactor())\n\t\t\t\t.setMetallicFactor(0)\n\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t.setExtension('KHR_materials_ior', iorExtension.createIOR().setIOR(1000))\n\t\t\t\t.setExtension('KHR_materials_specular', specular);\n\n\t\t\t// Move diffuse -> baseColor.\n\t\t\tconst diffuseTexture = specGloss.getDiffuseTexture();\n\t\t\tif (diffuseTexture) {\n\t\t\t\tmaterial.setBaseColorTexture(diffuseTexture);\n\t\t\t\tmaterial.getBaseColorTextureInfo()!.copy(specGloss.getDiffuseTextureInfo()!);\n\t\t\t}\n\n\t\t\t// Move specular + gloss -> specular + roughness.\n\t\t\tconst sgTexture = specGloss.getSpecularGlossinessTexture();\n\t\t\tif (sgTexture) {\n\t\t\t\t// specularGlossiness -> specular.\n\t\t\t\tconst sgTextureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\tconst specularTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, specularTexture, (pixels, i, j) => {\n\t\t\t\t\tpixels.set(i, j, 3, 255); // Remove glossiness.\n\t\t\t\t});\n\t\t\t\tspecular.setSpecularTexture(specularTexture);\n\t\t\t\tspecular.setSpecularColorTexture(specularTexture);\n\t\t\t\tspecular.getSpecularTextureInfo()!.copy(sgTextureInfo);\n\t\t\t\tspecular.getSpecularColorTextureInfo()!.copy(sgTextureInfo);\n\n\t\t\t\t// specularGlossiness -> roughness.\n\t\t\t\tconst glossinessFactor = specGloss.getGlossinessFactor();\n\t\t\t\tconst metalRoughTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, metalRoughTexture, (pixels, i, j) => {\n\t\t\t\t\t// Invert glossiness.\n\t\t\t\t\tconst roughness = 255 - Math.round(pixels.get(i, j, 3) * glossinessFactor);\n\t\t\t\t\tpixels.set(i, j, 0, 0);\n\t\t\t\t\tpixels.set(i, j, 1, roughness);\n\t\t\t\t\tpixels.set(i, j, 2, 0);\n\t\t\t\t\tpixels.set(i, j, 3, 255);\n\t\t\t\t});\n\t\t\t\tmaterial.setMetallicRoughnessTexture(metalRoughTexture);\n\t\t\t\tmaterial.getMetallicRoughnessTextureInfo()!.copy(sgTextureInfo);\n\t\t\t} else {\n\t\t\t\tspecular.setSpecularColorFactor(specGloss.getSpecularFactor());\n\t\t\t\tmaterial.setRoughnessFactor(1 - specGloss.getGlossinessFactor());\n\t\t\t}\n\n\t\t\t// Remove KHR_materials_pbrSpecularGlossiness from the material.\n\t\t\tmaterial.setExtension('KHR_materials_pbrSpecularGlossiness', null);\n\t\t}\n\n\t\t// Remove KHR_materials_pbrSpecularGlossiness from the document.\n\t\tspecGlossExtension.dispose();\n\n\t\t// Clean up unused textures.\n\t\tfor (const tex of inputTextures) {\n\t\t\tif (tex && tex.listParents().length === 1) tex.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n}\n","import { AnimationChannel, Document, Graph, Property, PropertyType, Root, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'prune';\n\nexport interface PruneOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n}\nconst PRUNE_DEFAULTS: Required<PruneOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.NODE,\n\t\tPropertyType.SKIN,\n\t\tPropertyType.MESH,\n\t\tPropertyType.CAMERA,\n\t\tPropertyType.PRIMITIVE,\n\t\tPropertyType.PRIMITIVE_TARGET,\n\t\tPropertyType.ANIMATION,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.BUFFER,\n\t]\n};\n\n/**\n * Removes properties from the file if they are not referenced by a {@link Scene}. Commonly helpful\n * for cleaning up after other operations, e.g. allowing a node to be detached and any unused\n * meshes, materials, or other resources to be removed automatically.\n *\n * Example:\n *\n * ```\n * document.getRoot().listMaterials(); // → [Material, Material]\n *\n * await document.transform(prune());\n *\n * document.getRoot().listMaterials(); // → [Material]\n * ```\n *\n * No options are currently implemented for this function.\n */\nexport const prune = function (_options: PruneOptions = PRUNE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...PRUNE_DEFAULTS, ..._options} as Required<PruneOptions>;\n\tconst propertyTypes = options.propertyTypes;\n\n\treturn createTransform(NAME, (doc: Document): void =>  {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst graph = doc.getGraph();\n\n\t\tconst disposed: Record<string, number> = {};\n\n\t\t// Prune top-down, so that low-level properties like accessors can be removed if the\n\t\t// properties referencing them are removed.\n\n\t\tif (propertyTypes.includes(PropertyType.NODE)) root.listNodes().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.SKIN)) root.listSkins().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.MESH)) root.listMeshes().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.CAMERA)) root.listCameras().forEach(treeShake);\n\n\t\tif (propertyTypes.includes(PropertyType.PRIMITIVE)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE);\n\t\t}\n\t\tif (propertyTypes.includes(PropertyType.PRIMITIVE_TARGET)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE_TARGET);\n\t\t}\n\n\t\t// Pruning animations is a bit more complicated:\n\t\t// (1) Remove channels without target nodes.\n\t\t// (2) Remove animations without channels.\n\t\t// (3) Remove samplers orphaned in the process.\n\t\tif (propertyTypes.includes(PropertyType.ANIMATION)) {\n\t\t\tfor (const anim of root.listAnimations()) {\n\t\t\t\tfor (const channel of anim.listChannels()) {\n\t\t\t\t\tif (!channel.getTargetNode()) {\n\t\t\t\t\t\tchannel.dispose();\n\t\t\t\t\t\tmarkDisposed(channel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!anim.listChannels().length) {\n\t\t\t\t\tconst samplers = anim.listSamplers();\n\t\t\t\t\ttreeShake(anim);\n\t\t\t\t\tsamplers.forEach(treeShake);\n\t\t\t\t} else {\n\t\t\t\t\tanim.listSamplers().forEach(treeShake);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.includes(PropertyType.MATERIAL)) root.listMaterials().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.TEXTURE)) root.listTextures().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.ACCESSOR)) root.listAccessors().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.BUFFER)) root.listBuffers().forEach(treeShake);\n\n\t\t// TODO(bug): This process does not identify unused ExtensionProperty instances. That could\n\t\t// be a future enhancement, either tracking unlinked properties as if they were connected\n\t\t// to the Graph, or iterating over a property list provided by the Extension. Properties in\n\t\t// use by an Extension are correctly preserved, in the meantime.\n\n\t\tif (Object.keys(disposed).length) {\n\t\t\tconst str = Object.keys(disposed).map((t) => `${t} (${disposed[t]})`).join(', ');\n\t\t\tlogger.info(`${NAME}: Removed types... ${str}`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No unused properties found.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t\t//\n\n\t\t/** Disposes of the given property if it is unused. */\n\t\tfunction treeShake(prop: Property): void {\n\t\t\t// Consider a property unused if it has no references from another property, excluding\n\t\t\t// types Root and AnimationChannel.\n\t\t\tconst parents = prop.listParents()\n\t\t\t\t.filter((p) => !(p instanceof Root || p instanceof AnimationChannel));\n\t\t\tif (!parents.length) {\n\t\t\t\tprop.dispose();\n\t\t\t\tmarkDisposed(prop);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * For property types the Root does not maintain references to, we'll need to search the\n\t\t * graph. It's possible that objects may have been constructed without any outbound links,\n\t\t * but since they're not on the graph they don't need to be tree-shaken.\n\t\t */\n\t\tfunction indirectTreeShake(graph: Graph<Property>, propertyType: string): void {\n\t\t\tgraph.getLinks()\n\t\t\t\t.map((link) => link.getParent())\n\t\t\t\t.filter((parent) => parent.propertyType === propertyType)\n\t\t\t\t.forEach(treeShake);\n\t\t}\n\n\t\t/** Records properties disposed by type. */\n\t\tfunction markDisposed(prop: Property): void {\n\t\t\tdisposed[prop.propertyType] = disposed[prop.propertyType] || 0;\n\t\t\tdisposed[prop.propertyType]++;\n\t\t}\n\n\t});\n\n};\n","import { Document, Logger, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune';\nimport { createTransform } from './utils';\n\nconst NAME = 'partition';\n\nexport interface PartitionOptions {\n\tanimations?: boolean | Array<string>;\n\tmeshes?: boolean | Array<string>;\n}\n\nconst PARTITION_DEFAULTS: Required<PartitionOptions> =  {\n\tanimations: true,\n\tmeshes: true,\n};\n\n/**\n * Partitions the binary payload of a glTF file so separate mesh or animation data is in separate\n * `.bin` {@link Buffer}s. This technique may be useful for engines that support lazy-loading\n * specific binary resources as needed over the application lifecycle.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer]\n *\n * await document.transform(partition({meshes: true}));\n *\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n * ```\n */\nconst partition = (_options: PartitionOptions = PARTITION_DEFAULTS): Transform => {\n\n\tconst options = {...PARTITION_DEFAULTS, ..._options} as Required<PartitionOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.meshes !== false) partitionMeshes(doc, logger, options);\n\t\tif (options.animations !== false) partitionAnimations(doc, logger, options);\n\n\t\tif (!options.meshes && !options.animations) {\n\t\t\tlogger.warn(`${NAME}: Select animations or meshes to create a partition.`);\n\t\t}\n\n\t\tawait doc.transform(prune({propertyTypes: [PropertyType.BUFFER]}));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n};\n\nfunction partitionMeshes (doc: Document, logger: Logger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(doc.getRoot().listBuffers().map((b) => b.getURI()));\n\n\tdoc.getRoot().listMeshes()\n\t\t.forEach((mesh, meshIndex) => {\n\t\t\tif (Array.isArray(options.meshes) && !options.meshes.includes(mesh.getName())) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`${NAME}: Skipping mesh #${meshIndex} with name \"${mesh.getName()}\".`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for mesh \"${mesh.getName()}\".`);\n\n\t\t\tconst buffer = doc.createBuffer(mesh.getName())\n\t\t\t\t.setURI(createBufferURI(mesh.getName() || 'mesh', existingURIs));\n\n\t\t\tmesh.listPrimitives()\n\t\t\t\t.forEach((primitive) => {\n\t\t\t\t\tconst indices = primitive.getIndices();\n\t\t\t\t\tif (indices) indices.setBuffer(buffer);\n\t\t\t\t\tprimitive.listAttributes()\n\t\t\t\t\t\t.forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t\tprimitive.listTargets()\n\t\t\t\t\t\t.forEach((primTarget) => {\n\t\t\t\t\t\t\tprimTarget.listAttributes()\n\t\t\t\t\t\t\t\t.forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t});\n}\n\nfunction partitionAnimations (doc: Document, logger: Logger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(doc.getRoot().listBuffers().map((b) => b.getURI()));\n\n\tdoc.getRoot().listAnimations()\n\t\t.forEach((anim, animIndex) => {\n\t\t\tif (Array.isArray(options.animations) && !options.animations.includes(anim.getName())) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`${NAME}: Skipping animation #${animIndex} with name \"${anim.getName()}\".`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for animation \"${anim.getName()}\".`);\n\n\t\t\tconst buffer = doc.createBuffer(anim.getName())\n\t\t\t\t.setURI(createBufferURI(anim.getName() || 'animation', existingURIs));\n\n\t\t\tanim.listSamplers()\n\t\t\t\t.forEach((sampler) => {\n\t\t\t\t\tconst input = sampler.getInput();\n\t\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\t\tif (input) input.setBuffer(buffer);\n\t\t\t\t\tif (output) output.setBuffer(buffer);\n\t\t\t\t});\n\t\t});\n}\n\nfunction createBufferURI (basename: string, existing: Set<string>): string {\n\tlet uri = `${basename}.bin`;\n\tlet i = 1;\n\twhile (existing.has(uri)) uri = `${basename}_${i++}.bin`;\n\treturn uri;\n}\n\nexport { partition };\n","import {\n\tAccessor,\n\tAnimationChannel,\n\tbbox,\n\tDocument,\n\tLogger,\n\tmat4,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tSkin,\n\tTransform,\n\tvec2,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup';\nimport { fromRotationTranslationScale, fromScaling, invert, multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { max, min, scale, transformMat4 } from 'gl-matrix/vec3';\nimport { MeshQuantization } from '@gltf-transform/extensions';\nimport { prune } from './prune';\nimport { createTransform } from './utils';\n\nconst NAME = 'quantize';\n\ntype TypedArrayConstructor =\n\t| Int8ArrayConstructor\n\t| Int16ArrayConstructor\n\t| Uint8ArrayConstructor\n\t| Uint16ArrayConstructor;\nconst SIGNED_INT = [Int8Array, Int16Array, Int32Array] as TypedArrayConstructor[];\n\nconst { TRANSLATION, ROTATION, SCALE, WEIGHTS } = AnimationChannel.TargetPath;\nconst TRS_CHANNELS = [TRANSLATION, ROTATION, SCALE];\n\n/** Options for the {@link quantize} function. */\nexport interface QuantizeOptions {\n\t/** Pattern (regex) used to filter vertex attribute semantics for quantization. Default: all. */\n\tpattern?: RegExp;\n\t/** Bounds for quantization grid. */\n\tquantizationVolume?: 'mesh' | 'scene';\n\t/** Quantization bits for `POSITION` attributes. */\n\tquantizePosition?: number;\n\t/** Quantization bits for `NORMAL` attributes. */\n\tquantizeNormal?: number;\n\t/** Quantization bits for `TEXCOORD_*` attributes. */\n\tquantizeTexcoord?: number;\n\t/** Quantization bits for `COLOR_*` attributes. */\n\tquantizeColor?: number;\n\t/** Quantization bits for `WEIGHT_*` attributes. */\n\tquantizeWeight?: number;\n\t/** Quantization bits for application-specific (`_*`) attributes. */\n\tquantizeGeneric?: number;\n}\n\nexport const QUANTIZE_DEFAULTS: Required<QuantizeOptions> = {\n\tpattern: /.*/,\n\tquantizationVolume: 'mesh',\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeTexcoord: 12,\n\tquantizeColor: 8,\n\tquantizeWeight: 8,\n\tquantizeGeneric: 12,\n};\n\n/**\n * References:\n * - https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n * - http://www.aclockworkberry.com/normal-unpacking-quantization-errors/\n * - https://www.mathworks.com/help/dsp/ref/uniformencoder.html\n * - https://oroboro.com/compressed-unit-vectors/\n */\n\n/**\n * Quantizes vertex attributes with `KHR_mesh_quantization`, reducing the size and memory footprint\n * of the file.\n */\nconst quantize = (_options: QuantizeOptions = QUANTIZE_DEFAULTS): Transform => {\n\tconst options = { ...QUANTIZE_DEFAULTS, ..._options } as Required<QuantizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tdoc.createExtension(MeshQuantization).setRequired(true);\n\n\t\t// Compute vertex position quantization volume.\n\t\tlet nodeTransform: VectorTransform<vec3> | undefined = undefined;\n\t\tif (options.quantizationVolume === 'scene') {\n\t\t\tnodeTransform = getNodeTransform(expandBounds(root.listMeshes().map(getPositionQuantizationVolume)));\n\t\t}\n\n\t\t// Quantize mesh primitives.\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tif (options.quantizationVolume === 'mesh') {\n\t\t\t\tnodeTransform = getNodeTransform(getPositionQuantizationVolume(mesh));\n\t\t\t}\n\n\t\t\tif (nodeTransform && options.pattern.test('POSITION')) {\n\t\t\t\ttransformMeshParents(doc, mesh, nodeTransform);\n\t\t\t}\n\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tquantizePrimitive(doc, prim, nodeTransform!, options);\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tquantizePrimitive(doc, target, nodeTransform!, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait doc.transform(\n\t\t\tprune({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.SKIN] }),\n\t\t\tdedup({ propertyTypes: [PropertyType.ACCESSOR] })\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nfunction quantizePrimitive(\n\tdoc: Document,\n\tprim: Primitive | PrimitiveTarget,\n\tnodeTransform: VectorTransform<vec3>,\n\toptions: Required<QuantizeOptions>\n): void {\n\tconst logger = doc.getLogger();\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (!options.pattern.test(semantic)) continue;\n\n\t\tconst srcAttribute = prim.getAttribute(semantic)!;\n\t\tconst { bits, ctor } = getQuantizationSettings(semantic, srcAttribute, logger, options);\n\n\t\tif (!ctor) continue;\n\t\tif (bits < 8 || bits > 16) throw new Error(`${NAME}: Requires bits = 8–16.`);\n\t\tif (srcAttribute.getComponentSize() <= bits / 8) continue;\n\n\t\tconst dstAttribute = srcAttribute.clone();\n\n\t\t// Remap position data.\n\t\tif (semantic === 'POSITION') {\n\t\t\tconst scale = nodeTransform.scale;\n\t\t\tconst transform: mat4 = [] as unknown as mat4;\n\t\t\t// Morph targets are relative offsets, don't translate them.\n\t\t\tprim instanceof Primitive\n\t\t\t\t? invert(transform, fromTransform(nodeTransform))\n\t\t\t\t: fromScaling(transform, [1 / scale, 1 / scale, 1 / scale]);\n\t\t\tfor (let i = 0, el: vec3 = [0, 0, 0], il = dstAttribute.getCount(); i < il; i++) {\n\t\t\t\tdstAttribute.getElement(i, el);\n\t\t\t\tdstAttribute.setElement(i, transformMat4(el, el, transform) as vec3);\n\t\t\t}\n\t\t}\n\n\t\t// Quantize the vertex attribute.\n\t\tquantizeAttribute(dstAttribute, ctor, bits);\n\t\tprim.swap(srcAttribute, dstAttribute);\n\t}\n\n\t// Normalize skinning weights.\n\tif (prim.getAttribute('WEIGHTS_0')) {\n\t\tnormalizeWeights(prim);\n\t}\n\n\tif (\n\t\tprim instanceof Primitive &&\n\t\tprim.getIndices() &&\n\t\tprim.listAttributes().length &&\n\t\tprim.listAttributes()[0]!.getCount() < 65535\n\t) {\n\t\tconst indices = prim.getIndices()!;\n\t\tindices.setArray(new Uint16Array(indices.getArray()!));\n\t}\n}\n\n/** Computes node quantization transforms in local space. */\nfunction getNodeTransform(volume: bbox): VectorTransform<vec3> {\n\tconst { min, max } = volume;\n\n\t// Scaling factor transforms [-1,1] box to the mesh AABB in local space.\n\t// See: https://github.com/donmccurdy/glTF-Transform/issues/328\n\tconst scale = Math.max(\n\t\t(max[0] - min[0]) / 2, // Divide because interval [-1,1] has length 2.\n\t\t(max[1] - min[1]) / 2,\n\t\t(max[2] - min[2]) / 2\n\t);\n\n\t// Original center of the mesh, in local space.\n\tconst offset: vec3 = [\n\t\tmin[0] + (max[0] - min[0]) / 2,\n\t\tmin[1] + (max[1] - min[1]) / 2,\n\t\tmin[2] + (max[2] - min[2]) / 2,\n\t];\n\n\treturn { offset, scale };\n}\n\n/** Applies corrective scale and offset to nodes referencing a quantized Mesh. */\nfunction transformMeshParents(doc: Document, mesh: Mesh, nodeTransform: VectorTransform<vec3>): void {\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tfor (const parent of mesh.listParents()) {\n\t\tif (parent instanceof Node) {\n\t\t\tconst animChannels = parent\n\t\t\t\t.listParents()\n\t\t\t\t.filter((p) => p instanceof AnimationChannel) as AnimationChannel[];\n\t\t\tconst isAnimated = animChannels.some((channel) => TRS_CHANNELS.includes(channel.getTargetPath()!));\n\t\t\tconst isParentNode = parent.listChildren().length > 0;\n\n\t\t\tif (parent.getSkin()) {\n\t\t\t\tparent.setSkin(transformSkin(parent.getSkin()!, nodeTransform));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet targetNode: Node;\n\t\t\tif (isParentNode || isAnimated) {\n\t\t\t\ttargetNode = doc.createNode('').setMesh(mesh);\n\t\t\t\tparent.addChild(targetNode).setMesh(null);\n\t\t\t\tanimChannels\n\t\t\t\t\t.filter((channel) => channel.getTargetPath() === WEIGHTS)\n\t\t\t\t\t.forEach((channel) => channel.setTargetNode(targetNode));\n\t\t\t} else {\n\t\t\t\ttargetNode = parent;\n\t\t\t}\n\n\t\t\tconst nodeMatrix = targetNode.getMatrix();\n\t\t\tmultiplyMat4(nodeMatrix, nodeMatrix, transformMatrix);\n\t\t\ttargetNode.setMatrix(nodeMatrix);\n\t\t}\n\t}\n}\n\n/** Applies corrective scale and offset to skin IBMs. */\nfunction transformSkin(skin: Skin, nodeTransform: VectorTransform<vec3>): Skin {\n\tskin = skin.clone();\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tconst inverseBindMatrices = skin.getInverseBindMatrices()!.clone();\n\tconst ibm = [] as unknown as mat4;\n\tfor (let i = 0, count = inverseBindMatrices.getCount(); i < count; i++) {\n\t\tinverseBindMatrices.getElement(i, ibm);\n\t\tmultiplyMat4(ibm, ibm, transformMatrix);\n\t\tinverseBindMatrices.setElement(i, ibm);\n\t}\n\treturn skin.setInverseBindMatrices(inverseBindMatrices);\n}\n\n/**\n * Quantizes an attribute to the given parameters.\n *\n * Uniformly remap 32-bit floats to reduced-precision 8- or 16-bit integers, so\n * that there are only 2^N unique values, for N within [8, 16].\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/208\n */\nfunction quantizeAttribute(attribute: Accessor, ctor: TypedArrayConstructor, bits: number): void {\n\tconst dstArray = new ctor(attribute.getArray()!.length);\n\n\tconst signBits = SIGNED_INT.includes(ctor) ? 1 : 0;\n\tconst quantBits = bits - signBits;\n\tconst storageBits = ctor.BYTES_PER_ELEMENT * 8 - signBits;\n\n\tconst scale = Math.pow(2, quantBits) - 1;\n\tconst lo = storageBits - quantBits;\n\tconst hi = 2 * quantBits - storageBits;\n\n\tfor (let i = 0, di = 0, el: number[] = []; i < attribute.getCount(); i++) {\n\t\tattribute.getElement(i, el);\n\t\tfor (let j = 0; j < el.length; j++) {\n\t\t\t// Map [0.0 ... 1.0] to [0 ... scale].\n\t\t\tlet value = Math.round(Math.abs(el[j]) * scale);\n\n\t\t\t// Replicate msb to missing lsb.\n\t\t\tvalue = (value << lo) | (value >> hi);\n\n\t\t\t// Restore sign.\n\t\t\tdstArray[di++] = value * Math.sign(el[j]);\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(true);\n}\n\nfunction getQuantizationSettings(\n\tsemantic: string,\n\tattribute: Accessor,\n\tlogger: Logger,\n\toptions: Required<QuantizeOptions>\n): { bits: number; ctor?: TypedArrayConstructor } {\n\tconst min = attribute.getMinNormalized([]);\n\tconst max = attribute.getMaxNormalized([]);\n\n\tlet bits: number;\n\tlet ctor: TypedArrayConstructor;\n\n\tif (semantic === 'POSITION') {\n\t\tbits = options.quantizePosition;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic === 'NORMAL' || semantic === 'TANGENT') {\n\t\tbits = options.quantizeNormal;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\tbits = options.quantizeColor;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeTexcoord;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('JOINTS_')) {\n\t\tbits = Math.max(...attribute.getMax([])) <= 255 ? 8 : 16;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t\tif (attribute.getComponentSize() > bits / 8) {\n\t\t\tattribute.setArray(new ctor(attribute.getArray()!));\n\t\t}\n\t\treturn { bits: -1 };\n\t} else if (semantic.startsWith('WEIGHTS_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeWeight;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('_')) {\n\t\tif (min.some((v) => v < -1) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [-1,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeGeneric;\n\t\tctor = min.some((v) => v < 0)\n\t\t\t? (ctor = bits <= 8 ? Int8Array : Int16Array)\n\t\t\t: (ctor = bits <= 8 ? Uint8Array : Uint16Array);\n\t} else {\n\t\tthrow new Error(`${NAME}: Unexpected semantic, \"${semantic}\".`);\n\t}\n\n\treturn { bits, ctor };\n}\n\nfunction getPositionQuantizationVolume(mesh: Mesh): bbox {\n\tconst positions: Accessor[] = [];\n\tconst relativePositions: Accessor[] = [];\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst attribute = prim.getAttribute('POSITION');\n\t\tif (attribute) positions.push(attribute);\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tconst attribute = target.getAttribute('POSITION');\n\t\t\tif (attribute) relativePositions.push(attribute);\n\t\t}\n\t}\n\n\tif (positions.length === 0) {\n\t\tthrow new Error(`${NAME}: Missing \"POSITION\" attribute.`);\n\t}\n\n\tconst bbox = flatBounds<vec3>(positions, 3);\n\n\t// Morph target quantization volume is computed differently. First, ensure that the origin\n\t// <0, 0, 0> is in the quantization volume. Because we can't offset target positions (they're\n\t// relative deltas), default remapping will only map to a [-2, 2] AABB. Double the bounding box\n\t// to ensure scaling puts them within a [-1, 1] AABB instead.\n\tif (relativePositions.length > 0) {\n\t\tconst { min: relMin, max: relMax } = flatBounds<vec3>(relativePositions, 3);\n\t\tmin(bbox.min, bbox.min, min(relMin, scale(relMin, relMin, 2), [0, 0, 0]));\n\t\tmax(bbox.max, bbox.max, max(relMax, scale(relMax, relMax, 2), [0, 0, 0]));\n\t}\n\n\treturn bbox;\n}\n\n/** Computes total min and max of all Accessors in a list. */\nfunction flatBounds<T = vec2 | vec3>(accessors: Accessor[], elementSize: number): { min: T; max: T } {\n\tconst min: number[] = new Array(elementSize).fill(Infinity);\n\tconst max: number[] = new Array(elementSize).fill(-Infinity);\n\n\tconst tmpMin: number[] = [];\n\tconst tmpMax: number[] = [];\n\n\tfor (const accessor of accessors) {\n\t\taccessor.getMinNormalized(tmpMin);\n\t\taccessor.getMaxNormalized(tmpMax);\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tmin[i] = Math.min(min[i], tmpMin[i]);\n\t\t\tmax[i] = Math.max(max[i], tmpMax[i]);\n\t\t}\n\t}\n\n\treturn { min, max } as unknown as { min: T; max: T };\n}\n\nfunction expandBounds(bboxes: bbox[]): bbox {\n\tconst result = bboxes[0];\n\tfor (const bbox of bboxes) {\n\t\tmin(result.min, result.min, bbox.min);\n\t\tmax(result.max, result.max, bbox.max);\n\t}\n\treturn result;\n}\n\ninterface VectorTransform<T = vec2 | vec3 | vec4> {\n\toffset: T;\n\tscale: number;\n}\n\nfunction fromTransform(transform: VectorTransform<vec3>): mat4 {\n\treturn fromRotationTranslationScale([] as unknown as mat4, [0, 0, 0, 1], transform.offset, [\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t]) as mat4;\n}\n\nfunction normalizeWeights(prim: Primitive | PrimitiveTarget): void {\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst weightsEl: number[] = [];\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tlet vertexWeightsSum = 0;\n\n\t\tlet leastWeight = Infinity;\n\t\tlet leastIndex = -1;\n\t\tlet leastAttribute: Accessor | null = null;\n\n\t\tlet weights: Accessor | null;\n\t\tlet attributeIndex = 0;\n\n\t\t// Find sum of weights and the joint with the lowest non-zero weight.\n\t\twhile ((weights = prim.getAttribute(`WEIGHTS_${attributeIndex++}`))) {\n\t\t\tweights.getElement(i, weightsEl);\n\t\t\tfor (let j = 0; j < weightsEl.length; j++) {\n\t\t\t\tvertexWeightsSum += weightsEl[j];\n\t\t\t\tif (weightsEl[j] > 0 && weightsEl[j] < leastWeight) {\n\t\t\t\t\tleastAttribute = weights;\n\t\t\t\t\tleastWeight = weightsEl[j];\n\t\t\t\t\tleastIndex = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Normalize by updating least-significant joint weight.\n\t\tif (leastAttribute && vertexWeightsSum !== 1) {\n\t\t\tleastAttribute.getElement(i, weightsEl);\n\t\t\tweightsEl[leastIndex] += 1 - vertexWeightsSum;\n\t\t\tleastAttribute.setElement(i, weightsEl);\n\t\t}\n\t}\n}\n\nexport { quantize };\n","import { Accessor, AnimationSampler, Document, Root, Transform, TransformContext } from '@gltf-transform/core';\nimport { createTransform, isTransformPending } from './utils';\n\nconst NAME = 'resample';\n\nexport interface ResampleOptions {tolerance?: number}\n\nconst RESAMPLE_DEFAULTS: Required<ResampleOptions> =  {tolerance: 1e-4};\n\n/**\n * Resample {@link Animation}s, losslessly deduplicating keyframes to reduce file size. Duplicate\n * keyframes are commonly present in animation 'baked' by the authoring software to apply IK\n * constraints or other software-specific features. Based on THREE.KeyframeTrack.optimize().\n *\n * Example: (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n */\nexport const resample = (_options: ResampleOptions = RESAMPLE_DEFAULTS): Transform => {\n\n\tconst options = {...RESAMPLE_DEFAULTS, ..._options} as Required<ResampleOptions>;\n\n\treturn createTransform(NAME, (doc: Document, context?: TransformContext): void => {\n\t\tconst accessorsVisited = new Set<Accessor>();\n\t\tconst accessorsCountPrev = doc.getRoot().listAccessors().length;\n\t\tconst logger = doc.getLogger();\n\n\t\tlet didSkipMorphTargets = false;\n\n\t\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\t\t// Skip morph targets, see https://github.com/donmccurdy/glTF-Transform/issues/290.\n\t\t\tconst morphTargetSamplers = new Set<AnimationSampler>();\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tif (channel.getSampler() && channel.getTargetPath() === 'weights') {\n\t\t\t\t\tmorphTargetSamplers.add(channel.getSampler()!);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\t\tif (morphTargetSamplers.has(sampler)) {\n\t\t\t\t\tdidSkipMorphTargets = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (sampler.getInterpolation() === 'STEP'\n\t\t\t\t\t|| sampler.getInterpolation() === 'LINEAR') {\n\t\t\t\t\taccessorsVisited.add(sampler.getInput()!);\n\t\t\t\t\taccessorsVisited.add(sampler.getOutput()!);\n\t\t\t\t\toptimize(sampler, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const accessor of Array.from(accessorsVisited.values())) {\n\t\t\tconst used = accessor.listParents().some((p) => !(p instanceof Root));\n\t\t\tif (!used) accessor.dispose();\n\t\t}\n\n\t\tif (doc.getRoot().listAccessors().length > accessorsCountPrev && !isTransformPending(context, NAME, 'dedup')) {\n\t\t\tlogger.warn(\n\t\t\t\t`${NAME}: Resampling required copying accessors, some of which may be duplicates.`\n\t\t\t\t+ ' Consider using \"dedup\" to consolidate any duplicates.'\n\t\t\t);\n\t\t}\n\n\t\tif (didSkipMorphTargets) {\n\t\t\tlogger.warn(`${NAME}: Skipped optimizing morph target keyframes, not yet supported.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n};\n\nfunction optimize (sampler: AnimationSampler, options: ResampleOptions): void {\n\tconst input = sampler.getInput()!.clone();\n\tconst output = sampler.getOutput()!.clone();\n\n\tconst tolerance = options.tolerance as number;\n\n\tconst lastIndex = input.getCount() - 1;\n\tconst tmp: number[] = [];\n\n\tlet writeIndex = 1;\n\n\tfor (let i = 1; i < lastIndex; ++ i) {\n\t\tconst time = input.getScalar(i);\n\t\tconst timePrev = input.getScalar(i - 1);\n\t\tconst timeNext = input.getScalar(i + 1);\n\t\tconst timeMix = (time - timePrev) / (timeNext - timePrev);\n\n\t\tlet keep = false;\n\n\t\t// Remove unnecessary adjacent keyframes.\n\t\tif (time !== timeNext && (i !== 1 || time !== input.getScalar(0))) {\n\t\t\tfor (let j = 0; j < output.getElementSize(); j++) {\n\t\t\t\tconst value = output.getElement(i, tmp)[j];\n\t\t\t\tconst valuePrev = output.getElement(i - 1, tmp)[j];\n\t\t\t\tconst valueNext = output.getElement(i + 1, tmp)[j];\n\n\t\t\t\tif (sampler.getInterpolation() === 'LINEAR') {\n\t\t\t\t\t// Prune keyframes that are colinear with prev/next keyframes.\n\t\t\t\t\tif (Math.abs(value - lerp(valuePrev, valueNext, timeMix)) > tolerance) {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (sampler.getInterpolation() === 'STEP') {\n\t\t\t\t\t// Prune keyframes that are identical to prev/next keyframes.\n\t\t\t\t\tif (value !== valuePrev || value !== valueNext) {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// In-place compaction.\n\t\tif (keep) {\n\t\t\tif (i !== writeIndex) {\n\t\t\t\tinput.setScalar(writeIndex, input.getScalar(i));\n\t\t\t\toutput.setElement(writeIndex, output.getElement(i, tmp));\n\t\t\t}\n\t\t\twriteIndex++;\n\t\t}\n\n\t}\n\n\t// Flush last keyframe (compaction looks ahead).\n\tif (lastIndex > 0) {\n\t\tinput.setScalar(writeIndex, input.getScalar(lastIndex));\n\t\toutput.setElement(writeIndex, output.getElement(lastIndex, tmp));\n\t\twriteIndex++;\n\t}\n\n\t// If the sampler was optimized, truncate and save the results. If not, clean up.\n\tif (writeIndex !== input.getCount()) {\n\t\tinput.setArray(input.getArray()!.slice(0, writeIndex));\n\t\toutput.setArray(output.getArray()!.slice(0, writeIndex * output.getElementSize()));\n\t\tsampler.setInput(input);\n\t\tsampler.setOutput(output);\n\t} else {\n\t\tinput.dispose();\n\t\toutput.dispose();\n\t}\n}\n\nfunction lerp (v0: number, v1: number, t: number): number {\n    return v0 * (1 - t) + v1 * t;\n}\n","import { Accessor, Document, GLTF, Primitive, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune';\nimport { createTransform, SetMap } from './utils';\nimport type { MeshoptEncoder } from 'meshoptimizer';\n\nconst NAME = 'reorder';\n\n/** Options for the {@link reorder} function. */\nexport interface ReorderOptions {\n\t/** MeshoptEncoder instance. */\n\tencoder?: typeof MeshoptEncoder,\n\t/**\n\t * Whether the order should be optimal for transmission size (recommended for Web)\n\t * or for GPU rendering performance. Default is 'size'.\n\t */\n\ttarget?: 'size' | 'performance',\n}\n\nconst REORDER_DEFAULTS: Required<Omit<ReorderOptions, 'encoder'>> = {\n\ttarget: 'size',\n};\n\ninterface LayoutPlan {\n\tindicesToMode: Map<Accessor, GLTF.MeshPrimitiveMode>;\n\tindicesToAttributes: SetMap<Accessor, Accessor>;\n\tattributesToPrimitives: SetMap<Accessor, Primitive>;\n}\n\n/**\n * Optimizes {@link Mesh} {@link Primitive Primitives} for locality of reference. Choose whether\n * the order should be optimal for transmission size (recommended for Web) or for GPU rendering\n * performance. Requires a MeshoptEncoder instance from the Meshoptimizer library.\n *\n * Example:\n *\n * ```ts\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder})\n * );\n * ```\n */\nexport function reorder (_options: ReorderOptions = REORDER_DEFAULTS): Transform {\n\tconst options = {...REORDER_DEFAULTS, ..._options} as Required<ReorderOptions>;\n\tconst encoder = options.encoder;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tawait encoder.ready;\n\n\t\tconst plan = preprocessPrimitives(doc);\n\n\t\tfor (const srcIndices of plan.indicesToAttributes.keys()) {\n\t\t\tconst dstIndices = srcIndices.clone();\n\t\t\tlet indicesArray = dstIndices.getArray()!.slice();\n\t\t\tif (!(indicesArray instanceof Uint32Array)) {\n\t\t\t\tindicesArray = new Uint32Array(indicesArray);\n\t\t\t}\n\n\t\t\t// Compute optimal order.\n\t\t\tconst [remap, unique] = encoder.reorderMesh(\n\t\t\t\tindicesArray,\n\t\t\t\tplan.indicesToMode.get(srcIndices) === Primitive.Mode.TRIANGLES,\n\t\t\t\toptions.target === 'size'\n\t\t\t);\n\n\t\t\tdstIndices.setArray(unique <= 65534 ? new Uint16Array(indicesArray) : indicesArray);\n\n\t\t\t// Update affected primitives.\n\t\t\tfor (const srcAttribute of plan.indicesToAttributes.get(srcIndices)) {\n\t\t\t\tconst dstAttribute = srcAttribute.clone();\n\t\t\t\tremapAttribute(dstAttribute, remap, unique);\n\t\t\t\tfor (const prim of plan.attributesToPrimitives.get(srcAttribute)) {\n\t\t\t\t\tif (prim.getIndices() === srcIndices) {\n\t\t\t\t\t\tprim.swap(srcIndices, dstIndices);\n\t\t\t\t\t}\n\t\t\t\t\tif (prim.getIndices() === dstIndices) {\n\t\t\t\t\t\tprim.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\t\t\ttarget.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clean up any attributes left unused by earlier cloning.\n\t\tawait doc.transform(prune({propertyTypes: [PropertyType.ACCESSOR]}));\n\n\t\tif (!plan.indicesToAttributes.size) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found; may need to weld first.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\nfunction remapAttribute(attribute: Accessor, remap: Uint32Array, dstCount: number) {\n\tconst elementSize = attribute.getElementSize();\n\tconst srcCount = attribute.getCount();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = srcArray.slice(0, dstCount * elementSize);\n\n\tfor (let i = 0; i < srcCount; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[remap[i] * elementSize + j] = srcArray[i * elementSize + j];\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray);\n}\n\n/**\n * Constructs a plan for creating optimal vertex cache order, based on unique\n * index:attribute[] groups. Where different indices are used with the same\n * attributes, we'll end up splitting the primitives to not share attributes,\n * which appears to be consistent with the Meshopt implementation.\n */\nfunction preprocessPrimitives(doc: Document): LayoutPlan {\n\tconst indicesToAttributes = new SetMap<Accessor, Accessor>();\n\tconst indicesToMode = new Map<Accessor, GLTF.MeshPrimitiveMode>();\n\tconst attributesToPrimitives = new SetMap<Accessor, Primitive>();\n\n\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (!indices) continue;\n\n\t\t\tindicesToMode.set(indices, prim.getMode());\n\n\t\t\tfor (const attribute of listAttributes(prim)) {\n\t\t\t\tindicesToAttributes.add(indices, attribute);\n\t\t\t\tattributesToPrimitives.add(attribute, prim);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {indicesToAttributes, indicesToMode, attributesToPrimitives};\n}\n\nfunction listAttributes(prim: Primitive): Accessor[] {\n\tconst accessors: Accessor[] = [];\n\n\tfor (const attribute of prim.listAttributes()) {\n\t\taccessors.push(attribute);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const attribute of target.listAttributes()) {\n\t\t\taccessors.push(attribute);\n\t\t}\n\t}\n\n\treturn Array.from(new Set(accessors));\n}\n","import { Accessor, AnimationChannel, AnimationSampler, Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'sequence';\n\nexport interface SequenceOptions {\n\t/** Frames per second, where one node is shown each frame. Default 10. */\n\tfps?: number;\n\t/** Pattern (regex) used to filter nodes for the sequence. Required. */\n\tpattern: RegExp;\n\t/** Name of the new animation. */\n\tname?: string;\n\t/** Whether to sort the nodes by name, or use original order. Default true. */\n\tsort?: boolean;\n}\n\nconst SEQUENCE_DEFAULTS: Required<SequenceOptions> = {\n\tname: '',\n\tfps: 10,\n\tpattern: /.*/,\n\tsort: true,\n};\n\n/**\n * Creates an {@link Animation} displaying each of the specified {@link Node}s sequentially.\n */\nexport function sequence (_options: SequenceOptions = SEQUENCE_DEFAULTS): Transform {\n\tconst options = {...SEQUENCE_DEFAULTS, ..._options} as Required<SequenceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst fps = options.fps;\n\n\t\t// Collect sequence nodes.\n\t\tconst sequenceNodes = root.listNodes()\n\t\t\t.filter((node) => node.getName().match(options.pattern));\n\n\t\t// Sort by node name.\n\t\tif (options.sort) {\n\t\t\tsequenceNodes.sort((a, b) => a.getName() > b.getName() ? 1 : -1);\n\t\t}\n\n\t\t// Create animation cycling visibility of each node.\n\t\tconst anim = doc.createAnimation(options.name);\n\t\tconst animBuffer = root.listBuffers()[0];\n\t\tsequenceNodes.forEach((node, i) => {\n\t\t\t// Create keyframe tracks that show each node for a single frame.\n\t\t\tlet inputArray;\n\t\t\tlet outputArray;\n\t\t\tif (i === 0) {\n\t\t\t\tinputArray = [i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [1, 1, 1, 0, 0, 0];\n\t\t\t} else if (i === sequenceNodes.length - 1) {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1];\n\t\t\t} else {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1, 0, 0, 0];\n\t\t\t}\n\n\t\t\t// Append channel to animation sequence.\n\t\t\tconst input = doc.createAccessor()\n\t\t\t\t.setArray(new Float32Array(inputArray))\n\t\t\t\t.setBuffer(animBuffer);\n\t\t\tconst output = doc.createAccessor()\n\t\t\t\t.setArray(new Float32Array(outputArray))\n\t\t\t\t.setBuffer(animBuffer)\n\t\t\t\t.setType(Accessor.Type.VEC3);\n\t\t\tconst sampler = doc.createAnimationSampler()\n\t\t\t\t.setInterpolation(AnimationSampler.Interpolation.STEP)\n\t\t\t\t.setInput(input)\n\t\t\t\t.setOutput(output);\n\t\t\tconst channel = doc.createAnimationChannel()\n\t\t\t\t.setTargetNode(node)\n\t\t\t\t.setTargetPath(AnimationChannel.TargetPath.SCALE)\n\t\t\t\t.setSampler(sampler);\n\t\t\tanim.addSampler(sampler).addChannel(channel);\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n}\n","import { Accessor, Document, Logger, Primitive, Transform, TypedArray, uuid } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'tangents';\n\n/** Options for the {@link tangents} function. */\nexport interface TangentsOptions {\n\t/**\n\t * Callback function to generate tangents from position, uv, and normal attributes.\n\t * Generally, users will want to provide the `generateTangents` from the\n\t * [mikktspace](https://github.com/donmccurdy/mikktspace-wasm) library, which is not\n\t * included by default.\n\t */\n\tgenerateTangents?: (pos: Float32Array, norm: Float32Array, uv: Float32Array) => Float32Array,\n\t/** Whether to overwrite existing `TANGENT` attributes. */\n\toverwrite?: boolean,\n}\n\nconst TANGENTS_DEFAULTS: Required<Omit<TangentsOptions, 'generateTangents'>> = {\n\toverwrite: false,\n};\n\n/**\n * Generates MikkTSpace vertex tangents for mesh primitives, which may fix rendering issues\n * occuring with some baked normal maps. Requires access to the [mikktspace](https://github.com/donmccurdy/mikktspace-wasm)\n * WASM package, or equivalent.\n *\n * Example:\n *\n * ```ts\n * import { generateTangents } from 'mikktspace';\n * import { tangents } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \ttangents({generateTangents})\n * );\n * ```\n */\nexport function tangents (_options: TangentsOptions = TANGENTS_DEFAULTS): Transform {\n\tif (!_options.generateTangents) {\n\t\tthrow new Error(`${NAME}: generateTangents callback required — install \"mikktspace\".`);\n\t}\n\n\tconst options = {...TANGENTS_DEFAULTS, ..._options} as Required<TangentsOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst attributeIDs = new Map<TypedArray, string>();\n\t\tconst tangentCache = new Map<string, Accessor>();\n\t\tlet modified = 0;\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tconst meshName = mesh.getName();\n\t\t\tconst meshPrimitives = mesh.listPrimitives();\n\n\t\t\tfor (let i = 0; i < meshPrimitives.length; i++) {\n\t\t\t\tconst prim = meshPrimitives[i];\n\n\t\t\t\t// Skip primitives for which we can't compute tangents.\n\t\t\t\tif (!filterPrimitive(prim, logger, meshName, i, options.overwrite)) continue;\n\n\t\t\t\tconst texcoordSemantic = getNormalTexcoord(prim);\n\n\t\t\t\t// Nullability conditions checked by filterPrimitive() above.\n\t\t\t\tconst position = prim.getAttribute('POSITION')!.getArray()!;\n\t\t\t\tconst normal = prim.getAttribute('NORMAL')!.getArray()!;\n\t\t\t\tconst texcoord = prim.getAttribute(texcoordSemantic)!.getArray()!;\n\n\t\t\t\t// Compute UUIDs for each attribute.\n\t\t\t\tconst positionID = attributeIDs.get(position) || uuid();\n\t\t\t\tattributeIDs.set(position, positionID);\n\n\t\t\t\tconst normalID = attributeIDs.get(normal) || uuid();\n\t\t\t\tattributeIDs.set(normal, normalID);\n\n\t\t\t\tconst texcoordID = attributeIDs.get(texcoord) || uuid();\n\t\t\t\tattributeIDs.set(texcoord, texcoordID);\n\n\t\t\t\t// Dispose of previous TANGENT accessor if only used by this primitive (and Root).\n\t\t\t\tconst prevTangent = prim.getAttribute('TANGENT');\n\t\t\t\tif (prevTangent && prevTangent.listParents().length === 2) prevTangent.dispose();\n\n\t\t\t\t// If we've already computed tangents for this pos/norm/uv set, reuse them.\n\t\t\t\tconst attributeHash = `${positionID}|${normalID}|${texcoordID}`;\n\t\t\t\tlet tangent = tangentCache.get(attributeHash);\n\t\t\t\tif (tangent) {\n\t\t\t\t\tlogger.debug(`${NAME}: Found cache for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\t\t\t\t\tmodified++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, generate tangents with the 'mikktspace' WASM library.\n\t\t\t\tlogger.debug(`${NAME}: Generating for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\tconst tangentBuffer = prim.getAttribute('POSITION')!.getBuffer();\n\t\t\t\tconst tangentArray = options.generateTangents(\n\t\t\t\t\tposition instanceof Float32Array ? position : new Float32Array(position),\n\t\t\t\t\tnormal instanceof Float32Array ? normal : new Float32Array(normal),\n\t\t\t\t\ttexcoord instanceof Float32Array ? texcoord : new Float32Array(texcoord)\n\t\t\t\t);\n\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/issues/174\n\t\t\t\tfor (let i = 3; i < tangentArray.length; i += 4) tangentArray[i] *= -1;\n\n\t\t\t\ttangent = doc.createAccessor()\n\t\t\t\t\t.setBuffer(tangentBuffer)\n\t\t\t\t\t.setArray(tangentArray)\n\t\t\t\t\t.setType('VEC4');\n\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\n\t\t\t\ttangentCache.set(attributeHash, tangent);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\nfunction getNormalTexcoord(prim: Primitive): string {\n\tconst material = prim.getMaterial();\n\tif (!material) return 'TEXCOORD_0';\n\n\tconst normalTextureInfo = material.getNormalTextureInfo();\n\tif (!normalTextureInfo) return 'TEXCOORD_0';\n\n\tconst texcoord = normalTextureInfo.getTexCoord();\n\tconst semantic = `TEXCOORD_${texcoord}`;\n\tif (prim.getAttribute(semantic)) return semantic;\n\n\treturn 'TEXCOORD_0';\n}\n\nfunction filterPrimitive(\n\t\tprim: Primitive,\n\t\tlogger: Logger,\n\t\tmeshName: string,\n\t\ti: number,\n\t\toverwrite: boolean): boolean {\n\n\tif (prim.getMode() !== Primitive.Mode.TRIANGLES\n\t\t\t|| !prim.getAttribute('POSITION')\n\t\t\t|| !prim.getAttribute('NORMAL')\n\t\t\t|| !prim.getAttribute('TEXCOORD_0')) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must`\n\t\t\t+ ' have attributes=[POSITION, NORMAL, TEXCOORD_0] and mode=TRIANGLES.'\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getAttribute('TANGENT') && !overwrite) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": TANGENT found.`\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getIndices()) {\n\t\t// TODO(feat): Do this automatically for qualifying primitives.\n\t\tlogger.warn(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must`\n\t\t\t+ ' be unwelded.'\n\t\t);\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","import ndarray from 'ndarray';\nimport { lanczos2, lanczos3 } from 'ndarray-lanczos';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport { Document, Transform, vec2 } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'textureResize';\n\n/** Options for the {@link textureResize} function. */\nexport interface TextureResizeOptions {\n\t/**\n\t * Maximum width/height to enforce, preserving aspect ratio. For example,\n\t * a 4096x8192 texture, resized with limit [2048, 2048] will be reduced\n\t * to 1024x2048.\n\t */\n\tsize: vec2;\n\t/** Resampling filter method. LANCZOS3 is sharper, LANCZOS2 is smoother. */\n\tfilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to resize, matched to name or URI. */\n\tpattern?: RegExp | null;\n}\n\n/** Resampling filter methods. LANCZOS3 is sharper, LANCZOS2 is smoother. */\nexport enum TextureResizeFilter {\n\t/** Lanczos3 (sharp) */\n\tLANCZOS3 = 'lanczos3',\n\t/** Lanczos2 (smooth) */\n\tLANCZOS2 = 'lanczos2',\n}\n\nexport const TEXTURE_RESIZE_DEFAULTS: TextureResizeOptions = {\n\tsize: [2048, 2048],\n\tfilter: TextureResizeFilter.LANCZOS3,\n\tpattern: null\n};\n\n/**\n * Resize PNG or JPEG {@link Texture Textures}, with {@link https://en.wikipedia.org/wiki/Lanczos_algorithm Lanczos filtering}.\n * Implementation provided by {@link https://github.com/donmccurdy/ndarray-lanczos ndarray-lanczos} package.\n */\nexport function textureResize(_options: TextureResizeOptions = TEXTURE_RESIZE_DEFAULTS): Transform {\n\tconst options = {...TEXTURE_RESIZE_DEFAULTS, ..._options} as Required<TextureResizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const texture of doc.getRoot().listTextures()) {\n\t\t\tconst name = texture.getName();\n\t\t\tconst uri = texture.getURI();\n\t\t\tconst match = !options.pattern\n\t\t\t\t|| options.pattern.test(name)\n\t\t\t\t|| options.pattern.test(uri);\n\t\t\tif (!match) continue;\n\n\t\t\tif (texture.getMimeType() !== 'image/png' && texture.getMimeType() !== 'image/jpeg') {\n\t\t\t\tlogger.warn(`Skipping unsupported texture type, \"${texture.getMimeType()}\".`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst [maxWidth, maxHeight] = options.size;\n\t\t\tconst [srcWidth, srcHeight] = texture.getSize()!;\n\n\t\t\tif (srcWidth <= maxWidth && srcHeight <= maxHeight) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping \"${uri || name}\", within size range.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet dstWidth = srcWidth;\n\t\t\tlet dstHeight = srcHeight;\n\n\t\t\tif (dstWidth > maxWidth) {\n\t\t\t\tdstHeight = Math.floor(dstHeight * (maxWidth / dstWidth));\n\t\t\t\tdstWidth = maxWidth;\n\t\t\t}\n\n\t\t\tif (dstHeight > maxHeight) {\n\t\t\t\tdstWidth = Math.floor(dstWidth * (maxHeight / dstHeight));\n\t\t\t\tdstHeight = maxHeight;\n\t\t\t}\n\n\t\t\tconst srcImage = new Uint8Array(texture.getImage() as ArrayBuffer);\n\t\t\tconst srcPixels = await getPixels(srcImage, texture.getMimeType());\n\t\t\tconst dstPixels = ndarray(\n\t\t\t\tnew Uint8Array(dstWidth * dstHeight * 4), [dstWidth, dstHeight, 4]\n\t\t\t);\n\n\t\t\tlogger.debug(\n\t\t\t\t`${NAME}: Resizing \"${uri || name}\", ${srcPixels.shape} → ${dstPixels.shape}...`\n\t\t\t);\n\n\t\t\ttry {\n\t\t\t\toptions.filter === TextureResizeFilter.LANCZOS3\n\t\t\t\t\t? lanczos3(srcPixels, dstPixels)\n\t\t\t\t\t: lanczos2(srcPixels, dstPixels);\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\tlogger.warn(`${NAME}: Failed to resize \"${uri || name}\": \"${e.message}\".`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttexture.setImage((await savePixels(dstPixels, texture.getMimeType())).buffer);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n}\n","import { Accessor, Document, Logger, Transform, TypedArray } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'unweld';\n\n/** Options for the {@link unweld} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnweldOptions {}\n\nconst UNWELD_DEFAULTS: UnweldOptions = {};\n\n/**\n * De-index {@link Primitive}s, disconnecting any shared vertices. This operation will generally\n * increase the number of vertices in a mesh, but may be helpful for some geometry operations or\n * for creating hard edges.\n *\n * No options are currently implemented for this function.\n */\nexport function unweld (_options: UnweldOptions = UNWELD_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...UNWELD_DEFAULTS, ..._options} as Required<UnweldOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\t\tconst visited = new Map<Accessor, Map<Accessor, Accessor>>();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (!indices) continue;\n\n\t\t\t\t// Vertex attributes.\n\t\t\t\tfor (const srcAttribute of prim.listAttributes()) {\n\t\t\t\t\tprim.swap(\n\t\t\t\t\t\tsrcAttribute,\n\t\t\t\t\t\tunweldAttribute(srcAttribute, indices, logger, visited)\n\t\t\t\t\t);\n\n\t\t\t\t\t// Clean up.\n\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t}\n\n\t\t\t\t// Morph target vertex attributes.\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tfor (const srcAttribute of target.listAttributes()) {\n\t\t\t\t\t\ttarget.swap(\n\t\t\t\t\t\t\tsrcAttribute,\n\t\t\t\t\t\t\tunweldAttribute(srcAttribute, indices, logger, visited)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Clean up.\n\t\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Clean up.\n\t\t\t\tprim.setIndices(null);\n\t\t\t\tif (indices.listParents().length === 1) indices.dispose();\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction unweldAttribute(\n\t\tsrcAttribute: Accessor,\n\t\tindices: Accessor,\n\t\tlogger: Logger,\n\t\tvisited: Map<Accessor, Map<Accessor, Accessor>>): Accessor {\n\tif (visited.has(srcAttribute) && visited.get(srcAttribute)!.has(indices)) {\n\t\tlogger.debug(`${NAME}: Cache hit for reused attribute, \"${srcAttribute.getName()}\".`);\n\t\treturn visited.get(srcAttribute)!.get(indices)!;\n\t}\n\n\tconst dstAttribute = srcAttribute.clone();\n\tconst ArrayCtor = srcAttribute.getArray()!.constructor as\n\t\tnew (len: number) => TypedArray;\n\tdstAttribute.setArray(\n\t\tnew ArrayCtor(indices.getCount() * srcAttribute.getElementSize())\n\t);\n\n\tconst el: number[] = [];\n\tfor (let i = 0; i < indices.getCount(); i++) {\n\t\tdstAttribute.setElement(i, srcAttribute.getElement(indices.getScalar(i), el));\n\t}\n\n\tif (!visited.has(srcAttribute)) visited.set(srcAttribute, new Map());\n\tvisited.get(srcAttribute)!.set(indices, dstAttribute);\n\n\treturn dstAttribute;\n}\n","import { Accessor, Document, Primitive, PrimitiveTarget, Transform, TypedArray } from '@gltf-transform/core';\nimport { getGLPrimitiveCount, createTransform } from './utils';\n\nconst NAME = 'weld';\n\n/** Options for the {@link weld} function. */\nexport interface WeldOptions {\n\t/** Per-attribute tolerance used when merging similar vertices. */\n\ttolerance?: number\n}\n\nconst WELD_DEFAULTS: Required<WeldOptions> = {tolerance: 1e-4};\n\n/**\n * Index {@link Primitive}s and (optionally) merge similar vertices.\n */\nexport function weld (_options: WeldOptions = WELD_DEFAULTS): Transform {\n\tconst options = {...WELD_DEFAULTS, ..._options} as Required<WeldOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tif (options.tolerance === 0) {\n\t\t\t\t\tweldOnly(doc, prim);\n\t\t\t\t} else {\n\t\t\t\t\tweldAndMerge(doc, prim, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**  In-place weld, adds indices without changing number of vertices. */\nfunction weldOnly (doc: Document, prim: Primitive): void {\n\tif (prim.getIndices()) return;\n\tconst attr = prim.listAttributes()[0];\n\tconst numVertices = attr.getCount();\n\tconst buffer = attr.getBuffer();\n\tconst indicesArray = numVertices <= 65534\n\t\t? new Uint16Array(getGLPrimitiveCount(prim) * 3)\n\t\t: new Uint32Array(getGLPrimitiveCount(prim) * 3);\n\tconst indices = doc.createAccessor()\n\t\t.setBuffer(buffer)\n\t\t.setType(Accessor.Type.SCALAR)\n\t\t.setArray(indicesArray);\n\tfor (let i = 0; i < indices.getCount(); i++) indices.setScalar(i, i);\n\tprim.setIndices(indices);\n}\n\n/**\n * Weld and merge, combining vertices that are similar on all vertex attributes. Morph target\n * attributes are not considered when scoring vertex similarity, but are retained when merging.\n */\nfunction weldAndMerge (doc: Document, prim: Primitive, options: Required<WeldOptions>): void {\n\tconst tolerance = Math.max(options.tolerance, Number.EPSILON);\n\tconst decimalShift = Math.log10(1 / tolerance);\n\tconst shiftFactor = Math.pow(10, decimalShift);\n\n\tconst hashToIndex: {[key: string]: number} = {};\n\tconst srcIndices = prim.getIndices();\n\tconst vertexCount = srcIndices\n\t\t? srcIndices.getCount()\n\t\t: prim.listAttributes()[0].getCount();\n\n\t// Prepare storage for new elements of each attribute.\n\tconst dstAttributes = new Map<Accessor, number[][]>();\n\tprim.listAttributes().forEach((attr) => dstAttributes.set(attr, []));\n\tprim.listTargets().forEach((target) => {\n\t\ttarget.listAttributes().forEach((attr) => dstAttributes.set(attr, []));\n\t});\n\n\tconst dstIndicesArray = [];\n\tlet nextIndex = 0;\n\n\t// For each vertex, compute a hash based on its tolerance and merge with any sufficiently\n\t// similar vertices.\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tconst index = srcIndices ? srcIndices.getScalar(i) : i;\n\n\t\tconst hashElements: number[] = [];\n\t\tconst el: number[] = [];\n\t\tfor (const attribute of prim.listAttributes()) {\n\t\t\tfor (let j = 0; j < attribute.getElementSize(); j++) {\n\t\t\t\thashElements.push(~ ~ (attribute.getElement(index, el)[j] * shiftFactor));\n\t\t\t}\n\t\t}\n\n\t\tconst hash = hashElements.join('|');\n\t\tif (hash in hashToIndex) {\n\t\t\tdstIndicesArray.push(hashToIndex[hash]);\n\t\t} else {\n\t\t\tfor (const attr of prim.listAttributes()) {\n\t\t\t\tdstAttributes.get(attr)!.push(attr.getElement(index, []));\n\t\t\t}\n\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\tfor (const attr of target.listAttributes()) {\n\t\t\t\t\tdstAttributes.get(attr)!.push(attr.getElement(index, []));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thashToIndex[hash] = nextIndex;\n\t\t\tdstIndicesArray.push(nextIndex);\n\t\t\tnextIndex++;\n\t\t}\n\t}\n\n\tconst srcVertexCount = prim.listAttributes()[0].getCount();\n\tconst dstVertexCount = dstAttributes.get(prim.getAttribute('POSITION')!)!.length;\n\tdoc.getLogger().debug(`${NAME}: ${srcVertexCount} → ${dstVertexCount} vertices.`);\n\n\t// Update the primitive.\n\tfor (const srcAttr of prim.listAttributes()) {\n\t\tswapAttributes(prim, srcAttr, dstAttributes.get(srcAttr)!);\n\n\t\t// Clean up.\n\t\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const srcAttr of target.listAttributes()) {\n\t\t\tswapAttributes(target, srcAttr, dstAttributes.get(srcAttr)!);\n\n\t\t\t// Clean up.\n\t\t\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n\t\t}\n\t}\n\tif (srcIndices) {\n\t\tconst dstIndicesTypedArray\n\t\t\t= createArrayOfType(srcIndices.getArray()!, dstIndicesArray.length);\n\t\tdstIndicesTypedArray.set(dstIndicesArray);\n\t\tprim.setIndices(srcIndices.clone().setArray(dstIndicesTypedArray));\n\n\t\t// Clean up.\n\t\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\t} else {\n\t\tconst indicesArray = srcVertexCount <= 65534\n\t\t\t? new Uint16Array(dstIndicesArray)\n\t\t\t: new Uint32Array(dstIndicesArray);\n\t\tprim.setIndices(doc.createAccessor().setArray(indicesArray));\n\t}\n}\n\n/** Creates a new TypedArray of the same type as an original, with a new length. */\nfunction createArrayOfType<T extends TypedArray>(array: T, length: number): T {\n\tconst ArrayCtor = array.constructor as new (length: number) => T;\n\treturn new ArrayCtor(length);\n}\n\n/** Replaces an {@link Attribute}, creating a new one with the given elements. */\nfunction swapAttributes(\n\t\tparent: Primitive | PrimitiveTarget,\n\t\tsrcAttr: Accessor,\n\t\tdstAttrElements: number[][]): void {\n\tconst dstAttrArrayLength = dstAttrElements.length * srcAttr.getElementSize();\n\tconst dstAttrArray = createArrayOfType(srcAttr.getArray()!, dstAttrArrayLength);\n\tconst dstAttr = srcAttr.clone().setArray(dstAttrArray);\n\n\tfor (let i = 0; i < dstAttrElements.length; i++) {\n\t\tdstAttr.setElement(i, dstAttrElements[i]);\n\t}\n\n\tparent.swap(srcAttr, dstAttr);\n}\n"],"names":["rewriteTexture","source","target","fn","srcImage","getImage","getPixels","Uint8Array","getMimeType","pixels","i","shape","j","savePixels","setImage","_savePixels","buffer","setMimeType","createTransform","name","Object","defineProperty","value","getGLPrimitiveCount","prim","indices","getIndices","position","getAttribute","getMode","Primitive","Mode","POINTS","getCount","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Error","SetMap","_map","Map","has","k","add","v","entry","this","get","Set","set","keys","size","NAME","CENTER_DEFAULTS","pivot","DEDUP_DEFAULTS","propertyTypes","PropertyType","ACCESSOR","MESH","TEXTURE","MATERIAL","dedup","_options","options","propertyType","includes","doc","logger","getLogger","indicesAccessors","attributeAccessors","inputAccessors","outputAccessors","meshes","getRoot","listMeshes","forEach","mesh","listPrimitives","primitive","listAttributes","accessor","listAnimations","listSamplers","sampler","input","getInput","output","getOutput","detectDuplicates","accessors","duplicateAccessors","length","a","aData","getArray","slice","b","getType","getComponentType","getNormalized","BufferUtils","equals","duplicateIndices","Array","from","debug","duplicateAttributes","duplicateInputs","duplicateOutputs","swap","dispose","attribute","dedupAccessors","root","refs","listAccessors","index","listMaterials","material","numMeshes","uniqueMeshes","src","srcKeyItems","push","createPrimitiveKey","meshKey","join","targetMesh","listParents","parent","ROOT","dedupMeshes","textures","listTextures","duplicates","bData","aSize","getSize","bSize","entries","dst","property","Root","dedupImages","materials","dedupMaterials","primKeyItems","listSemantics","semantic","getMaterial","listTargets","DEQUANTIZE_DEFAULTS","pattern","dequantizePrimitive","dequantizeAttribute","test","getComponentSize","srcArray","dstArray","Float32Array","il","el","getElement","setArray","setElement","setNormalized","listScenes","properties","map","scene","listChildren","sceneBounds","bounds","getName","rootName","bboxMin","toPrecision","min","bboxMax","max","instances","filter","glPrimitives","verts","semantics","meshIndices","meshAccessors","attr","arrayToType","byteLength","modes","MeshPrimitiveModeLabels","mode","primitives","vertices","sort","attributes","extensions","listExtensions","slots","getGraph","getLinks","link","child","getChild","getParent","Texture","ExtensionProperty","alphaMode","getAlphaMode","doubleSided","getDoubleSided","texture","listParentLinks","resolution","ImageUtils","uri","getURI","mimeType","gpuSize","getMemSize","anim","minTime","Infinity","maxTime","Math","getMin","getMax","keyframes","channels","listChannels","samplers","duration","round","toFixed","Number","array","constructor","replace","toLowerCase","INSTANCE_DEFAULTS","pruneUnusedNodes","nodes","node","unusedNodes","pop","getCamera","getMesh","getSkin","nodeParent","Node","createBatch","batchExtension","count","getBuffer","batchTranslation","createAccessor","setType","setBuffer","batchRotation","batchScale","createInstancedMesh","setAttribute","_this","s","e","_isSettledPact","METALROUGH_DEFAULTS","PRUNE_DEFAULTS","NODE","SKIN","CAMERA","PRIMITIVE","PRIMITIVE_TARGET","ANIMATION","BUFFER","prune","graph","disposed","listNodes","treeShake","listSkins","listCameras","indirectTreeShake","channel","getTargetNode","markDisposed","listBuffers","str","t","info","prop","p","AnimationChannel","PARTITION_DEFAULTS","animations","createBufferURI","basename","existing","SIGNED_INT","Int8Array","Int16Array","Int32Array","TargetPath","WEIGHTS","TRS_CHANNELS","TRANSLATION","ROTATION","SCALE","QUANTIZE_DEFAULTS","quantizationVolume","quantizePosition","quantizeNormal","quantizeTexcoord","quantizeColor","quantizeWeight","quantizeGeneric","quantizePrimitive","nodeTransform","srcAttribute","getQuantizationSettings","bits","ctor","dstAttribute","clone","scale","transform","invert","fromTransform","fromScaling","transformMat4","quantizeAttribute","vertexCount","weightsEl","vertexWeightsSum","leastWeight","leastIndex","leastAttribute","weights","attributeIndex","normalizeWeights","Uint16Array","getNodeTransform","volume","offset","transformMeshParents","transformMatrix","animChannels","isAnimated","some","getTargetPath","isParentNode","setSkin","transformSkin","targetNode","createNode","setMesh","addChild","setTargetNode","nodeMatrix","getMatrix","multiplyMat4","setMatrix","skin","inverseBindMatrices","getInverseBindMatrices","ibm","setInverseBindMatrices","signBits","quantBits","storageBits","BYTES_PER_ELEMENT","pow","lo","hi","di","abs","sign","getMinNormalized","getMaxNormalized","startsWith","warn","getPositionQuantizationVolume","positions","relativePositions","bbox","flatBounds","relMin","relMax","elementSize","fill","tmpMin","tmpMax","fromRotationTranslationScale","RESAMPLE_DEFAULTS","tolerance","optimize","lastIndex","tmp","writeIndex","time","getScalar","timePrev","timeNext","timeMix","keep","getElementSize","valuePrev","valueNext","getInterpolation","setScalar","setInput","setOutput","REORDER_DEFAULTS","remapAttribute","remap","dstCount","srcCount","SEQUENCE_DEFAULTS","fps","TANGENTS_DEFAULTS","overwrite","getNormalTexcoord","normalTextureInfo","getNormalTextureInfo","getTexCoord","filterPrimitive","meshName","_Pact","prototype","state","result","thenable","TextureResizeFilter","TEXTURE_RESIZE_DEFAULTS","LANCZOS3","UNWELD_DEFAULTS","unweldAttribute","visited","ArrayCtor","WELD_DEFAULTS","weldOnly","numVertices","indicesArray","Uint32Array","Accessor","Type","SCALAR","setIndices","weldAndMerge","EPSILON","decimalShift","log10","shiftFactor","hashToIndex","srcIndices","dstAttributes","dstIndicesArray","nextIndex","hashElements","hash","srcVertexCount","dstVertexCount","srcAttr","swapAttributes","dstIndicesTypedArray","createArrayOfType","dstAttrElements","dstAttrArrayLength","dstAttrArray","dstAttr","offsetNode","setTranslation","getTranslation","inputEncoding","converted","updatePrimitive","error","sRGBToLinear","c","color","createExtension","MeshQuantization","scenes","MeshGPUInstancing","numBatches","numInstances","meshInstances","traverse","modifiedNodes","batch","batchNode","setExtension","needsTranslation","needsRotation","needsScale","r","getWorldTranslation","getWorldRotation","getWorldScale","MathUtils","eq","specGlossExtension","inputTextures","tex","listExtensionsUsed","ext","extensionName","iorExtension","MaterialsIOR","specExtension","MaterialsSpecular","MaterialsPBRSpecularGlossiness","specGloss","getExtension","specular","createSpecular","setSpecularFactor","setSpecularColorFactor","getSpecularFactor","getSpecularGlossinessTexture","getBaseColorTexture","getMetallicRoughnessTexture","setBaseColorFactor","getDiffuseFactor","setMetallicFactor","setRoughnessFactor","createIOR","setIOR","diffuseTexture","getDiffuseTexture","setBaseColorTexture","getBaseColorTextureInfo","copy","getDiffuseTextureInfo","sgTexture","sgTextureInfo","getSpecularGlossinessTextureInfo","specularTexture","createTexture","setSpecularTexture","setSpecularColorTexture","getSpecularTextureInfo","getSpecularColorTextureInfo","glossinessFactor","getGlossinessFactor","metalRoughTexture","roughness","setMetallicRoughnessTexture","getMetallicRoughnessTextureInfo","existingURIs","meshIndex","isArray","createBuffer","setURI","primTarget","partitionMeshes","animIndex","partitionAnimations","setRequired","undefined","bboxes","expandBounds","encoder","ready","plan","indicesToAttributes","indicesToMode","attributesToPrimitives","preprocessPrimitives","dstIndices","reorderMesh","unique","context","accessorsVisited","accessorsCountPrev","didSkipMorphTargets","animation","morphTargetSamplers","getSampler","values","initial","pending","stack","lastIndexOf","isTransformPending","sequenceNodes","match","createAnimation","animBuffer","inputArray","outputArray","VEC3","createAnimationSampler","setInterpolation","AnimationSampler","Interpolation","STEP","createAnimationChannel","setTargetPath","setSampler","addSampler","addChannel","generateTangents","attributeIDs","tangentCache","modified","meshPrimitives","texcoordSemantic","normal","texcoord","positionID","uuid","normalID","texcoordID","prevTangent","attributeHash","tangent","tangentBuffer","tangentArray","maxWidth","maxHeight","srcWidth","srcHeight","dstWidth","dstHeight","floor","srcPixels","dstPixels","ndarray","lanczos3","lanczos2","message","_setImage"],"mappings":"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"}